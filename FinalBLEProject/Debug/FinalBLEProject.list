
FinalBLEProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe8  0800afe8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aff0  0800aff0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff0  0800aff0  0001aff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800aff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a55c  2000008c  0800b084  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a5e8  0800b084  0002a5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002285c  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fad  00000000  00000000  0004295b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  00047908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e6  00000000  00000000  000496c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eb33  00000000  00000000  0004adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026814  00000000  00000000  000798e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109e65  00000000  00000000  000a00f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ef4  00000000  00000000  001a9f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001b1e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800af64 	.word	0x0800af64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800af64 	.word	0x0800af64

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HCI_TL_SPI_Init+0x88>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HCI_TL_SPI_Init+0x88>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HCI_TL_SPI_Init+0x88>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000e6c:	2340      	movs	r3, #64	; 0x40
 8000e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <HCI_TL_SPI_Init+0x8c>)
 8000e82:	f004 f9e1 	bl	8005248 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f004 f9d1 	bl	8005248 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <HCI_TL_SPI_Init+0x90>)
 8000ec0:	f004 f9c2 	bl	8005248 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8000ec4:	f002 fd40 	bl	8003948 <BSP_SPI3_Init>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48001000 	.word	0x48001000
 8000edc:	48000c00 	.word	0x48000c00

08000ee0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HCI_TL_SPI_DeInit+0x28>)
 8000ee8:	f004 fb58 	bl	800559c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <HCI_TL_SPI_DeInit+0x2c>)
 8000ef2:	f004 fb53 	bl	800559c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f004 fb4d 	bl	800559c <HAL_GPIO_DeInit>
  return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	48001000 	.word	0x48001000
 8000f0c:	48000c00 	.word	0x48000c00

08000f10 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <HCI_TL_SPI_Reset+0x40>)
 8000f1c:	f004 fc4a 	bl	80057b4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f004 fc43 	bl	80057b4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f003 f8c4 	bl	80040bc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f004 fc39 	bl	80057b4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000f42:	2005      	movs	r0, #5
 8000f44:	f003 f8ba 	bl	80040bc <HAL_Delay>
  return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000c00 	.word	0x48000c00

08000f54 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000f64:	23ff      	movs	r3, #255	; 0xff
 8000f66:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000f68:	4a26      	ldr	r2, [pc, #152]	; (8001004 <HCI_TL_SPI_Receive+0xb0>)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f72:	6018      	str	r0, [r3, #0]
 8000f74:	3304      	adds	r3, #4
 8000f76:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <HCI_TL_SPI_Receive+0xb4>)
 8000f80:	f004 fc18 	bl	80057b4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000f84:	f107 010c 	add.w	r1, r7, #12
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fd0a 	bl	80039a8 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d129      	bne.n	8000fee <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000f9a:	7c3b      	ldrb	r3, [r7, #16]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000faa:	8bfb      	ldrh	r3, [r7, #30]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d01e      	beq.n	8000fee <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000fb0:	8bfa      	ldrh	r2, [r7, #30]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d901      	bls.n	8000fbc <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	777b      	strb	r3, [r7, #29]
 8000fc0:	e010      	b.n	8000fe4 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000fc2:	f107 011b 	add.w	r1, r7, #27
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fceb 	bl	80039a8 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8000fd2:	7f7b      	ldrb	r3, [r7, #29]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	7efa      	ldrb	r2, [r7, #27]
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000fde:	7f7b      	ldrb	r3, [r7, #29]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	777b      	strb	r3, [r7, #29]
 8000fe4:	7f7b      	ldrb	r3, [r7, #29]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	8bfa      	ldrh	r2, [r7, #30]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8e9      	bhi.n	8000fc2 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <HCI_TL_SPI_Receive+0xb4>)
 8000ff6:	f004 fbdd 	bl	80057b4 <HAL_GPIO_WritePin>

  return len;
 8000ffa:	7f7b      	ldrb	r3, [r7, #29]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800af7c 	.word	0x0800af7c
 8001008:	48000c00 	.word	0x48000c00

0800100c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <HCI_TL_SPI_Send+0xa0>)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001022:	6018      	str	r0, [r3, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001028:	f003 f83c 	bl	80040a4 <HAL_GetTick>
 800102c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001038:	481d      	ldr	r0, [pc, #116]	; (80010b0 <HCI_TL_SPI_Send+0xa4>)
 800103a:	f004 fbbb 	bl	80057b4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800103e:	f107 0108 	add.w	r1, r7, #8
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2205      	movs	r2, #5
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fcad 	bl	80039a8 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800104e:	7a3b      	ldrb	r3, [r7, #8]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d10f      	bne.n	8001074 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001054:	7a7b      	ldrb	r3, [r7, #9]
 8001056:	b29b      	uxth	r3, r3
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	429a      	cmp	r2, r3
 800105c:	d806      	bhi.n	800106c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	461a      	mov	r2, r3
 8001062:	4914      	ldr	r1, [pc, #80]	; (80010b4 <HCI_TL_SPI_Send+0xa8>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f002 fc9f 	bl	80039a8 <BSP_SPI3_SendRecv>
 800106a:	e006      	b.n	800107a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800106c:	f06f 0301 	mvn.w	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e002      	b.n	800107a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001078:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <HCI_TL_SPI_Send+0xa4>)
 8001082:	f004 fb97 	bl	80057b4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001086:	f003 f80d 	bl	80040a4 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d903      	bls.n	800109c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001094:	f06f 0302 	mvn.w	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
      break;
 800109a:	e002      	b.n	80010a2 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dbc5      	blt.n	800102e <HCI_TL_SPI_Send+0x22>

  return result;
 80010a2:	69fb      	ldr	r3, [r7, #28]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800af84 	.word	0x0800af84
 80010b0:	48000c00 	.word	0x48000c00
 80010b4:	200000b0 	.word	0x200000b0

080010b8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <IsDataAvailable+0x1c>)
 80010c0:	f004 fb60 	bl	8005784 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	48001000 	.word	0x48001000

080010d8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <hci_tl_lowlevel_init+0x50>)
 80010e0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <hci_tl_lowlevel_init+0x54>)
 80010e4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <hci_tl_lowlevel_init+0x58>)
 80010e8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <hci_tl_lowlevel_init+0x5c>)
 80010ec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <hci_tl_lowlevel_init+0x60>)
 80010f0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <hci_tl_lowlevel_init+0x64>)
 80010f4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f009 fa29 	bl	800a550 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80010fe:	4910      	ldr	r1, [pc, #64]	; (8001140 <hci_tl_lowlevel_init+0x68>)
 8001100:	4810      	ldr	r0, [pc, #64]	; (8001144 <hci_tl_lowlevel_init+0x6c>)
 8001102:	f004 f85c 	bl	80051be <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <hci_tl_lowlevel_init+0x70>)
 8001108:	2100      	movs	r1, #0
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <hci_tl_lowlevel_init+0x6c>)
 800110c:	f004 f83d 	bl	800518a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2017      	movs	r0, #23
 8001116:	f003 f8d0 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111a:	2017      	movs	r0, #23
 800111c:	f003 f8e9 	bl	80042f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08000e4d 	.word	0x08000e4d
 800112c:	08000ee1 	.word	0x08000ee1
 8001130:	0800100d 	.word	0x0800100d
 8001134:	08000f55 	.word	0x08000f55
 8001138:	08000f11 	.word	0x08000f11
 800113c:	080039e9 	.word	0x080039e9
 8001140:	16000006 	.word	0x16000006
 8001144:	200000a8 	.word	0x200000a8
 8001148:	0800114d 	.word	0x0800114d

0800114c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001150:	e005      	b.n	800115e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001152:	2000      	movs	r0, #0
 8001154:	f009 fb60 	bl	800a818 <hci_notify_asynch_evt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800115e:	f7ff ffab 	bl	80010b8 <IsDataAvailable>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f4      	bne.n	8001152 <hci_tl_lowlevel_isr+0x6>
 8001168:	e000      	b.n	800116c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800116a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <processMicDataAssembly>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float processMicDataAssembly(uint32_t *data) {
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint32_t result;

	asm volatile (
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	680a      	ldr	r2, [r1, #0]
 800117c:	f04f 0301 	mov.w	r3, #1
 8001180:	f04f 0601 	mov.w	r6, #1
 8001184:	4614      	mov	r4, r2

08001186 <loop_start>:
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	da09      	bge.n	800119e <loop_add>
 800118a:	f101 0104 	add.w	r1, r1, #4
 800118e:	680d      	ldr	r5, [r1, #0]
 8001190:	42a5      	cmp	r5, r4
 8001192:	dd00      	ble.n	8001196 <not_greater>
 8001194:	462c      	mov	r4, r5

08001196 <not_greater>:
 8001196:	600d      	str	r5, [r1, #0]
 8001198:	f103 0301 	add.w	r3, r3, #1
 800119c:	e7f3      	b.n	8001186 <loop_start>

0800119e <loop_add>:
 800119e:	2e64      	cmp	r6, #100	; 0x64
 80011a0:	da04      	bge.n	80011ac <loop_end>
 80011a2:	f106 0601 	add.w	r6, r6, #1
 80011a6:	f04f 0301 	mov.w	r3, #1
 80011aa:	e7ec      	b.n	8001186 <loop_start>

080011ac <loop_end>:
 80011ac:	4621      	mov	r1, r4
 80011ae:	60f9      	str	r1, [r7, #12]
			: [result] "=r" (result)
			  : [data] "r" (data)
				: "memory", "r2", "r3", "r4", "r5", "r6"
	);

	float ret = 16.283*log(result) - 185.93;
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff f953 	bl	800045c <__aeabi_ui2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b10 	vmov	d0, r2, r3
 80011be:	f009 fccf 	bl	800ab60 <log>
 80011c2:	ec51 0b10 	vmov	r0, r1, d0
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <loop_end+0x5c>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f9c0 	bl	8000550 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a30d      	add	r3, pc, #52	; (adr r3, 8001210 <loop_end+0x64>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7fe ffff 	bl	80001e0 <__aeabi_dsub>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc61 	bl	8000ab0 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	60bb      	str	r3, [r7, #8]
//	int32_t final_result = (int32_t)(ret*10);
	return ret;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	ee07 3a90 	vmov	s15, r3
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	b020c49c 	.word	0xb020c49c
 800120c:	40304872 	.word	0x40304872
 8001210:	8f5c28f6 	.word	0x8f5c28f6
 8001214:	40673dc2 	.word	0x40673dc2

08001218 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == myButton_Pin) {
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001228:	d10d      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_GPIO_TogglePin(myLED_GPIO_Port, myLED_Pin);
 800122a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_GPIO_EXTI_Callback+0x38>)
 8001230:	f004 fad8 	bl	80057e4 <HAL_GPIO_TogglePin>
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001236:	f003 fc21 	bl	8004a7c <HAL_DFSDM_FilterRegularStop_DMA>
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,wave_value,10000);
 800123a:	f242 7210 	movw	r2, #10000	; 0x2710
 800123e:	4906      	ldr	r1, [pc, #24]	; (8001258 <HAL_GPIO_EXTI_Callback+0x40>)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001242:	f003 fb99 	bl	8004978 <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	48000400 	.word	0x48000400
 8001254:	200001c4 	.word	0x200001c4
 8001258:	2000040c 	.word	0x2000040c

0800125c <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef * hdfsdm_filter){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	//bitshift by 8
	noise_level = (int32_t)(processMicDataAssembly(wave_value));
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 8001266:	f7ff ff83 	bl	8001170 <processMicDataAssembly>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	ee17 2a90 	vmov	r2, s15
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>)
 8001278:	601a      	str	r2, [r3, #0]
//		if(wave_value_filtered[i] < min){
//			min = wave_value_filtered[i];
//		}
//	}
//	noise_level = max-min;
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <HAL_DFSDM_FilterRegConvCpltCallback+0x40>)
 800127c:	f003 fbfe 	bl	8004a7c <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,wave_value,10000);
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	4903      	ldr	r1, [pc, #12]	; (8001294 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_DFSDM_FilterRegConvCpltCallback+0x40>)
 8001288:	f003 fb76 	bl	8004978 <HAL_DFSDM_FilterRegularStart_DMA>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000040c 	.word	0x2000040c
 8001298:	2000a04c 	.word	0x2000a04c
 800129c:	200001c4 	.word	0x200001c4

080012a0 <getReadings>:
BLE_Update_Data getReadings(){
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	BLE_Update_Data curr_data;
	curr_data.noise = noise_level;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <getReadings+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	617b      	str	r3, [r7, #20]
	curr_data.pressure = (int16_t) BSP_PSENSOR_ReadPressure();
 80012ae:	f001 ff23 	bl	80030f8 <BSP_PSENSOR_ReadPressure>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 3a90 	vmov	r3, s15
 80012be:	b21b      	sxth	r3, r3
 80012c0:	823b      	strh	r3, [r7, #16]
	curr_data.humidity =(int16_t) BSP_HSENSOR_ReadHumidity();
 80012c2:	f001 feeb 	bl	800309c <BSP_HSENSOR_ReadHumidity>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
 80012ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ce:	ee17 3a90 	vmov	r3, s15
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	827b      	strh	r3, [r7, #18]
	curr_data.temperature = (int16_t) (BSP_TSENSOR_ReadTemp()*10);
 80012d6:	f002 fb29 	bl	800392c <BSP_TSENSOR_ReadTemp>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	60fb      	str	r3, [r7, #12]
	curr_data.timestamp = HAL_GetTick();
 80012f2:	f002 fed7 	bl	80040a4 <HAL_GetTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
	return curr_data;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	461c      	mov	r4, r3
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	2000a04c 	.word	0x2000a04c

08001314 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800131a:	f002 fe5a 	bl	8003fd2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800131e:	f000 f837 	bl	8001390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001322:	f000 fa23 	bl	800176c <MX_GPIO_Init>
	MX_DMA_Init();
 8001326:	f000 fa03 	bl	8001730 <MX_DMA_Init>
	MX_I2C2_Init();
 800132a:	f000 f96d 	bl	8001608 <MX_I2C2_Init>
	MX_DFSDM1_Init();
 800132e:	f000 f8c5 	bl	80014bc <MX_DFSDM1_Init>
	MX_DAC1_Init();
 8001332:	f000 f88f 	bl	8001454 <MX_DAC1_Init>
	MX_I2C1_Init();
 8001336:	f000 f927 	bl	8001588 <MX_I2C1_Init>
	MX_QUADSPI_Init();
 800133a:	f000 f9a3 	bl	8001684 <MX_QUADSPI_Init>
	MX_USART1_UART_Init();
 800133e:	f000 f9c7 	bl	80016d0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BSP_PSENSOR_Init();
 8001342:	f001 feb9 	bl	80030b8 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 8001346:	f002 fad5 	bl	80038f4 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 800134a:	f001 fe87 	bl	800305c <BSP_HSENSOR_Init>
	BSP_QSPI_Init();
 800134e:	f001 fee1 	bl	8003114 <BSP_QSPI_Init>
	init_ble();
 8001352:	f000 fbe1 	bl	8001b18 <init_ble>
	clearFlashData1();
 8001356:	f001 f887 	bl	8002468 <clearFlashData1>
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <main+0x74>)
 800135c:	f003 fb8e 	bl	8004a7c <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,wave_value,10000);
 8001360:	f242 7210 	movw	r2, #10000	; 0x2710
 8001364:	4909      	ldr	r1, [pc, #36]	; (800138c <main+0x78>)
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <main+0x74>)
 8001368:	f003 fb06 	bl	8004978 <HAL_DFSDM_FilterRegularStart_DMA>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		curr_data= getReadings();
 800136c:	463b      	mov	r3, r7
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff96 	bl	80012a0 <getReadings>

		run_ble(curr_data);
 8001374:	463b      	mov	r3, r7
 8001376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001378:	f000 febc 	bl	80020f4 <run_ble>
		HAL_Delay(1000);
 800137c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001380:	f002 fe9c 	bl	80040bc <HAL_Delay>
		curr_data= getReadings();
 8001384:	e7f2      	b.n	800136c <main+0x58>
 8001386:	bf00      	nop
 8001388:	200001c4 	.word	0x200001c4
 800138c:	2000040c 	.word	0x2000040c

08001390 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2244      	movs	r2, #68	; 0x44
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f009 fb9d 	bl	800aade <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b6:	f005 f8ad 	bl	8006514 <HAL_PWREx_ControlVoltageScaling>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80013c0:	f000 fba4 	bl	8001b0c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80013c4:	f005 f888 	bl	80064d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SystemClock_Config+0xc0>)
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <SystemClock_Config+0xc0>)
 80013d0:	f023 0318 	bic.w	r3, r3, #24
 80013d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013d8:	2314      	movs	r3, #20
 80013da:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013f8:	2328      	movs	r3, #40	; 0x28
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f005 fdc3 	bl	8006f98 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001418:	f000 fb78 	bl	8001b0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2303      	movs	r3, #3
 8001422:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f006 f98b 	bl	8007750 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8001440:	f000 fb64 	bl	8001b0c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001444:	f006 fe92 	bl	800816c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001448:	bf00      	nop
 800144a:	3758      	adds	r7, #88	; 0x58
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2224      	movs	r2, #36	; 0x24
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fb3c 	bl	800aade <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_DAC1_Init+0x60>)
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_DAC1_Init+0x64>)
 800146a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_DAC1_Init+0x60>)
 800146e:	f002 ff5a 	bl	8004326 <HAL_DAC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8001478:	f000 fb48 	bl	8001b0c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001484:	2302      	movs	r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
	sConfig.DAC_TrimmingValue = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_DAC1_Init+0x60>)
 800149c:	f002 ff65 	bl	800436a <HAL_DAC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_DAC1_Init+0x56>
	{
		Error_Handler();
 80014a6:	f000 fb31 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001b0 	.word	0x200001b0
 80014b8:	40007400 	.word	0x40007400

080014bc <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <MX_DFSDM1_Init+0xbc>)
 80014c4:	601a      	str	r2, [r3, #0]
	hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
	hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	721a      	strb	r2, [r3, #8]
	hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	725a      	strb	r2, [r3, #9]
	hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014da:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80014de:	61da      	str	r2, [r3, #28]
	hdfsdm1_filter0.Init.FilterParam.Oversampling = 95;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014e2:	225f      	movs	r2, #95	; 0x5f
 80014e4:	621a      	str	r2, [r3, #32]
	hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80014ec:	4821      	ldr	r0, [pc, #132]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 80014ee:	f003 f923 	bl	8004738 <HAL_DFSDM_FilterInit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DFSDM1_Init+0x40>
	{
		Error_Handler();
 80014f8:	f000 fb08 	bl	8001b0c <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_DFSDM1_Init+0xc0>)
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <MX_DFSDM1_Init+0xc4>)
 8001500:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_DFSDM1_Init+0xc0>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
	hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001510:	2228      	movs	r2, #40	; 0x28
 8001512:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_DFSDM1_Init+0xc0>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_DFSDM1_Init+0xc0>)
 800152e:	2204      	movs	r2, #4
 8001530:	621a      	str	r2, [r3, #32]
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001534:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_DFSDM1_Init+0xc0>)
 800153c:	2201      	movs	r2, #1
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_DFSDM1_Init+0xc0>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_DFSDM1_Init+0xc0>)
 800154e:	f003 f833 	bl	80045b8 <HAL_DFSDM_ChannelInit>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_DFSDM1_Init+0xa0>
	{
		Error_Handler();
 8001558:	f000 fad8 	bl	8001b0c <Error_Handler>
	}
	if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800155c:	2201      	movs	r2, #1
 800155e:	4909      	ldr	r1, [pc, #36]	; (8001584 <MX_DFSDM1_Init+0xc8>)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_DFSDM1_Init+0xb8>)
 8001562:	f003 f9c3 	bl	80048ec <HAL_DFSDM_FilterConfigRegChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_DFSDM1_Init+0xb4>
	{
		Error_Handler();
 800156c:	f000 face 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001c4 	.word	0x200001c4
 8001578:	40016100 	.word	0x40016100
 800157c:	20000218 	.word	0x20000218
 8001580:	40016040 	.word	0x40016040
 8001584:	00020004 	.word	0x00020004

08001588 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_I2C1_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <MX_I2C1_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_I2C1_Init+0x74>)
 8001594:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <MX_I2C1_Init+0x7c>)
 8001596:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_I2C1_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_I2C1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_I2C1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_I2C1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_I2C1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <MX_I2C1_Init+0x74>)
 80015c4:	f004 f940 	bl	8005848 <HAL_I2C_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80015ce:	f000 fa9d 	bl	8001b0c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <MX_I2C1_Init+0x74>)
 80015d6:	f004 fee7 	bl	80063a8 <HAL_I2CEx_ConfigAnalogFilter>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80015e0:	f000 fa94 	bl	8001b0c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_I2C1_Init+0x74>)
 80015e8:	f004 ff29 	bl	800643e <HAL_I2CEx_ConfigDigitalFilter>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80015f2:	f000 fa8b 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000298 	.word	0x20000298
 8001600:	40005400 	.word	0x40005400
 8001604:	10909cec 	.word	0x10909cec

08001608 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C2_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C2_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00000E14;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C2_Init+0x74>)
 8001614:	f640 6214 	movw	r2, #3604	; 0xe14
 8001618:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_I2C2_Init+0x74>)
 8001622:	2201      	movs	r2, #1
 8001624:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_I2C2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C2_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_I2C2_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_I2C2_Init+0x74>)
 8001646:	f004 f8ff 	bl	8005848 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001650:	f000 fa5c 	bl	8001b0c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C2_Init+0x74>)
 8001658:	f004 fea6 	bl	80063a8 <HAL_I2CEx_ConfigAnalogFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 8001662:	f000 fa53 	bl	8001b0c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C2_Init+0x74>)
 800166a:	f004 fee8 	bl	800643e <HAL_I2CEx_ConfigDigitalFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 8001674:	f000 fa4a 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200002ec 	.word	0x200002ec
 8001680:	40005800 	.word	0x40005800

08001684 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <MX_QUADSPI_Init+0x48>)
 800168c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 8001696:	2201      	movs	r2, #1
 8001698:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_QUADSPI_Init+0x44>)
 80016b4:	f004 ff84 	bl	80065c0 <HAL_QSPI_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_QUADSPI_Init+0x3e>
	{
		Error_Handler();
 80016be:	f000 fa25 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000340 	.word	0x20000340
 80016cc:	a0001000 	.word	0xa0001000

080016d0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <MX_USART1_UART_Init+0x5c>)
 80016d8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_USART1_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_USART1_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_USART1_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_USART1_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_USART1_UART_Init+0x58>)
 8001714:	f007 fb4e 	bl	8008db4 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800171e:	f000 f9f5 	bl	8001b0c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000384 	.word	0x20000384
 800172c:	40013800 	.word	0x40013800

08001730 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_DMA_Init+0x38>)
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <MX_DMA_Init+0x38>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6493      	str	r3, [r2, #72]	; 0x48
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_DMA_Init+0x38>)
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	200e      	movs	r0, #14
 8001754:	f002 fdb1 	bl	80042ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001758:	200e      	movs	r0, #14
 800175a:	f002 fdca 	bl	80042f2 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4bbd      	ldr	r3, [pc, #756]	; (8001a78 <MX_GPIO_Init+0x30c>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4abc      	ldr	r2, [pc, #752]	; (8001a78 <MX_GPIO_Init+0x30c>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4bba      	ldr	r3, [pc, #744]	; (8001a78 <MX_GPIO_Init+0x30c>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4bb7      	ldr	r3, [pc, #732]	; (8001a78 <MX_GPIO_Init+0x30c>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4ab6      	ldr	r2, [pc, #728]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4bb4      	ldr	r3, [pc, #720]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4bb1      	ldr	r3, [pc, #708]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4ab0      	ldr	r2, [pc, #704]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4bab      	ldr	r3, [pc, #684]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4aaa      	ldr	r2, [pc, #680]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4ba8      	ldr	r3, [pc, #672]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4ba5      	ldr	r3, [pc, #660]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4aa4      	ldr	r2, [pc, #656]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4ba2      	ldr	r3, [pc, #648]	; (8001a78 <MX_GPIO_Init+0x30c>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001800:	489e      	ldr	r0, [pc, #632]	; (8001a7c <MX_GPIO_Init+0x310>)
 8001802:	f003 ffd7 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f248 1104 	movw	r1, #33028	; 0x8104
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f003 ffd0 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|myLED_Pin
 8001814:	2200      	movs	r2, #0
 8001816:	f24f 0114 	movw	r1, #61460	; 0xf014
 800181a:	4899      	ldr	r0, [pc, #612]	; (8001a80 <MX_GPIO_Init+0x314>)
 800181c:	f003 ffca 	bl	80057b4 <HAL_GPIO_WritePin>
			|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f241 0181 	movw	r1, #4225	; 0x1081
 8001826:	4897      	ldr	r0, [pc, #604]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001828:	f003 ffc4 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4894      	ldr	r0, [pc, #592]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001834:	f003 ffbe 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800183e:	4892      	ldr	r0, [pc, #584]	; (8001a88 <MX_GPIO_Init+0x31c>)
 8001840:	f003 ffb8 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2120      	movs	r1, #32
 8001848:	488d      	ldr	r0, [pc, #564]	; (8001a80 <MX_GPIO_Init+0x314>)
 800184a:	f003 ffb3 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2101      	movs	r1, #1
 8001852:	488a      	ldr	r0, [pc, #552]	; (8001a7c <MX_GPIO_Init+0x310>)
 8001854:	f003 ffae 	bl	80057b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001858:	f240 1315 	movw	r3, #277	; 0x115
 800185c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4882      	ldr	r0, [pc, #520]	; (8001a7c <MX_GPIO_Init+0x310>)
 8001872:	f003 fce9 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001876:	236a      	movs	r3, #106	; 0x6a
 8001878:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800187e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	487c      	ldr	r0, [pc, #496]	; (8001a7c <MX_GPIO_Init+0x310>)
 800188c:	f003 fcdc 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : myButton_Pin */
	GPIO_InitStruct.Pin = myButton_Pin;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001896:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800189a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4878      	ldr	r0, [pc, #480]	; (8001a88 <MX_GPIO_Init+0x31c>)
 80018a8:	f003 fcce 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80018ac:	233f      	movs	r3, #63	; 0x3f
 80018ae:	617b      	str	r3, [r7, #20]
			|ARD_A1_Pin|ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018b0:	230b      	movs	r3, #11
 80018b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4872      	ldr	r0, [pc, #456]	; (8001a88 <MX_GPIO_Init+0x31c>)
 80018c0:	f003 fcc2 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
	GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80018c4:	2303      	movs	r3, #3
 80018c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018d4:	2308      	movs	r3, #8
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f003 fcb1 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80018e6:	f248 1304 	movw	r3, #33028	; 0x8104
 80018ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f003 fca1 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001916:	2301      	movs	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f003 fc90 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D7_Pin */
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001928:	2310      	movs	r3, #16
 800192a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800192c:	230b      	movs	r3, #11
 800192e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f003 fc83 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001942:	23e0      	movs	r3, #224	; 0xe0
 8001944:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001952:	2305      	movs	r3, #5
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f003 fc72 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001968:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800196c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4841      	ldr	r0, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x314>)
 800197a:	f003 fc65 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001982:	230b      	movs	r3, #11
 8001984:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	483b      	ldr	r0, [pc, #236]	; (8001a80 <MX_GPIO_Init+0x314>)
 8001992:	f003 fc59 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin myLED_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|myLED_Pin
 8001996:	f24f 0334 	movw	r3, #61492	; 0xf034
 800199a:	617b      	str	r3, [r7, #20]
			|SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4834      	ldr	r0, [pc, #208]	; (8001a80 <MX_GPIO_Init+0x314>)
 80019b0:	f003 fc4a 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80019b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c6:	2307      	movs	r3, #7
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	482c      	ldr	r0, [pc, #176]	; (8001a84 <MX_GPIO_Init+0x318>)
 80019d2:	f003 fc39 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019d6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80019da:	617b      	str	r3, [r7, #20]
			|PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4825      	ldr	r0, [pc, #148]	; (8001a84 <MX_GPIO_Init+0x318>)
 80019ee:	f003 fc2b 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80019f2:	f243 0381 	movw	r3, #12417	; 0x3081
 80019f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481e      	ldr	r0, [pc, #120]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001a0c:	f003 fc1c 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <MX_GPIO_Init+0x31c>)
 8001a2a:	f003 fc0d 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <MX_GPIO_Init+0x31c>)
 8001a46:	f003 fbff 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a62:	f003 fbf1 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e009      	b.n	8001a8c <MX_GPIO_Init+0x320>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48001000 	.word	0x48001000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	48000c00 	.word	0x48000c00
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f003 fbd4 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4813      	ldr	r0, [pc, #76]	; (8001b08 <MX_GPIO_Init+0x39c>)
 8001abc:	f003 fbc4 	bl	8005248 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001ac0:	2378      	movs	r3, #120	; 0x78
 8001ac2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <MX_GPIO_Init+0x39c>)
 8001adc:	f003 fbb4 	bl	8005248 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f002 fbe8 	bl	80042ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f002 fc01 	bl	80042f2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f002 fbe0 	bl	80042ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f002 fbf9 	bl	80042f2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	48000c00 	.word	0x48000c00

08001b0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b14:	e7fe      	b.n	8001b14 <Error_Handler+0x8>
	...

08001b18 <init_ble>:
Char_UUID_t char_uuid;

static void User_Init(void);
tBleStatus Add_SensorData_Service(void);

void init_ble(){
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af04      	add	r7, sp, #16
	const char *name = "Sensor1";
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <init_ble+0x118>)
 8001b20:	617b      	str	r3, [r7, #20]
	uint8_t  bdaddr_len_out;
	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8001b22:	f000 f88f 	bl	8001c44 <User_Init>

	hci_init(user_notify, NULL);
 8001b26:	2100      	movs	r1, #0
 8001b28:	4842      	ldr	r0, [pc, #264]	; (8001c34 <init_ble+0x11c>)
 8001b2a:	f008 fccf 	bl	800a4cc <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8001b2e:	1dba      	adds	r2, r7, #6
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f008 fb3d 	bl	800a1b6 <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 8001b3c:	f008 fb7f 	bl	800a23e <hci_reset>
	HAL_Delay(100);
 8001b40:	2064      	movs	r0, #100	; 0x64
 8001b42:	f002 fabb 	bl	80040bc <HAL_Delay>

	PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8001b46:	7a3b      	ldrb	r3, [r7, #8]
 8001b48:	2b30      	cmp	r3, #48	; 0x30
 8001b4a:	d902      	bls.n	8001b52 <init_ble+0x3a>
		bnrg_expansion_board = IDB05A1;
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <init_ble+0x120>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
	}

	ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8001b52:	f107 0209 	add.w	r2, r7, #9
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <init_ble+0x124>)
 8001b58:	2106      	movs	r1, #6
 8001b5a:	2080      	movs	r0, #128	; 0x80
 8001b5c:	f008 faa5 	bl	800a0aa <aci_hal_read_config_data>
 8001b60:	4603      	mov	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

	if (ret) {
		PRINTF("Read Static Random address failed.\n");
	}

	if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <init_ble+0x124>)
 8001b66:	795b      	ldrb	r3, [r3, #5]
 8001b68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b6c:	2bc0      	cmp	r3, #192	; 0xc0
 8001b6e:	d000      	beq.n	8001b72 <init_ble+0x5a>
		PRINTF("Static Random address not well formed.\n");
		while(1);
 8001b70:	e7fe      	b.n	8001b70 <init_ble+0x58>
	}

	/* GATT Init */
	ret = aci_gatt_init();
 8001b72:	f008 f866 	bl	8009c42 <aci_gatt_init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]
	if(ret){
		PRINTF("GATT_Init failed.\n");
	}

	/* GAP Init */
	if (bnrg_expansion_board == IDB05A1) {
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <init_ble+0x120>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d110      	bne.n	8001ba4 <init_ble+0x8c>
		ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001b82:	f107 020e 	add.w	r2, r7, #14
 8001b86:	f107 030a 	add.w	r3, r7, #10
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	2207      	movs	r2, #7
 8001b96:	2100      	movs	r1, #0
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f007 fe26 	bl	80097ea <aci_gap_init_IDB05A1>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e00a      	b.n	8001bba <init_ble+0xa2>
	}
	else {
		ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001ba4:	f107 030a 	add.w	r3, r7, #10
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	f107 010e 	add.w	r1, r7, #14
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f007 fe6a 	bl	800988a <aci_gap_init_IDB04A1>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
	if (ret != BLE_STATUS_SUCCESS) {
		PRINTF("GAP_Init failed.\n");
	}

	/* Update device name */
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001bba:	89fc      	ldrh	r4, [r7, #14]
 8001bbc:	89bd      	ldrh	r5, [r7, #12]
			strlen(name), (uint8_t *)name);
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7fe fb02 	bl	80001c8 <strlen>
 8001bc4:	4603      	mov	r3, r0
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f008 f9ac 	bl	8009f30 <aci_gatt_update_char_value>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]
	if (ret) {
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d000      	beq.n	8001be4 <init_ble+0xcc>
		PRINTF("aci_gatt_update_char_value failed.\n");
		while(1);
 8001be2:	e7fe      	b.n	8001be2 <init_ble+0xca>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001be4:	2301      	movs	r3, #1
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <init_ble+0x128>)
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f007 ff79 	bl	8009af2 <aci_gap_set_auth_requirement>
 8001c00:	4603      	mov	r3, r0
 8001c02:	613b      	str	r3, [r7, #16]
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret) {
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d000      	beq.n	8001c0c <init_ble+0xf4>
		PRINTF("aci_gap_set_authentication_requirement failed.\n");
		while(1);
 8001c0a:	e7fe      	b.n	8001c0a <init_ble+0xf2>
	}

	PRINTF("BLE Stack Initialized\n");

	ret = (int) Add_SensorData_Service();
 8001c0c:	f000 f822 	bl	8001c54 <Add_SensorData_Service>
 8001c10:	4603      	mov	r3, r0
 8001c12:	613b      	str	r3, [r7, #16]
	if(ret == BLE_STATUS_SUCCESS) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d000      	beq.n	8001c1c <init_ble+0x104>
		PRINTF("BlueMS HW service added successfully.\n");
	} else {
		PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
		while(1);
 8001c1a:	e7fe      	b.n	8001c1a <init_ble+0x102>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f008 fa98 	bl	800a154 <aci_hal_set_tx_power_level>
 8001c24:	4603      	mov	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	0800af8c 	.word	0x0800af8c
 8001c34:	0800257d 	.word	0x0800257d
 8001c38:	2000a050 	.word	0x2000a050
 8001c3c:	2000a054 	.word	0x2000a054
 8001c40:	0001e240 	.word	0x0001e240

08001c44 <User_Init>:
void User_Init(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	//	BSP_LED_Init(LED2);
	//	BSP_COM_Init(COM1);
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <Add_SensorData_Service>:

tBleStatus Add_SensorData_Service(void)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b08d      	sub	sp, #52	; 0x34
 8001c58:	af06      	add	r7, sp, #24
	tBleStatus ret;
	uint8_t uuid[16];

	/* Add_HWServW2ST_Service */
	COPY_SENSOR_DATA_SERVICE_UUID(uuid);
 8001c5a:	231b      	movs	r3, #27
 8001c5c:	713b      	strb	r3, [r7, #4]
 8001c5e:	23c5      	movs	r3, #197	; 0xc5
 8001c60:	717b      	strb	r3, [r7, #5]
 8001c62:	23d5      	movs	r3, #213	; 0xd5
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	23a5      	movs	r3, #165	; 0xa5
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	723b      	strb	r3, [r7, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	727b      	strb	r3, [r7, #9]
 8001c72:	23b4      	movs	r3, #180	; 0xb4
 8001c74:	72bb      	strb	r3, [r7, #10]
 8001c76:	239a      	movs	r3, #154	; 0x9a
 8001c78:	72fb      	strb	r3, [r7, #11]
 8001c7a:	23e1      	movs	r3, #225	; 0xe1
 8001c7c:	733b      	strb	r3, [r7, #12]
 8001c7e:	2311      	movs	r3, #17
 8001c80:	737b      	strb	r3, [r7, #13]
 8001c82:	2301      	movs	r3, #1
 8001c84:	73bb      	strb	r3, [r7, #14]
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	743b      	strb	r3, [r7, #16]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	747b      	strb	r3, [r7, #17]
 8001c92:	2300      	movs	r3, #0
 8001c94:	74bb      	strb	r3, [r7, #18]
 8001c96:	2300      	movs	r3, #0
 8001c98:	74fb      	strb	r3, [r7, #19]
	BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <Add_SensorData_Service+0x110>)
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <Add_SensorData_Service+0x114>)
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2310      	movs	r3, #16
 8001cac:	2201      	movs	r2, #1
 8001cae:	492d      	ldr	r1, [pc, #180]	; (8001d64 <Add_SensorData_Service+0x110>)
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f007 ffe9 	bl	8009c88 <aci_gatt_add_serv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
			1+3*5, &SDServHandle);
	if (ret != BLE_STATUS_SUCCESS)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <Add_SensorData_Service+0x70>
		return BLE_STATUS_ERROR;
 8001cc0:	2347      	movs	r3, #71	; 0x47
 8001cc2:	e04a      	b.n	8001d5a <Add_SensorData_Service+0x106>

	/* Fill the Environmental BLE Characteristc */
	COPY_SENSOR_DATA_CHAR_UUID(uuid);
 8001cc4:	231b      	movs	r3, #27
 8001cc6:	713b      	strb	r3, [r7, #4]
 8001cc8:	23c5      	movs	r3, #197	; 0xc5
 8001cca:	717b      	strb	r3, [r7, #5]
 8001ccc:	23d5      	movs	r3, #213	; 0xd5
 8001cce:	71bb      	strb	r3, [r7, #6]
 8001cd0:	23a5      	movs	r3, #165	; 0xa5
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	723b      	strb	r3, [r7, #8]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	727b      	strb	r3, [r7, #9]
 8001cdc:	2336      	movs	r3, #54	; 0x36
 8001cde:	72bb      	strb	r3, [r7, #10]
 8001ce0:	23ac      	movs	r3, #172	; 0xac
 8001ce2:	72fb      	strb	r3, [r7, #11]
 8001ce4:	23e1      	movs	r3, #225	; 0xe1
 8001ce6:	733b      	strb	r3, [r7, #12]
 8001ce8:	2311      	movs	r3, #17
 8001cea:	737b      	strb	r3, [r7, #13]
 8001cec:	2301      	movs	r3, #1
 8001cee:	73bb      	strb	r3, [r7, #14]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	743b      	strb	r3, [r7, #16]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	747b      	strb	r3, [r7, #17]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	74bb      	strb	r3, [r7, #18]
 8001d00:	2300      	movs	r3, #0
 8001d02:	74fb      	strb	r3, [r7, #19]
	uuid[14] |= 0x04; /* One Temperature value*/
 8001d04:	7cbb      	ldrb	r3, [r7, #18]
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	74bb      	strb	r3, [r7, #18]
	uuid[14] |= 0x10; /* Pressure value*/
 8001d0e:	7cbb      	ldrb	r3, [r7, #18]
 8001d10:	f043 0310 	orr.w	r3, r3, #16
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	74bb      	strb	r3, [r7, #18]
	BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <Add_SensorData_Service+0x118>)
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret =  aci_gatt_add_char(SDServHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <Add_SensorData_Service+0x114>)
 8001d26:	8818      	ldrh	r0, [r3, #0]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <Add_SensorData_Service+0x11c>)
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9304      	str	r3, [sp, #16]
 8001d30:	2310      	movs	r3, #16
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	2304      	movs	r3, #4
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	23f2      	movs	r3, #242	; 0xf2
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <Add_SensorData_Service+0x118>)
 8001d44:	2102      	movs	r1, #2
 8001d46:	f008 f828 	bl	8009d9a <aci_gatt_add_char>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]
			BLE_DATA_SIZE*15+2,
			CHAR_PROP_NOTIFY|CHAR_PROP_READ,
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			16, 0, &SDCharHandle);
	if (ret != BLE_STATUS_SUCCESS)
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <Add_SensorData_Service+0x104>
		return BLE_STATUS_ERROR;
 8001d54:	2347      	movs	r3, #71	; 0x47
 8001d56:	e000      	b.n	8001d5a <Add_SensorData_Service+0x106>

	return BLE_STATUS_SUCCESS;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000a060 	.word	0x2000a060
 8001d68:	2000a05a 	.word	0x2000a05a
 8001d6c:	2000a070 	.word	0x2000a070
 8001d70:	2000a05c 	.word	0x2000a05c

08001d74 <Sensor_Reading_Update>:


tBleStatus Sensor_Reading_Update(int32_t time, int16_t press, int16_t temp,int16_t humidity, int32_t noise)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	uint8_t buff[BLE_DATA_SIZE+2];
	HOST_TO_LE_16(buff,1);
 8001d8e:	2301      	movs	r3, #1
 8001d90:	757b      	strb	r3, [r7, #21]
 8001d92:	2300      	movs	r3, #0
 8001d94:	753b      	strb	r3, [r7, #20]
	HOST_TO_LE_32(buff+2,time);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	767b      	strb	r3, [r7, #25]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	121b      	asrs	r3, r3, #8
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	763b      	strb	r3, [r7, #24]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	141b      	asrs	r3, r3, #16
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	75fb      	strb	r3, [r7, #23]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	161b      	asrs	r3, r3, #24
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	75bb      	strb	r3, [r7, #22]
	HOST_TO_LE_16(buff+6,press);
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	76fb      	strb	r3, [r7, #27]
 8001dba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dbe:	121b      	asrs	r3, r3, #8
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	76bb      	strb	r3, [r7, #26]
	HOST_TO_LE_16(buff+8,temp);
 8001dc6:	893b      	ldrh	r3, [r7, #8]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	777b      	strb	r3, [r7, #29]
 8001dcc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dd0:	121b      	asrs	r3, r3, #8
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	773b      	strb	r3, [r7, #28]
	HOST_TO_LE_16(buff+10,humidity);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	77fb      	strb	r3, [r7, #31]
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	121b      	asrs	r3, r3, #8
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	77bb      	strb	r3, [r7, #30]
	HOST_TO_LE_32(buff+12,noise);
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	121b      	asrs	r3, r3, #8
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	141b      	asrs	r3, r3, #16
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	161b      	asrs	r3, r3, #24
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f887 3020 	strb.w	r3, [r7, #32]

	ret = aci_gatt_update_char_value(SDServHandle, SDCharHandle,
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <Sensor_Reading_Update+0xd0>)
 8001e12:	8818      	ldrh	r0, [r3, #0]
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <Sensor_Reading_Update+0xd4>)
 8001e16:	8819      	ldrh	r1, [r3, #0]
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2312      	movs	r3, #18
 8001e20:	2200      	movs	r2, #0
 8001e22:	f008 f885 	bl	8009f30 <aci_gatt_update_char_value>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			0, BLE_DATA_SIZE+2, buff);

	if (ret != BLE_STATUS_SUCCESS){
 8001e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <Sensor_Reading_Update+0xc4>
		PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
		return BLE_STATUS_ERROR ;
 8001e34:	2347      	movs	r3, #71	; 0x47
 8001e36:	e000      	b.n	8001e3a <Sensor_Reading_Update+0xc6>
	}

	return BLE_STATUS_SUCCESS;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000a05a 	.word	0x2000a05a
 8001e48:	2000a05c 	.word	0x2000a05c

08001e4c <Sensor_Reading_Update_Multiple>:
tBleStatus Sensor_Reading_Update_Multiple(BLE_Update_Data * readings,uint16_t length){
 8001e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e50:	b089      	sub	sp, #36	; 0x24
 8001e52:	af02      	add	r7, sp, #8
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
 8001e5a:	466b      	mov	r3, sp
 8001e5c:	461e      	mov	r6, r3
	tBleStatus ret;
	uint8_t buff[length*BLE_DATA_SIZE+2];
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	1c99      	adds	r1, r3, #2
 8001e64:	1e4b      	subs	r3, r1, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	460a      	mov	r2, r1
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	4699      	mov	r9, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e84:	460a      	mov	r2, r1
 8001e86:	2300      	movs	r3, #0
 8001e88:	4614      	mov	r4, r2
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	00eb      	lsls	r3, r5, #3
 8001e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9a:	00e2      	lsls	r2, r4, #3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	3307      	adds	r3, #7
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ea8:	ab02      	add	r3, sp, #8
 8001eaa:	3300      	adds	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
//	uint8_t buff[200];
	HOST_TO_LE_16(buff,length);
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	705a      	strb	r2, [r3, #1]
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < length; i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	82fb      	strh	r3, [r7, #22]
 8001ec6:	e0c7      	b.n	8002058 <Sensor_Reading_Update_Multiple+0x20c>
		uint16_t offset = i*BLE_DATA_SIZE+2;
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3302      	adds	r3, #2
 8001ed0:	813b      	strh	r3, [r7, #8]
		HOST_TO_LE_32(buff+offset,readings[i].timestamp);
 8001ed2:	8afb      	ldrh	r3, [r7, #22]
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	893b      	ldrh	r3, [r7, #8]
 8001ede:	3303      	adds	r3, #3
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0a19      	lsrs	r1, r3, #8
 8001ef4:	893b      	ldrh	r3, [r7, #8]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0c19      	lsrs	r1, r3, #16
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	8afb      	ldrh	r3, [r7, #22]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e19      	lsrs	r1, r3, #24
 8001f24:	893b      	ldrh	r3, [r7, #8]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	b2ca      	uxtb	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
		HOST_TO_LE_16(buff+offset+4,readings[i].pressure);
 8001f2e:	8afb      	ldrh	r3, [r7, #22]
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001f3a:	893b      	ldrh	r3, [r7, #8]
 8001f3c:	3305      	adds	r3, #5
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	b2ca      	uxtb	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	8afb      	ldrh	r3, [r7, #22]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b219      	sxth	r1, r3
 8001f56:	893b      	ldrh	r3, [r7, #8]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2ca      	uxtb	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
		HOST_TO_LE_32(buff+offset+6,readings[i].temperature);
 8001f62:	8afb      	ldrh	r3, [r7, #22]
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	3309      	adds	r3, #9
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	1219      	asrs	r1, r3, #8
 8001f84:	893b      	ldrh	r3, [r7, #8]
 8001f86:	3308      	adds	r3, #8
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	8afb      	ldrh	r3, [r7, #22]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	1419      	asrs	r1, r3, #16
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	3307      	adds	r3, #7
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b2ca      	uxtb	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	8afb      	ldrh	r3, [r7, #22]
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	1619      	asrs	r1, r3, #24
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2ca      	uxtb	r2, r1
 8001fbe:	701a      	strb	r2, [r3, #0]
		HOST_TO_LE_16(buff+offset+10,readings[i].humidity);
 8001fc0:	8afb      	ldrh	r3, [r7, #22]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	330b      	adds	r3, #11
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	8afb      	ldrh	r3, [r7, #22]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001fe4:	121b      	asrs	r3, r3, #8
 8001fe6:	b219      	sxth	r1, r3
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	330a      	adds	r3, #10
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
		HOST_TO_LE_32(buff+offset+12,readings[i].noise);
 8001ff4:	8afb      	ldrh	r3, [r7, #22]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	893b      	ldrh	r3, [r7, #8]
 8002000:	330f      	adds	r3, #15
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	1219      	asrs	r1, r3, #8
 8002016:	893b      	ldrh	r3, [r7, #8]
 8002018:	330e      	adds	r3, #14
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	b2ca      	uxtb	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	8afb      	ldrh	r3, [r7, #22]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	1419      	asrs	r1, r3, #16
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	330d      	adds	r3, #13
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	8afb      	ldrh	r3, [r7, #22]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	1619      	asrs	r1, r3, #24
 8002046:	893b      	ldrh	r3, [r7, #8]
 8002048:	330c      	adds	r3, #12
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < length; i++){
 8002052:	8afb      	ldrh	r3, [r7, #22]
 8002054:	3301      	adds	r3, #1
 8002056:	82fb      	strh	r3, [r7, #22]
 8002058:	8afa      	ldrh	r2, [r7, #22]
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	429a      	cmp	r2, r3
 800205e:	f4ff af33 	bcc.w	8001ec8 <Sensor_Reading_Update_Multiple+0x7c>
	}


	ret = aci_gatt_update_char_value(SDServHandle, SDCharHandle,
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <Sensor_Reading_Update_Multiple+0x254>)
 8002064:	8818      	ldrh	r0, [r3, #0]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <Sensor_Reading_Update_Multiple+0x258>)
 8002068:	8819      	ldrh	r1, [r3, #0]
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3302      	adds	r3, #2
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	2200      	movs	r2, #0
 800207e:	f007 ff57 	bl	8009f30 <aci_gatt_update_char_value>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]
			0, length*BLE_DATA_SIZE+2, buff);

	if (ret != BLE_STATUS_SUCCESS){
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <Sensor_Reading_Update_Multiple+0x244>
		PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
		return BLE_STATUS_ERROR ;
 800208c:	2347      	movs	r3, #71	; 0x47
 800208e:	e000      	b.n	8002092 <Sensor_Reading_Update_Multiple+0x246>
	}

	return BLE_STATUS_SUCCESS;
 8002090:	2300      	movs	r3, #0
 8002092:	46b5      	mov	sp, r6
}
 8002094:	4618      	mov	r0, r3
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800209e:	bf00      	nop
 80020a0:	2000a05a 	.word	0x2000a05a
 80020a4:	2000a05c 	.word	0x2000a05c

080020a8 <Read_Request_CB>:


void Read_Request_CB(uint16_t handle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;

	if (handle == SDCharHandle + 1)
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <Read_Request_CB+0x44>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d107      	bne.n	80020ce <Read_Request_CB+0x26>
	{
		//for if the phone tries to "Read" the data, can maybe just disable this feature if we don't want it
		Sensor_Reading_Update(1,2,3,4,5);
 80020be:	2305      	movs	r3, #5
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2304      	movs	r3, #4
 80020c4:	2203      	movs	r2, #3
 80020c6:	2102      	movs	r1, #2
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fe53 	bl	8001d74 <Sensor_Reading_Update>
	}

	if(connection_handle !=0)
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <Read_Request_CB+0x48>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <Read_Request_CB+0x3c>
	{
		ret = aci_gatt_allow_read(connection_handle);
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <Read_Request_CB+0x48>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 ffb8 	bl	800a050 <aci_gatt_allow_read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
		if (ret != BLE_STATUS_SUCCESS)
		{
			PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
		}
	}
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000a05c 	.word	0x2000a05c
 80020f0:	2000a080 	.word	0x2000a080

080020f4 <run_ble>:

int getBLEConnected(){
	return connected;
}

void run_ble(BLE_Update_Data data){
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	b093      	sub	sp, #76	; 0x4c
 80020fa:	af02      	add	r7, sp, #8
 80020fc:	f107 0608 	add.w	r6, r7, #8
 8002100:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	if (set_connectable)
 8002104:	4b83      	ldr	r3, [pc, #524]	; (8002314 <run_ble+0x220>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <run_ble+0x24>
	{
		Set_DeviceConnectable();
 800210e:	f000 f9c1 	bl	8002494 <Set_DeviceConnectable>
		set_connectable = FALSE;
 8002112:	4b80      	ldr	r3, [pc, #512]	; (8002314 <run_ble+0x220>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
	}
	uint16_t data_length = readNumOfData_1();
 8002118:	f000 f900 	bl	800231c <readNumOfData_1>
 800211c:	4603      	mov	r3, r0
 800211e:	867b      	strh	r3, [r7, #50]	; 0x32
	if(connected){
 8002120:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <run_ble+0x224>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e4 	beq.w	80022f2 <run_ble+0x1fe>
		if(data_length >0){
 800212a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80d9 	beq.w	80022e4 <run_ble+0x1f0>
 8002132:	466b      	mov	r3, sp
 8002134:	461e      	mov	r6, r3
			HAL_Delay(3000);
 8002136:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800213a:	f001 ffbf 	bl	80040bc <HAL_Delay>
			uint8_t section_size = 5;
 800213e:	2305      	movs	r3, #5
 8002140:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			BLE_Update_Data send_buffer[section_size];
 8002144:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 8002148:	460b      	mov	r3, r1
 800214a:	3b01      	subs	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214e:	b2cb      	uxtb	r3, r1
 8002150:	2200      	movs	r2, #0
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	01c3      	lsls	r3, r0, #7
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	01c2      	lsls	r2, r0, #7
 800216c:	b2cb      	uxtb	r3, r1
 800216e:	2200      	movs	r2, #0
 8002170:	469a      	mov	sl, r3
 8002172:	4693      	mov	fp, r2
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8002180:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8002184:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8002188:	460b      	mov	r3, r1
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	3307      	adds	r3, #7
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	ebad 0d03 	sub.w	sp, sp, r3
 8002196:	ab02      	add	r3, sp, #8
 8002198:	3303      	adds	r3, #3
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
			BLE_Update_Data buffer_1[data_length+1];
 80021a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	1e4b      	subs	r3, r1, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	460a      	mov	r2, r1
 80021aa:	2300      	movs	r3, #0
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 80021bc:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 80021c0:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 80021c4:	460a      	mov	r2, r1
 80021c6:	2300      	movs	r3, #0
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	01eb      	lsls	r3, r5, #7
 80021d6:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 80021da:	01e2      	lsls	r2, r4, #7
 80021dc:	460b      	mov	r3, r1
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	3307      	adds	r3, #7
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	ebad 0d03 	sub.w	sp, sp, r3
 80021ea:	ab02      	add	r3, sp, #8
 80021ec:	3303      	adds	r3, #3
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	623b      	str	r3, [r7, #32]
			readDataArrayBlock1(0, buffer_1, data_length);
 80021f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80021f6:	461a      	mov	r2, r3
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f916 	bl	800242c <readDataArrayBlock1>
			buffer_1[data_length] = data;
 8002200:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002202:	6a3a      	ldr	r2, [r7, #32]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4413      	add	r3, r2
 8002208:	461c      	mov	r4, r3
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			uint8_t num_full_packets = (data_length+1)/section_size;
 8002214:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800221c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002220:	77fb      	strb	r3, [r7, #31]
			for(int i = 0; i < num_full_packets;i++){
 8002222:	2300      	movs	r3, #0
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002226:	e029      	b.n	800227c <run_ble+0x188>
				for(int k = 0; k < section_size; k++){
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
 800222c:	e014      	b.n	8002258 <run_ble+0x164>
					send_buffer[k]=buffer_1[k+i*section_size];
 800222e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002234:	fb03 f202 	mul.w	r2, r3, r2
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	4413      	add	r3, r2
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	4411      	add	r1, r2
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4413      	add	r3, r2
 800224a:	460c      	mov	r4, r1
 800224c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800224e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				for(int k = 0; k < section_size; k++){
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	3301      	adds	r3, #1
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
 8002258:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800225c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225e:	429a      	cmp	r2, r3
 8002260:	dbe5      	blt.n	800222e <run_ble+0x13a>
				}
				Sensor_Reading_Update_Multiple(&send_buffer,section_size);
 8002262:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002266:	b29b      	uxth	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800226c:	f7ff fdee 	bl	8001e4c <Sensor_Reading_Update_Multiple>
				HAL_Delay(250);
 8002270:	20fa      	movs	r0, #250	; 0xfa
 8002272:	f001 ff23 	bl	80040bc <HAL_Delay>
			for(int i = 0; i < num_full_packets;i++){
 8002276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002278:	3301      	adds	r3, #1
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002280:	429a      	cmp	r2, r3
 8002282:	dbd1      	blt.n	8002228 <run_ble+0x134>
			}
			uint8_t remainder = (data_length+1)%section_size;
 8002284:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002286:	3301      	adds	r3, #1
 8002288:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800228c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002290:	fb01 f202 	mul.w	r2, r1, r2
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	77bb      	strb	r3, [r7, #30]
			for(int k = 0; k < remainder; k++){
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	e014      	b.n	80022c8 <run_ble+0x1d4>
				send_buffer[k]=buffer_1[k+num_full_packets*section_size];
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80022a4:	fb03 f202 	mul.w	r2, r3, r2
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	4413      	add	r3, r2
 80022ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4411      	add	r1, r2
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	460c      	mov	r4, r1
 80022bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			for(int k = 0; k < remainder; k++){
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	3301      	adds	r3, #1
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
 80022c8:	7fbb      	ldrb	r3, [r7, #30]
 80022ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbe6      	blt.n	800229e <run_ble+0x1aa>
			}
			Sensor_Reading_Update_Multiple(&send_buffer,remainder);
 80022d0:	7fbb      	ldrb	r3, [r7, #30]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f7ff fdb8 	bl	8001e4c <Sensor_Reading_Update_Multiple>
			clearFlashData1();
 80022dc:	f000 f8c4 	bl	8002468 <clearFlashData1>
 80022e0:	46b5      	mov	sp, r6
 80022e2:	e00f      	b.n	8002304 <run_ble+0x210>
		}else{
			//send singular reading
			Sensor_Reading_Update_Multiple(&data,1);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	2101      	movs	r1, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fdae 	bl	8001e4c <Sensor_Reading_Update_Multiple>
 80022f0:	e008      	b.n	8002304 <run_ble+0x210>
		}
	}else{
		writeDataToFlash(data,data_length,0);
 80022f2:	2300      	movs	r3, #0
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002300:	f000 f83a 	bl	8002378 <writeDataToFlash>
	}
	hci_user_evt_proc();
 8002304:	f008 fa5c 	bl	800a7c0 <hci_user_evt_proc>
}
 8002308:	bf00      	nop
 800230a:	3744      	adds	r7, #68	; 0x44
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002312:	bf00      	nop
 8002314:	20000004 	.word	0x20000004
 8002318:	2000a084 	.word	0x2000a084

0800231c <readNumOfData_1>:

/**
 * Read the number of struct data in the first data block
 * */

uint16_t readNumOfData_1() {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
	uint16_t num = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	81fb      	strh	r3, [r7, #14]
	uint8_t data;
	for (int i = 0; i < single_block_data_size; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	e016      	b.n	800235a <readNumOfData_1+0x3e>
		// read a byte from the memory address
		if (  BSP_QSPI_Read(&data, BASE_ADDR_BITMAP_1 + i, 1) != QSPI_OK) {
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002332:	4619      	mov	r1, r3
 8002334:	1dfb      	adds	r3, r7, #7
 8002336:	2201      	movs	r2, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 ff57 	bl	80031ec <BSP_QSPI_Read>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <readNumOfData_1+0x2c>
		      	Error_Handler();
 8002344:	f7ff fbe2 	bl	8001b0c <Error_Handler>
		}

		if (data == 0) { // if there is data in the location
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <readNumOfData_1+0x4a>
			num += 1;
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	3301      	adds	r3, #1
 8002352:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < single_block_data_size; i++) {
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <readNumOfData_1+0x58>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbe3      	blt.n	800232c <readNumOfData_1+0x10>
 8002364:	e000      	b.n	8002368 <readNumOfData_1+0x4c>
		} else {
			break;
 8002366:	bf00      	nop
		}
	}
	return num;
 8002368:	89fb      	ldrh	r3, [r7, #14]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000

08002378 <writeDataToFlash>:
 * Write a Struct data into the flash
 * In this implementation, if the block max is reached, all memory is deleted
 * If not, add 1 to the memory
 * block_data_length is the existing length of data, the return value of readNumOfData_1()
 * */
void writeDataToFlash(BLE_Update_Data flash_data_input, uint16_t block_data_length, uint8_t block_index) {
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	463c      	mov	r4, r7
 8002380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// first check the current data length
	uint16_t data_index = block_data_length;
 8002384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002386:	83fb      	strh	r3, [r7, #30]
	uint8_t zero = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	74fb      	strb	r3, [r7, #19]
//	uint8_t one = 15;
	uint32_t data_addr = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
	uint32_t bitmap_addr = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
	if (block_data_length == single_block_data_size) { // in case the block is full
 8002394:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <writeDataToFlash+0xb0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d113      	bne.n	80023c6 <writeDataToFlash+0x4e>
		// delete all data
		  if (BSP_QSPI_Erase_Block(BASE_ADDR_BITMAP_1) != QSPI_OK) {
 800239e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80023a2:	f000 ffe7 	bl	8003374 <BSP_QSPI_Erase_Block>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <writeDataToFlash+0x38>
		    Error_Handler();
 80023ac:	f7ff fbae 	bl	8001b0c <Error_Handler>
		  }

		  if (BSP_QSPI_Erase_Block(BASE_ADDR_DATA_1) != QSPI_OK) {
 80023b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80023b4:	f000 ffde 	bl	8003374 <BSP_QSPI_Erase_Block>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <writeDataToFlash+0x4a>
		      Error_Handler();
 80023be:	f7ff fba5 	bl	8001b0c <Error_Handler>
		  }

		  data_index = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	83fb      	strh	r3, [r7, #30]
	}

	if (block_index == 0) {
 80023c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <writeDataToFlash+0x64>
		data_addr = BASE_ADDR_DATA_1;
 80023ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d2:	61bb      	str	r3, [r7, #24]
		bitmap_addr = BASE_ADDR_BITMAP_1;
 80023d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e005      	b.n	80023e8 <writeDataToFlash+0x70>
	} else {
		data_addr = BASE_ADDR_DATA_2;
 80023dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023e0:	61bb      	str	r3, [r7, #24]
		bitmap_addr = BASE_ADDR_BITMAP_2;
 80023e2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023e6:	617b      	str	r3, [r7, #20]
	}

	// write to flash memory first
    if ( BSP_QSPI_Write((uint8_t *) &flash_data_input, data_addr + (data_index * sizeof(BLE_Update_Data)), sizeof(BLE_Update_Data)) != QSPI_OK) {
 80023e8:	8bfb      	ldrh	r3, [r7, #30]
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	18d1      	adds	r1, r2, r3
 80023f0:	463b      	mov	r3, r7
 80023f2:	2210      	movs	r2, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 ff3f 	bl	8003278 <BSP_QSPI_Write>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <writeDataToFlash+0x8c>
        	  Error_Handler();
 8002400:	f7ff fb84 	bl	8001b0c <Error_Handler>
    }
    // then write to bitmap
    if ( BSP_QSPI_Write((uint8_t *) &zero, bitmap_addr + data_index, 1) != QSPI_OK) {
 8002404:	8bfa      	ldrh	r2, [r7, #30]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	18d1      	adds	r1, r2, r3
 800240a:	f107 0313 	add.w	r3, r7, #19
 800240e:	2201      	movs	r2, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 ff31 	bl	8003278 <BSP_QSPI_Write>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <writeDataToFlash+0xa8>
    	      Error_Handler();
 800241c:	f7ff fb76 	bl	8001b0c <Error_Handler>
    }

}
 8002420:	bf00      	nop
 8002422:	3724      	adds	r7, #36	; 0x24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	20000000 	.word	0x20000000

0800242c <readDataArrayBlock1>:

/**
 * Read flash data into a struct array
 * */

void readDataArrayBlock1(uint16_t index, BLE_Update_Data* flash_data_ptr, uint16_t read_data_length) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	80fb      	strh	r3, [r7, #6]
 8002438:	4613      	mov	r3, r2
 800243a:	80bb      	strh	r3, [r7, #4]
	uint32_t data_addr = BASE_ADDR_DATA_1;
 800243c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002440:	60fb      	str	r3, [r7, #12]
	if (  BSP_QSPI_Read((uint8_t *)flash_data_ptr, data_addr + (index * sizeof(BLE_Update_Data)), read_data_length * sizeof(BLE_Update_Data)) != QSPI_OK) {
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	011a      	lsls	r2, r3, #4
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	18d1      	adds	r1, r2, r3
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	461a      	mov	r2, r3
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f000 fecb 	bl	80031ec <BSP_QSPI_Read>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <readDataArrayBlock1+0x34>
	    Error_Handler();
 800245c:	f7ff fb56 	bl	8001b0c <Error_Handler>
	}
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <clearFlashData1>:

/**
 * Clear All Data
 * */
void clearFlashData1() {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	  if (BSP_QSPI_Erase_Block(BASE_ADDR_BITMAP_1) != QSPI_OK) {
 800246c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002470:	f000 ff80 	bl	8003374 <BSP_QSPI_Erase_Block>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <clearFlashData1+0x16>
	    Error_Handler();
 800247a:	f7ff fb47 	bl	8001b0c <Error_Handler>
	  }

	  if (BSP_QSPI_Erase_Block(BASE_ADDR_DATA_1) != QSPI_OK) {
 800247e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002482:	f000 ff77 	bl	8003374 <BSP_QSPI_Erase_Block>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <clearFlashData1+0x28>
	      Error_Handler();
 800248c:	f7ff fb3e 	bl	8001b0c <Error_Handler>
	  }
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b092      	sub	sp, #72	; 0x48
 8002498:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800249a:	4a36      	ldr	r2, [pc, #216]	; (8002574 <Set_DeviceConnectable+0xe0>)
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024a4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80024a8:	2302      	movs	r3, #2
 80024aa:	703b      	strb	r3, [r7, #0]
 80024ac:	230a      	movs	r3, #10
 80024ae:	707b      	strb	r3, [r7, #1]
 80024b0:	2300      	movs	r3, #0
 80024b2:	70bb      	strb	r3, [r7, #2]
 80024b4:	2308      	movs	r3, #8
 80024b6:	70fb      	strb	r3, [r7, #3]
 80024b8:	2309      	movs	r3, #9
 80024ba:	713b      	strb	r3, [r7, #4]
 80024bc:	2353      	movs	r3, #83	; 0x53
 80024be:	717b      	strb	r3, [r7, #5]
 80024c0:	2365      	movs	r3, #101	; 0x65
 80024c2:	71bb      	strb	r3, [r7, #6]
 80024c4:	236e      	movs	r3, #110	; 0x6e
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	2373      	movs	r3, #115	; 0x73
 80024ca:	723b      	strb	r3, [r7, #8]
 80024cc:	236f      	movs	r3, #111	; 0x6f
 80024ce:	727b      	strb	r3, [r7, #9]
 80024d0:	2372      	movs	r3, #114	; 0x72
 80024d2:	72bb      	strb	r3, [r7, #10]
 80024d4:	2331      	movs	r3, #49	; 0x31
 80024d6:	72fb      	strb	r3, [r7, #11]
 80024d8:	230d      	movs	r3, #13
 80024da:	733b      	strb	r3, [r7, #12]
 80024dc:	23ff      	movs	r3, #255	; 0xff
 80024de:	737b      	strb	r3, [r7, #13]
 80024e0:	2301      	movs	r3, #1
 80024e2:	73bb      	strb	r3, [r7, #14]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	2300      	movs	r3, #0
 80024ea:	743b      	strb	r3, [r7, #16]
 80024ec:	23f4      	movs	r3, #244	; 0xf4
 80024ee:	747b      	strb	r3, [r7, #17]
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <Set_DeviceConnectable+0xe4>)
 80024fa:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80024fc:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <Set_DeviceConnectable+0xe4>)
 8002500:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002502:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <Set_DeviceConnectable+0xe4>)
 8002506:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002508:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <Set_DeviceConnectable+0xe4>)
 800250c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800250e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <Set_DeviceConnectable+0xe4>)
 8002512:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002514:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <Set_DeviceConnectable+0xe4>)
 8002518:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800251a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 800251c:	7cbb      	ldrb	r3, [r7, #18]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002526:	2100      	movs	r1, #0
 8002528:	2000      	movs	r0, #0
 800252a:	f007 fef4 	bl	800a316 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800252e:	2300      	movs	r3, #0
 8002530:	9306      	str	r3, [sp, #24]
 8002532:	2300      	movs	r3, #0
 8002534:	9305      	str	r3, [sp, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	9304      	str	r3, [sp, #16]
 800253a:	2300      	movs	r3, #0
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	2308      	movs	r3, #8
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2301      	movs	r3, #1
 800254e:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002552:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002556:	2000      	movs	r0, #0
 8002558:	f007 f9e1 	bl	800991e <aci_gap_set_discoverable>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002562:	463b      	mov	r3, r7
 8002564:	4619      	mov	r1, r3
 8002566:	201a      	movs	r0, #26
 8002568:	f007 fb1a 	bl	8009ba0 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	0800af94 	.word	0x0800af94
 8002578:	2000a054 	.word	0x2000a054

0800257c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d139      	bne.n	800260a <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2bff      	cmp	r3, #255	; 0xff
 800259c:	d01f      	beq.n	80025de <user_notify+0x62>
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	dc38      	bgt.n	8002614 <user_notify+0x98>
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d002      	beq.n	80025ac <user_notify+0x30>
 80025a6:	2b3e      	cmp	r3, #62	; 0x3e
 80025a8:	d003      	beq.n	80025b2 <user_notify+0x36>
 80025aa:	e033      	b.n	8002614 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80025ac:	f000 f836 	bl	800261c <GAP_DisconnectionComplete_CB>
    }
    break;
 80025b0:	e030      	b.n	8002614 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d126      	bne.n	800260e <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1d5a      	adds	r2, r3, #5
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f000 f837 	bl	8002648 <GAP_ConnectionComplete_CB>
        }
        break;
 80025da:	bf00      	nop
      }
    }
    break;
 80025dc:	e017      	b.n	800260e <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3302      	adds	r3, #2
 80025e2:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	f640 4314 	movw	r3, #3092	; 0xc14
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10e      	bne.n	8002612 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3302      	adds	r3, #2
 80025f8:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	885b      	ldrh	r3, [r3, #2]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fd51 	bl	80020a8 <Read_Request_CB>
        }
        break;
 8002606:	bf00      	nop
      }

    }
    break;
 8002608:	e003      	b.n	8002612 <user_notify+0x96>
    return;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <user_notify+0x98>
    break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <user_notify+0x98>
    break;
 8002612:	bf00      	nop
  }
}
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <GAP_DisconnectionComplete_CB+0x20>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <GAP_DisconnectionComplete_CB+0x24>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <GAP_DisconnectionComplete_CB+0x28>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	2000a084 	.word	0x2000a084
 8002640:	20000004 	.word	0x20000004
 8002644:	2000a082 	.word	0x2000a082

08002648 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <GAP_ConnectionComplete_CB+0x38>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <GAP_ConnectionComplete_CB+0x3c>)
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002660:	2305      	movs	r3, #5
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e002      	b.n	800266c <GAP_ConnectionComplete_CB+0x24>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b01      	subs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	2000a084 	.word	0x2000a084
 8002684:	2000a080 	.word	0x2000a080

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_MspInit+0x44>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_MspInit+0x44>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6613      	str	r3, [r2, #96]	; 0x60
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_MspInit+0x44>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x44>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <HAL_MspInit+0x44>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6593      	str	r3, [r2, #88]	; 0x58
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_MspInit+0x44>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_DAC_MspInit+0x38>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10b      	bne.n	80026fa <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_DAC_MspInit+0x3c>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_DAC_MspInit+0x3c>)
 80026e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_DAC_MspInit+0x3c>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40007400 	.word	0x40007400
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ac      	sub	sp, #176	; 0xb0
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2288      	movs	r2, #136	; 0x88
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f008 f9d4 	bl	800aade <memset>
  if(DFSDM1_Init == 0)
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <HAL_DFSDM_FilterMspInit+0x13c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14b      	bne.n	80027d6 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800273e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002742:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4618      	mov	r0, r3
 8002750:	f005 fa22 	bl	8007b98 <HAL_RCCEx_PeriphCLKConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800275a:	f7ff f9d7 	bl	8001b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_DFSDM_FilterMspInit+0x140>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <HAL_DFSDM_FilterMspInit+0x140>)
 8002766:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_DFSDM_FilterMspInit+0x140>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10b      	bne.n	8002788 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	4a37      	ldr	r2, [pc, #220]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	6613      	str	r3, [r2, #96]	; 0x60
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_DFSDM_FilterMspInit+0x144>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80027a0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027ba:	2306      	movs	r3, #6
 80027bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c4:	4619      	mov	r1, r3
 80027c6:	4824      	ldr	r0, [pc, #144]	; (8002858 <HAL_DFSDM_FilterMspInit+0x148>)
 80027c8:	f002 fd3e 	bl	8005248 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_DFSDM_FilterMspInit+0x13c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_DFSDM_FilterMspInit+0x13c>)
 80027d4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_DFSDM_FilterMspInit+0x14c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d130      	bne.n	8002842 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 80027e2:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_DFSDM_FilterMspInit+0x154>)
 80027e4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 8002808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800280c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800281a:	4811      	ldr	r0, [pc, #68]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 800281c:	f002 fa80 	bl	8004d20 <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8002826:	f7ff f971 	bl	8001b0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_DFSDM_FilterMspInit+0x150>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8002842:	bf00      	nop
 8002844:	37b0      	adds	r7, #176	; 0xb0
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000a08c 	.word	0x2000a08c
 8002850:	2000a088 	.word	0x2000a088
 8002854:	40021000 	.word	0x40021000
 8002858:	48001000 	.word	0x48001000
 800285c:	40016100 	.word	0x40016100
 8002860:	20000250 	.word	0x20000250
 8002864:	40020044 	.word	0x40020044

08002868 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0ac      	sub	sp, #176	; 0xb0
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2288      	movs	r2, #136	; 0x88
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f008 f928 	bl	800aade <memset>
  if(DFSDM1_Init == 0)
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d14b      	bne.n	800292e <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 f976 	bl	8007b98 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80028b2:	f7ff f92b 	bl	8001b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80028be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d10b      	bne.n	80028e0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	6613      	str	r3, [r2, #96]	; 0x60
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80028f8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80028fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002912:	2306      	movs	r3, #6
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800291c:	4619      	mov	r1, r3
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8002920:	f002 fc92 	bl	8005248 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800292c:	6013      	str	r3, [r2, #0]
  }

}
 800292e:	bf00      	nop
 8002930:	37b0      	adds	r7, #176	; 0xb0
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000a08c 	.word	0x2000a08c
 800293c:	2000a088 	.word	0x2000a088
 8002940:	40021000 	.word	0x40021000
 8002944:	48001000 	.word	0x48001000

08002948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ae      	sub	sp, #184	; 0xb8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2288      	movs	r2, #136	; 0x88
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f008 f8b8 	bl	800aade <memset>
  if(hi2c->Instance==I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_I2C_MspInit+0x134>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d13c      	bne.n	80029f2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800297c:	2300      	movs	r3, #0
 800297e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4618      	mov	r0, r3
 8002986:	f005 f907 	bl	8007b98 <HAL_RCCEx_PeriphCLKConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002990:	f7ff f8bc 	bl	8001b0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	4a39      	ldr	r2, [pc, #228]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a0:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80029ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b4:	2312      	movs	r3, #18
 80029b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c6:	2304      	movs	r3, #4
 80029c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029d0:	4619      	mov	r1, r3
 80029d2:	482c      	ldr	r0, [pc, #176]	; (8002a84 <HAL_I2C_MspInit+0x13c>)
 80029d4:	f002 fc38 	bl	8005248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d8:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 80029de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029f0:	e040      	b.n	8002a74 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_I2C_MspInit+0x140>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d13b      	bne.n	8002a74 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f005 f8c5 	bl	8007b98 <HAL_RCCEx_PeriphCLKConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002a14:	f7ff f87a 	bl	8001b0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002a30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a54:	4619      	mov	r1, r3
 8002a56:	480b      	ldr	r0, [pc, #44]	; (8002a84 <HAL_I2C_MspInit+0x13c>)
 8002a58:	f002 fbf6 	bl	8005248 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_I2C_MspInit+0x138>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	bf00      	nop
 8002a76:	37b8      	adds	r7, #184	; 0xb8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	48000400 	.word	0x48000400
 8002a88:	40005800 	.word	0x40005800

08002a8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_I2C_MspDeInit+0x68>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d110      	bne.n	8002ac0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_I2C_MspDeInit+0x6c>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_I2C_MspDeInit+0x6c>)
 8002aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8002aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aae:	4813      	ldr	r0, [pc, #76]	; (8002afc <HAL_I2C_MspDeInit+0x70>)
 8002ab0:	f002 fd74 	bl	800559c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8002ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <HAL_I2C_MspDeInit+0x70>)
 8002aba:	f002 fd6f 	bl	800559c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002abe:	e014      	b.n	8002aea <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_I2C_MspDeInit+0x74>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10f      	bne.n	8002aea <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_I2C_MspDeInit+0x6c>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_I2C_MspDeInit+0x6c>)
 8002ad0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <HAL_I2C_MspDeInit+0x70>)
 8002adc:	f002 fd5e 	bl	800559c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_I2C_MspDeInit+0x70>)
 8002ae6:	f002 fd59 	bl	800559c <HAL_GPIO_DeInit>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40005400 	.word	0x40005400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	40005800 	.word	0x40005800

08002b04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_QSPI_MspInit+0x7c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d128      	bne.n	8002b78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6513      	str	r3, [r2, #80]	; 0x50
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_QSPI_MspInit+0x80>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002b56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002b5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b68:	230a      	movs	r3, #10
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <HAL_QSPI_MspInit+0x84>)
 8002b74:	f002 fb68 	bl	8005248 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	a0001000 	.word	0xa0001000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	48001000 	.word	0x48001000

08002b8c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_QSPI_MspDeInit+0x30>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_QSPI_MspDeInit+0x34>)
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_QSPI_MspDeInit+0x34>)
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba8:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002baa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <HAL_QSPI_MspDeInit+0x38>)
 8002bb0:	f002 fcf4 	bl	800559c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	a0001000 	.word	0xa0001000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48001000 	.word	0x48001000

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b0ac      	sub	sp, #176	; 0xb0
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2288      	movs	r2, #136	; 0x88
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f007 ff78 	bl	800aade <memset>
  if(huart->Instance==USART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_UART_MspInit+0xb0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d13a      	bne.n	8002c6e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 ffc7 	bl	8007b98 <HAL_RCCEx_PeriphCLKConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c10:	f7fe ff7c 	bl	8001b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c18:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_UART_MspInit+0xb4>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <HAL_UART_MspInit+0xb8>)
 8002c6a:	f002 faed 	bl	8005248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c6e:	bf00      	nop
 8002c70:	37b0      	adds	r7, #176	; 0xb0
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000400 	.word	0x48000400

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f001 f9d4 	bl	800407c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <DMA1_Channel4_IRQHandler+0x10>)
 8002cde:	f002 f975 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000250 	.word	0x20000250

08002cec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002cf0:	2020      	movs	r0, #32
 8002cf2:	f002 fd91 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <EXTI9_5_IRQHandler+0x24>)
 8002cf8:	f002 fa76 	bl	80051e8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002cfc:	2080      	movs	r0, #128	; 0x80
 8002cfe:	f002 fd8b 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002d02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d06:	f002 fd87 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200000a8 	.word	0x200000a8

08002d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002d18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d1c:	f002 fd7c 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002d20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d24:	f002 fd78 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
 8002d28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d2c:	f002 fd74 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002d30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d34:	f002 fd70 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002d38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d3c:	f002 fd6c 	bl	8005818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d6c:	f7ff ffea 	bl	8002d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	; (8002da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	; (8002db4 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d96:	f007 feb1 	bl	800aafc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d9a:	f7fe fabb 	bl	8001314 <main>

08002d9e <LoopForever>:

LoopForever:
    b LoopForever
 8002d9e:	e7fe      	b.n	8002d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002da0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002dac:	0800aff8 	.word	0x0800aff8
  ldr r2, =_sbss
 8002db0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002db4:	2000a5e8 	.word	0x2000a5e8

08002db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC1_2_IRQHandler>
	...

08002dbc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002de2:	2312      	movs	r3, #18
 8002de4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002dee:	2304      	movs	r3, #4
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	481b      	ldr	r0, [pc, #108]	; (8002e68 <I2Cx_MspInit+0xac>)
 8002dfa:	f002 fa25 	bl	8005248 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4818      	ldr	r0, [pc, #96]	; (8002e68 <I2Cx_MspInit+0xac>)
 8002e06:	f002 fa1f 	bl	8005248 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e14:	6593      	str	r3, [r2, #88]	; 0x58
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e2c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <I2Cx_MspInit+0xa8>)
 8002e34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e38:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	2021      	movs	r0, #33	; 0x21
 8002e40:	f001 fa3b 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002e44:	2021      	movs	r0, #33	; 0x21
 8002e46:	f001 fa54 	bl	80042f2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	210f      	movs	r1, #15
 8002e4e:	2022      	movs	r0, #34	; 0x22
 8002e50:	f001 fa33 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002e54:	2022      	movs	r0, #34	; 0x22
 8002e56:	f001 fa4c 	bl	80042f2 <HAL_NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	48000400 	.word	0x48000400

08002e6c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <I2Cx_Init+0x54>)
 8002e78:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <I2Cx_Init+0x58>)
 8002e7e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff89 	bl	8002dbc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f002 fccc 	bl	8005848 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f003 fa78 	bl	80063a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40005800 	.word	0x40005800
 8002ec4:	00702681 	.word	0x00702681

08002ec8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	72fb      	strb	r3, [r7, #11]
 8002eda:	460b      	mov	r3, r1
 8002edc:	813b      	strh	r3, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	b299      	uxth	r1, r3
 8002eea:	88f8      	ldrh	r0, [r7, #6]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4603      	mov	r3, r0
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f002 fe80 	bl	8005c04 <HAL_I2C_Mem_Read>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f832 	bl	8002f7c <I2Cx_Error>
  }
  return status;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08a      	sub	sp, #40	; 0x28
 8002f26:	af04      	add	r7, sp, #16
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	72fb      	strb	r3, [r7, #11]
 8002f34:	460b      	mov	r3, r1
 8002f36:	813b      	strh	r3, [r7, #8]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	b299      	uxth	r1, r3
 8002f44:	88f8      	ldrh	r0, [r7, #6]
 8002f46:	893a      	ldrh	r2, [r7, #8]
 8002f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4c:	9302      	str	r3, [sp, #8]
 8002f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	4603      	mov	r3, r0
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f002 fd3f 	bl	80059dc <HAL_I2C_Mem_Write>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f805 	bl	8002f7c <I2Cx_Error>
  }
  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f002 fcf8 	bl	800597e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff6c 	bl	8002e6c <I2Cx_Init>
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <SENSOR_IO_Init+0x10>)
 8002fa2:	f7ff ff63 	bl	8002e6c <I2Cx_Init>
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000a090 	.word	0x2000a090

08002fb0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	71bb      	strb	r3, [r7, #6]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002fc2:	79bb      	ldrb	r3, [r7, #6]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	79f9      	ldrb	r1, [r7, #7]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	1d7b      	adds	r3, r7, #5
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <SENSOR_IO_Write+0x30>)
 8002fd4:	f7ff ffa5 	bl	8002f22 <I2Cx_WriteMultiple>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000a090 	.word	0x2000a090

08002fe4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	4603      	mov	r3, r0
 8002fec:	460a      	mov	r2, r1
 8002fee:	71fb      	strb	r3, [r7, #7]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	79f9      	ldrb	r1, [r7, #7]
 8002ffe:	2301      	movs	r3, #1
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	f107 030f 	add.w	r3, r7, #15
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2301      	movs	r3, #1
 800300a:	4804      	ldr	r0, [pc, #16]	; (800301c <SENSOR_IO_Read+0x38>)
 800300c:	f7ff ff5c 	bl	8002ec8 <I2Cx_ReadMultiple>

  return read_value;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000a090 	.word	0x2000a090

08003020 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af02      	add	r7, sp, #8
 8003026:	603a      	str	r2, [r7, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	460b      	mov	r3, r1
 8003030:	71bb      	strb	r3, [r7, #6]
 8003032:	4613      	mov	r3, r2
 8003034:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003036:	79bb      	ldrb	r3, [r7, #6]
 8003038:	b29a      	uxth	r2, r3
 800303a:	79f9      	ldrb	r1, [r7, #7]
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2301      	movs	r3, #1
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <SENSOR_IO_ReadMultiple+0x38>)
 8003048:	f7ff ff3e 	bl	8002ec8 <I2Cx_ReadMultiple>
 800304c:	4603      	mov	r3, r0
 800304e:	b29b      	uxth	r3, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	2000a090 	.word	0x2000a090

0800305c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <BSP_HSENSOR_Init+0x38>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	20be      	movs	r0, #190	; 0xbe
 8003068:	4798      	blx	r3
 800306a:	4603      	mov	r3, r0
 800306c:	2bbc      	cmp	r3, #188	; 0xbc
 800306e:	d002      	beq.n	8003076 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	e009      	b.n	800308a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <BSP_HSENSOR_Init+0x3c>)
 8003078:	4a06      	ldr	r2, [pc, #24]	; (8003094 <BSP_HSENSOR_Init+0x38>)
 800307a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <BSP_HSENSOR_Init+0x3c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	20be      	movs	r0, #190	; 0xbe
 8003084:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800308a:	687b      	ldr	r3, [r7, #4]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000000c 	.word	0x2000000c
 8003098:	2000a0e4 	.word	0x2000a0e4

0800309c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <BSP_HSENSOR_ReadHumidity+0x18>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	20be      	movs	r0, #190	; 0xbe
 80030a8:	4798      	blx	r3
 80030aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80030ae:	eeb0 0a67 	vmov.f32	s0, s15
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000a0e4 	.word	0x2000a0e4

080030b8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <BSP_PSENSOR_Init+0x38>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	20ba      	movs	r0, #186	; 0xba
 80030c4:	4798      	blx	r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	2bb1      	cmp	r3, #177	; 0xb1
 80030ca:	d002      	beq.n	80030d2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	e009      	b.n	80030e6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <BSP_PSENSOR_Init+0x3c>)
 80030d4:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <BSP_PSENSOR_Init+0x38>)
 80030d6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <BSP_PSENSOR_Init+0x3c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	20ba      	movs	r0, #186	; 0xba
 80030e0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80030e6:	687b      	ldr	r3, [r7, #4]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000028 	.word	0x20000028
 80030f4:	2000a0e8 	.word	0x2000a0e8

080030f8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <BSP_PSENSOR_ReadPressure+0x18>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	20ba      	movs	r0, #186	; 0xba
 8003104:	4798      	blx	r3
 8003106:	eef0 7a40 	vmov.f32	s15, s0
}
 800310a:	eeb0 0a67 	vmov.f32	s0, s15
 800310e:	bd80      	pop	{r7, pc}
 8003110:	2000a0e8 	.word	0x2000a0e8

08003114 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800311a:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 800311c:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <BSP_QSPI_Init+0xd4>)
 800311e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003120:	4830      	ldr	r0, [pc, #192]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003122:	f003 fac3 	bl	80066ac <HAL_QSPI_DeInit>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e054      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8003130:	f000 f964 	bl	80033fc <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003136:	2202      	movs	r2, #2
 8003138:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 800313c:	2204      	movs	r2, #4
 800313e:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003142:	2210      	movs	r2, #16
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800314a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e003      	b.n	800316a <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800316a:	3b01      	subs	r3, #1
 800316c:	461a      	mov	r2, r3
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003170:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800317e:	4819      	ldr	r0, [pc, #100]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003180:	f003 fa1e 	bl	80065c0 <HAL_QSPI_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e025      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800318e:	4815      	ldr	r0, [pc, #84]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 8003190:	f000 f974 	bl	800347c <QSPI_ResetMemory>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800319a:	2304      	movs	r3, #4
 800319c:	e01d      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800319e:	2101      	movs	r1, #1
 80031a0:	4810      	ldr	r0, [pc, #64]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 80031a2:	f000 fa35 	bl	8003610 <QSPI_QuadMode>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e014      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80031b0:	2101      	movs	r1, #1
 80031b2:	480c      	ldr	r0, [pc, #48]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 80031b4:	f000 fad4 	bl	8003760 <QSPI_HighPerfMode>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00b      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80031c8:	4806      	ldr	r0, [pc, #24]	; (80031e4 <BSP_QSPI_Init+0xd0>)
 80031ca:	f003 f9f9 	bl	80065c0 <HAL_QSPI_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000a0ec 	.word	0x2000a0ec
 80031e8:	a0001000 	.word	0xa0001000

080031ec <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80031f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80031fe:	23eb      	movs	r3, #235	; 0xeb
 8003200:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8003202:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8003208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800320c:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8003212:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800321c:	23aa      	movs	r3, #170	; 0xaa
 800321e:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8003220:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8003226:	2304      	movs	r3, #4
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800322e:	2300      	movs	r3, #0
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8003232:	2300      	movs	r3, #0
 8003234:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8003236:	2300      	movs	r3, #0
 8003238:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800323a:	f107 0310 	add.w	r3, r7, #16
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4619      	mov	r1, r3
 8003244:	480b      	ldr	r0, [pc, #44]	; (8003274 <BSP_QSPI_Read+0x88>)
 8003246:	f003 fa55 	bl	80066f4 <HAL_QSPI_Command>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e00b      	b.n	800326c <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <BSP_QSPI_Read+0x88>)
 800325c:	f003 fb3f 	bl	80068de <HAL_QSPI_Receive>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3748      	adds	r7, #72	; 0x48
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000a0ec 	.word	0x2000a0ec

08003278 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b096      	sub	sp, #88	; 0x58
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800328c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800328e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d901      	bls.n	800329a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80032ac:	2338      	movs	r3, #56	; 0x38
 80032ae:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80032b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80032b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ba:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032bc:	2300      	movs	r3, #0
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80032c0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032ce:	2300      	movs	r3, #0
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032d2:	2300      	movs	r3, #0
 80032d4:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80032d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d8:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80032de:	4824      	ldr	r0, [pc, #144]	; (8003370 <BSP_QSPI_Write+0xf8>)
 80032e0:	f000 f910 	bl	8003504 <QSPI_WriteEnable>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e03b      	b.n	8003366 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4619      	mov	r1, r3
 80032f8:	481d      	ldr	r0, [pc, #116]	; (8003370 <BSP_QSPI_Write+0xf8>)
 80032fa:	f003 f9fb 	bl	80066f4 <HAL_QSPI_Command>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e02e      	b.n	8003366 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4818      	ldr	r0, [pc, #96]	; (8003370 <BSP_QSPI_Write+0xf8>)
 8003310:	f003 fa4e 	bl	80067b0 <HAL_QSPI_Transmit>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e023      	b.n	8003366 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800331e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003322:	4813      	ldr	r0, [pc, #76]	; (8003370 <BSP_QSPI_Write+0xf8>)
 8003324:	f000 f93a 	bl	800359c <QSPI_AutoPollingMemReady>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e019      	b.n	8003366 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003332:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003336:	4413      	add	r3, r2
 8003338:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800334a:	429a      	cmp	r2, r3
 800334c:	d203      	bcs.n	8003356 <BSP_QSPI_Write+0xde>
 800334e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	e001      	b.n	800335a <BSP_QSPI_Write+0xe2>
 8003356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 800335c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800335e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003360:	429a      	cmp	r2, r3
 8003362:	d3b8      	bcc.n	80032d6 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3758      	adds	r7, #88	; 0x58
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	2000a0ec 	.word	0x2000a0ec

08003374 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b090      	sub	sp, #64	; 0x40
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003380:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8003382:	23d8      	movs	r3, #216	; 0xd8
 8003384:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800338c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003390:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033a6:	2300      	movs	r3, #0
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033aa:	2300      	movs	r3, #0
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80033ae:	4812      	ldr	r0, [pc, #72]	; (80033f8 <BSP_QSPI_Erase_Block+0x84>)
 80033b0:	f000 f8a8 	bl	8003504 <QSPI_WriteEnable>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e017      	b.n	80033ee <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033be:	f107 0308 	add.w	r3, r7, #8
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4619      	mov	r1, r3
 80033c8:	480b      	ldr	r0, [pc, #44]	; (80033f8 <BSP_QSPI_Erase_Block+0x84>)
 80033ca:	f003 f993 	bl	80066f4 <HAL_QSPI_Command>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00a      	b.n	80033ee <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80033d8:	f640 51ac 	movw	r1, #3500	; 0xdac
 80033dc:	4806      	ldr	r0, [pc, #24]	; (80033f8 <BSP_QSPI_Erase_Block+0x84>)
 80033de:	f000 f8dd 	bl	800359c <QSPI_AutoPollingMemReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3740      	adds	r7, #64	; 0x40
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000a0ec 	.word	0x2000a0ec

080033fc <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6513      	str	r3, [r2, #80]	; 0x50
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 800342c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003430:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003438:	f043 0310 	orr.w	r3, r3, #16
 800343c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <BSP_QSPI_MspInit+0x78>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800344a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800344e:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800345c:	230a      	movs	r3, #10
 800345e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	4619      	mov	r1, r3
 8003466:	4804      	ldr	r0, [pc, #16]	; (8003478 <BSP_QSPI_MspInit+0x7c>)
 8003468:	f001 feee 	bl	8005248 <HAL_GPIO_Init>
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	48001000 	.word	0x48001000

0800347c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b090      	sub	sp, #64	; 0x40
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003488:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800348a:	2366      	movs	r3, #102	; 0x66
 800348c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034a2:	2300      	movs	r3, #0
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034a6:	2300      	movs	r3, #0
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4619      	mov	r1, r3
 80034b4:	4812      	ldr	r0, [pc, #72]	; (8003500 <QSPI_ResetMemory+0x84>)
 80034b6:	f003 f91d 	bl	80066f4 <HAL_QSPI_Command>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e019      	b.n	80034f8 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80034c4:	2399      	movs	r3, #153	; 0x99
 80034c6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4619      	mov	r1, r3
 80034d2:	480b      	ldr	r0, [pc, #44]	; (8003500 <QSPI_ResetMemory+0x84>)
 80034d4:	f003 f90e 	bl	80066f4 <HAL_QSPI_Command>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00a      	b.n	80034f8 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80034e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80034e6:	4806      	ldr	r0, [pc, #24]	; (8003500 <QSPI_ResetMemory+0x84>)
 80034e8:	f000 f858 	bl	800359c <QSPI_AutoPollingMemReady>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3740      	adds	r7, #64	; 0x40
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	2000a0ec 	.word	0x2000a0ec

08003504 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b096      	sub	sp, #88	; 0x58
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800350c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8003512:	2306      	movs	r3, #6
 8003514:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003516:	2300      	movs	r3, #0
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800351a:	2300      	movs	r3, #0
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800352a:	2300      	movs	r3, #0
 800352c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800352e:	2300      	movs	r3, #0
 8003530:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003532:	f107 0320 	add.w	r3, r7, #32
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4619      	mov	r1, r3
 800353c:	4816      	ldr	r0, [pc, #88]	; (8003598 <QSPI_WriteEnable+0x94>)
 800353e:	f003 f8d9 	bl	80066f4 <HAL_QSPI_Command>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e020      	b.n	800358e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 800354c:	2302      	movs	r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8003550:	2302      	movs	r3, #2
 8003552:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003558:	2301      	movs	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800355c:	2310      	movs	r3, #16
 800355e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003560:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003564:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8003566:	2305      	movs	r3, #5
 8003568:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800356a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003570:	f107 0208 	add.w	r2, r7, #8
 8003574:	f107 0120 	add.w	r1, r7, #32
 8003578:	f241 3388 	movw	r3, #5000	; 0x1388
 800357c:	4806      	ldr	r0, [pc, #24]	; (8003598 <QSPI_WriteEnable+0x94>)
 800357e:	f003 fa50 	bl	8006a22 <HAL_QSPI_AutoPolling>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3758      	adds	r7, #88	; 0x58
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000a0ec 	.word	0x2000a0ec

0800359c <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b096      	sub	sp, #88	; 0x58
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80035ac:	2305      	movs	r3, #5
 80035ae:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80035b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035c6:	2300      	movs	r3, #0
 80035c8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035ca:	2300      	movs	r3, #0
 80035cc:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 80035d2:	2301      	movs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80035de:	2310      	movs	r3, #16
 80035e0:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80035e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035e6:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80035e8:	f107 0208 	add.w	r2, r7, #8
 80035ec:	f107 0120 	add.w	r1, r7, #32
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <QSPI_AutoPollingMemReady+0x70>)
 80035f4:	f003 fa15 	bl	8006a22 <HAL_QSPI_AutoPolling>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3758      	adds	r7, #88	; 0x58
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000a0ec 	.word	0x2000a0ec

08003610 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b092      	sub	sp, #72	; 0x48
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800361c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003622:	2305      	movs	r3, #5
 8003624:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003626:	2300      	movs	r3, #0
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800362a:	2300      	movs	r3, #0
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800362e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003640:	2300      	movs	r3, #0
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003644:	2300      	movs	r3, #0
 8003646:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4619      	mov	r1, r3
 8003652:	4842      	ldr	r0, [pc, #264]	; (800375c <QSPI_QuadMode+0x14c>)
 8003654:	f003 f84e 	bl	80066f4 <HAL_QSPI_Command>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e077      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003662:	f107 030f 	add.w	r3, r7, #15
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4619      	mov	r1, r3
 800366c:	483b      	ldr	r0, [pc, #236]	; (800375c <QSPI_QuadMode+0x14c>)
 800366e:	f003 f936 	bl	80068de <HAL_QSPI_Receive>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e06a      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800367c:	4837      	ldr	r0, [pc, #220]	; (800375c <QSPI_QuadMode+0x14c>)
 800367e:	f7ff ff41 	bl	8003504 <QSPI_WriteEnable>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e062      	b.n	8003752 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003698:	b2db      	uxtb	r3, r3
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e004      	b.n	80036a8 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80036a8:	2301      	movs	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4619      	mov	r1, r3
 80036b6:	4829      	ldr	r0, [pc, #164]	; (800375c <QSPI_QuadMode+0x14c>)
 80036b8:	f003 f81c 	bl	80066f4 <HAL_QSPI_Command>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e045      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036c6:	f107 030f 	add.w	r3, r7, #15
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4619      	mov	r1, r3
 80036d0:	4822      	ldr	r0, [pc, #136]	; (800375c <QSPI_QuadMode+0x14c>)
 80036d2:	f003 f86d 	bl	80067b0 <HAL_QSPI_Transmit>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e038      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80036e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80036e4:	481d      	ldr	r0, [pc, #116]	; (800375c <QSPI_QuadMode+0x14c>)
 80036e6:	f7ff ff59 	bl	800359c <QSPI_AutoPollingMemReady>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e02e      	b.n	8003752 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80036f4:	2305      	movs	r3, #5
 80036f6:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4619      	mov	r1, r3
 8003702:	4816      	ldr	r0, [pc, #88]	; (800375c <QSPI_QuadMode+0x14c>)
 8003704:	f002 fff6 	bl	80066f4 <HAL_QSPI_Command>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01f      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003712:	f107 030f 	add.w	r3, r7, #15
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4619      	mov	r1, r3
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <QSPI_QuadMode+0x14c>)
 800371e:	f003 f8de 	bl	80068de <HAL_QSPI_Receive>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e012      	b.n	8003752 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <QSPI_QuadMode+0x12c>
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d007      	beq.n	800374c <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3748      	adds	r7, #72	; 0x48
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000a0ec 	.word	0x2000a0ec

08003760 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b092      	sub	sp, #72	; 0x48
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800376c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003772:	2305      	movs	r3, #5
 8003774:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003776:	2300      	movs	r3, #0
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800377a:	2300      	movs	r3, #0
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800377e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003788:	2301      	movs	r3, #1
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003790:	2300      	movs	r3, #0
 8003792:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4619      	mov	r1, r3
 80037a2:	4853      	ldr	r0, [pc, #332]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 80037a4:	f002 ffa6 	bl	80066f4 <HAL_QSPI_Command>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e09a      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4619      	mov	r1, r3
 80037bc:	484c      	ldr	r0, [pc, #304]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 80037be:	f003 f88e 	bl	80068de <HAL_QSPI_Receive>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e08d      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80037cc:	2315      	movs	r3, #21
 80037ce:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80037d0:	2302      	movs	r3, #2
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4619      	mov	r1, r3
 80037de:	4844      	ldr	r0, [pc, #272]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 80037e0:	f002 ff88 	bl	80066f4 <HAL_QSPI_Command>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07c      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	3301      	adds	r3, #1
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4619      	mov	r1, r3
 80037fa:	483d      	ldr	r0, [pc, #244]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 80037fc:	f003 f86f 	bl	80068de <HAL_QSPI_Receive>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06e      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800380a:	4839      	ldr	r0, [pc, #228]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 800380c:	f7ff fe7a 	bl	8003504 <QSPI_WriteEnable>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e066      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	b2db      	uxtb	r3, r3
 8003828:	73bb      	strb	r3, [r7, #14]
 800382a:	e004      	b.n	8003836 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800382c:	7bbb      	ldrb	r3, [r7, #14]
 800382e:	f023 0302 	bic.w	r3, r3, #2
 8003832:	b2db      	uxtb	r3, r3
 8003834:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003836:	2301      	movs	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 800383a:	2303      	movs	r3, #3
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4619      	mov	r1, r3
 8003848:	4829      	ldr	r0, [pc, #164]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 800384a:	f002 ff53 	bl	80066f4 <HAL_QSPI_Command>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e047      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4619      	mov	r1, r3
 8003862:	4823      	ldr	r0, [pc, #140]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 8003864:	f002 ffa4 	bl	80067b0 <HAL_QSPI_Transmit>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e03a      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003872:	f241 3188 	movw	r1, #5000	; 0x1388
 8003876:	481e      	ldr	r0, [pc, #120]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 8003878:	f7ff fe90 	bl	800359c <QSPI_AutoPollingMemReady>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e030      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003886:	2315      	movs	r3, #21
 8003888:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800388a:	2302      	movs	r3, #2
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4619      	mov	r1, r3
 8003898:	4815      	ldr	r0, [pc, #84]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 800389a:	f002 ff2b 	bl	80066f4 <HAL_QSPI_Command>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e01f      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4619      	mov	r1, r3
 80038b2:	480f      	ldr	r0, [pc, #60]	; (80038f0 <QSPI_HighPerfMode+0x190>)
 80038b4:	f003 f813 	bl	80068de <HAL_QSPI_Receive>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e012      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <QSPI_HighPerfMode+0x172>
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d007      	beq.n	80038e2 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80038d2:	7b7b      	ldrb	r3, [r7, #13]
 80038d4:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3748      	adds	r7, #72	; 0x48
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000a0ec 	.word	0x2000a0ec

080038f4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <BSP_TSENSOR_Init+0x30>)
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <BSP_TSENSOR_Init+0x34>)
 8003902:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003904:	f7ff fb4a 	bl	8002f9c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <BSP_TSENSOR_Init+0x30>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2100      	movs	r1, #0
 8003910:	20be      	movs	r0, #190	; 0xbe
 8003912:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003918:	79fb      	ldrb	r3, [r7, #7]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	2000a130 	.word	0x2000a130
 8003928:	20000018 	.word	0x20000018

0800392c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <BSP_TSENSOR_ReadTemp+0x18>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	20be      	movs	r0, #190	; 0xbe
 8003938:	4798      	blx	r3
 800393a:	eef0 7a40 	vmov.f32	s15, s0
}
 800393e:	eeb0 0a67 	vmov.f32	s0, s15
 8003942:	bd80      	pop	{r7, pc}
 8003944:	2000a130 	.word	0x2000a130

08003948 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <BSP_SPI3_Init+0x54>)
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <BSP_SPI3_Init+0x58>)
 8003956:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <BSP_SPI3_Init+0x5c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	4911      	ldr	r1, [pc, #68]	; (80039a4 <BSP_SPI3_Init+0x5c>)
 8003960:	600a      	str	r2, [r1, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d114      	bne.n	8003990 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003966:	480d      	ldr	r0, [pc, #52]	; (800399c <BSP_SPI3_Init+0x54>)
 8003968:	f005 f8b1 	bl	8008ace <HAL_SPI_GetState>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10e      	bne.n	8003990 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003972:	480a      	ldr	r0, [pc, #40]	; (800399c <BSP_SPI3_Init+0x54>)
 8003974:	f000 f882 	bl	8003a7c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800397e:	4807      	ldr	r0, [pc, #28]	; (800399c <BSP_SPI3_Init+0x54>)
 8003980:	f000 f83a 	bl	80039f8 <MX_SPI3_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800398a:	f06f 0307 	mvn.w	r3, #7
 800398e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000a134 	.word	0x2000a134
 80039a0:	40003c00 	.word	0x40003c00
 80039a4:	2000a198 	.word	0x2000a198

080039a8 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c0:	9200      	str	r2, [sp, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	4807      	ldr	r0, [pc, #28]	; (80039e4 <BSP_SPI3_SendRecv+0x3c>)
 80039c8:	f004 fe5f 	bl	800868a <HAL_SPI_TransmitReceive>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80039d2:	f06f 0305 	mvn.w	r3, #5
 80039d6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80039d8:	697b      	ldr	r3, [r7, #20]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	2000a134 	.word	0x2000a134

080039e8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80039ec:	f000 fb5a 	bl	80040a4 <HAL_GetTick>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <MX_SPI3_Init+0x80>)
 8003a08:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a10:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a1e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a32:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2218      	movs	r2, #24
 8003a38:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2207      	movs	r2, #7
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f004 fd66 	bl	8008530 <HAL_SPI_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40003c00 	.word	0x40003c00

08003a7c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <SPI3_MspInit+0xa8>)
 8003aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4815      	ldr	r0, [pc, #84]	; (8003b28 <SPI3_MspInit+0xac>)
 8003ad2:	f001 fbb9 	bl	8005248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003ae8:	2306      	movs	r3, #6
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	480d      	ldr	r0, [pc, #52]	; (8003b28 <SPI3_MspInit+0xac>)
 8003af4:	f001 fba8 	bl	8005248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <SPI3_MspInit+0xac>)
 8003b16:	f001 fb97 	bl	8005248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	48000800 	.word	0x48000800

08003b2c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fa51 	bl	8002fe4 <SENSOR_IO_Read>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	f023 0303 	bic.w	r3, r3, #3
 8003b5c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b6c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	2120      	movs	r1, #32
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fa1a 	bl	8002fb0 <SENSOR_IO_Write>
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003b92:	f7ff fa03 	bl	8002f9c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	210f      	movs	r1, #15
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fa21 	bl	8002fe4 <SENSOR_IO_Read>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	b2d8      	uxtb	r0, r3
 8003bbe:	f107 020c 	add.w	r2, r7, #12
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	21b0      	movs	r1, #176	; 0xb0
 8003bc6:	f7ff fa2b 	bl	8003020 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003bca:	7b3b      	ldrb	r3, [r7, #12]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003bd2:	7b7b      	ldrb	r3, [r7, #13]
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	b2d8      	uxtb	r0, r3
 8003bde:	f107 020c 	add.w	r2, r7, #12
 8003be2:	2302      	movs	r3, #2
 8003be4:	21b6      	movs	r1, #182	; 0xb6
 8003be6:	f7ff fa1b 	bl	8003020 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003bea:	7b7b      	ldrb	r3, [r7, #13]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	7b3b      	ldrb	r3, [r7, #12]
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	b2d8      	uxtb	r0, r3
 8003bfc:	f107 020c 	add.w	r2, r7, #12
 8003c00:	2302      	movs	r3, #2
 8003c02:	21ba      	movs	r1, #186	; 0xba
 8003c04:	f7ff fa0c 	bl	8003020 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003c08:	7b7b      	ldrb	r3, [r7, #13]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	b21a      	sxth	r2, r3
 8003c0e:	7b3b      	ldrb	r3, [r7, #12]
 8003c10:	b21b      	sxth	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	b2d8      	uxtb	r0, r3
 8003c1a:	f107 020c 	add.w	r2, r7, #12
 8003c1e:	2302      	movs	r3, #2
 8003c20:	21a8      	movs	r1, #168	; 0xa8
 8003c22:	f7ff f9fd 	bl	8003020 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003c26:	7b7b      	ldrb	r3, [r7, #13]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	7b3b      	ldrb	r3, [r7, #12]
 8003c2e:	b21b      	sxth	r3, r3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003c34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003c38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c46:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c5c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003c60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c82:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c92:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c9a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003ce0 <HTS221_H_ReadHumidity+0x130>
 8003c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	dd01      	ble.n	8003cac <HTS221_H_ReadHumidity+0xfc>
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HTS221_H_ReadHumidity+0x134>)
 8003caa:	e00a      	b.n	8003cc2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d502      	bpl.n	8003cc0 <HTS221_H_ReadHumidity+0x110>
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HTS221_H_ReadHumidity+0x112>
 8003cc0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003cc2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003cc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ccc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cd0:	eef0 7a66 	vmov.f32	s15, s13
}
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	447a0000 	.word	0x447a0000
 8003ce4:	447a0000 	.word	0x447a0000

08003ce8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f972 	bl	8002fe4 <SENSOR_IO_Read>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	f023 0304 	bic.w	r3, r3, #4
 8003d0a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	f043 0304 	orr.w	r3, r3, #4
 8003d12:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	2120      	movs	r1, #32
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f93b 	bl	8002fb0 <SENSOR_IO_Write>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b088      	sub	sp, #32
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	b2d8      	uxtb	r0, r3
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	2302      	movs	r3, #2
 8003d56:	21b2      	movs	r1, #178	; 0xb2
 8003d58:	f7ff f962 	bl	8003020 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2135      	movs	r1, #53	; 0x35
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f93e 	bl	8002fe4 <SENSOR_IO_Read>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003d6c:	7ffb      	ldrb	r3, [r7, #31]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	b21a      	sxth	r2, r3
 8003d78:	7a3b      	ldrb	r3, [r7, #8]
 8003d7a:	b21b      	sxth	r3, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	b21a      	sxth	r2, r3
 8003d8c:	7a7b      	ldrb	r3, [r7, #9]
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003d94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d98:	10db      	asrs	r3, r3, #3
 8003d9a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003d9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003da0:	10db      	asrs	r3, r3, #3
 8003da2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	b2d8      	uxtb	r0, r3
 8003da8:	f107 0208 	add.w	r2, r7, #8
 8003dac:	2304      	movs	r3, #4
 8003dae:	21bc      	movs	r1, #188	; 0xbc
 8003db0:	f7ff f936 	bl	8003020 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003db4:	7a7b      	ldrb	r3, [r7, #9]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	7a3b      	ldrb	r3, [r7, #8]
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003dc2:	7afb      	ldrb	r3, [r7, #11]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	7abb      	ldrb	r3, [r7, #10]
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	b2d8      	uxtb	r0, r3
 8003dd4:	f107 0208 	add.w	r2, r7, #8
 8003dd8:	2302      	movs	r3, #2
 8003dda:	21aa      	movs	r1, #170	; 0xaa
 8003ddc:	f7ff f920 	bl	8003020 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003de0:	7a7b      	ldrb	r3, [r7, #9]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	7a3b      	ldrb	r3, [r7, #8]
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003dee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003df2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e16:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	ee07 3a90 	vmov	s15, r3
}
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f879 	bl	8003f54 <LPS22HB_Init>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003e78:	f7ff f890 	bl	8002f9c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	210f      	movs	r1, #15
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff f8ae 	bl	8002fe4 <SENSOR_IO_Read>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	74fb      	strb	r3, [r7, #19]
 8003eaa:	e013      	b.n	8003ed4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	3328      	adds	r3, #40	; 0x28
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	7cfc      	ldrb	r4, [r7, #19]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7ff f892 	bl	8002fe4 <SENSOR_IO_Read>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f104 0318 	add.w	r3, r4, #24
 8003ec8:	443b      	add	r3, r7
 8003eca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	74fb      	strb	r3, [r7, #19]
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d9e8      	bls.n	8003eac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	74fb      	strb	r3, [r7, #19]
 8003ede:	e00f      	b.n	8003f00 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	3318      	adds	r3, #24
 8003ee4:	443b      	add	r3, r7
 8003ee6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003eea:	461a      	mov	r2, r3
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	3301      	adds	r3, #1
 8003efe:	74fb      	strb	r3, [r7, #19]
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d9ec      	bls.n	8003ee0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f16:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2264      	movs	r2, #100	; 0x64
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da01      	bge.n	8003f2c <LPS22HB_P_ReadPressure+0x94>
 8003f28:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003f2c:	131b      	asrs	r3, r3, #12
 8003f2e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003f50 <LPS22HB_P_ReadPressure+0xb8>
 8003f3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f42:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}
 8003f50:	42c80000 	.word	0x42c80000

08003f54 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	211a      	movs	r1, #26
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f83d 	bl	8002fe4 <SENSOR_IO_Read>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	211a      	movs	r1, #26
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f812 	bl	8002fb0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2110      	movs	r1, #16
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f826 	bl	8002fe4 <SENSOR_IO_Read>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003faa:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	f023 0302 	bic.w	r3, r3, #2
 8003fb2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe fff3 	bl	8002fb0 <SENSOR_IO_Write>
}  
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fdc:	2003      	movs	r0, #3
 8003fde:	f000 f961 	bl	80042a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f000 f80e 	bl	8004004 <HAL_InitTick>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	e001      	b.n	8003ff8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ff4:	f7fe fb48 	bl	8002688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_InitTick+0x6c>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d023      	beq.n	8004060 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <HAL_InitTick+0x70>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_InitTick+0x6c>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004026:	fbb3 f3f1 	udiv	r3, r3, r1
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f96d 	bl	800430e <HAL_SYSTICK_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d809      	bhi.n	8004054 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004040:	2200      	movs	r2, #0
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004048:	f000 f937 	bl	80042ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_InitTick+0x74>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e007      	b.n	8004064 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	e004      	b.n	8004064 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e001      	b.n	8004064 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000038 	.word	0x20000038
 8004074:	20000008 	.word	0x20000008
 8004078:	20000034 	.word	0x20000034

0800407c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_IncTick+0x20>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_IncTick+0x24>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4413      	add	r3, r2
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_IncTick+0x24>)
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000038 	.word	0x20000038
 80040a0:	2000a19c 	.word	0x2000a19c

080040a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return uwTick;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_GetTick+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	2000a19c 	.word	0x2000a19c

080040bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7ff ffee 	bl	80040a4 <HAL_GetTick>
 80040c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d005      	beq.n	80040e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_Delay+0x44>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040e2:	bf00      	nop
 80040e4:	f7ff ffde 	bl	80040a4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d8f7      	bhi.n	80040e4 <HAL_Delay+0x28>
  {
  }
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000038 	.word	0x20000038

08004104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004120:	4013      	ands	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800412c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004136:	4a04      	ldr	r2, [pc, #16]	; (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	60d3      	str	r3, [r2, #12]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <__NVIC_GetPriorityGrouping+0x18>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 0307 	and.w	r3, r3, #7
}
 800415a:	4618      	mov	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db0b      	blt.n	8004192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	4907      	ldr	r1, [pc, #28]	; (80041a0 <__NVIC_EnableIRQ+0x38>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2001      	movs	r0, #1
 800418a:	fa00 f202 	lsl.w	r2, r0, r2
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000e100 	.word	0xe000e100

080041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db0a      	blt.n	80041ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	490c      	ldr	r1, [pc, #48]	; (80041f0 <__NVIC_SetPriority+0x4c>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041cc:	e00a      	b.n	80041e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <__NVIC_SetPriority+0x50>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3b04      	subs	r3, #4
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	440b      	add	r3, r1
 80041e2:	761a      	strb	r2, [r3, #24]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000e100 	.word	0xe000e100
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf28      	it	cs
 8004216:	2304      	movcs	r3, #4
 8004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3304      	adds	r3, #4
 800421e:	2b06      	cmp	r3, #6
 8004220:	d902      	bls.n	8004228 <NVIC_EncodePriority+0x30>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3b03      	subs	r3, #3
 8004226:	e000      	b.n	800422a <NVIC_EncodePriority+0x32>
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43d9      	mvns	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4313      	orrs	r3, r2
         );
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004270:	d301      	bcc.n	8004276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <SysTick_Config+0x40>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427e:	210f      	movs	r1, #15
 8004280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004284:	f7ff ff8e 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SysTick_Config+0x40>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SysTick_Config+0x40>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff29 	bl	8004104 <__NVIC_SetPriorityGrouping>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042cc:	f7ff ff3e 	bl	800414c <__NVIC_GetPriorityGrouping>
 80042d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff ff8e 	bl	80041f8 <NVIC_EncodePriority>
 80042dc:	4602      	mov	r2, r0
 80042de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff5d 	bl	80041a4 <__NVIC_SetPriority>
}
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff31 	bl	8004168 <__NVIC_EnableIRQ>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffa2 	bl	8004260 <SysTick_Config>
 800431c:	4603      	mov	r3, r0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e014      	b.n	8004362 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	791b      	ldrb	r3, [r3, #4]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d105      	bne.n	800434e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fe f9c1 	bl	80026d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	795b      	ldrb	r3, [r3, #5]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_DAC_ConfigChannel+0x1c>
 8004382:	2302      	movs	r3, #2
 8004384:	e114      	b.n	80045b0 <HAL_DAC_ConfigChannel+0x246>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2202      	movs	r2, #2
 8004390:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	f040 8081 	bne.w	800449e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800439c:	f7ff fe82 	bl	80040a4 <HAL_GetTick>
 80043a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d140      	bne.n	800442a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043a8:	e018      	b.n	80043dc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043aa:	f7ff fe7b 	bl	80040a4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d911      	bls.n	80043dc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f043 0208 	orr.w	r2, r3, #8
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2203      	movs	r2, #3
 80043d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0e9      	b.n	80045b0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1df      	bne.n	80043aa <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f7ff fe66 	bl	80040bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	6992      	ldr	r2, [r2, #24]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
 80043fa:	e023      	b.n	8004444 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043fc:	f7ff fe52 	bl	80040a4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d90f      	bls.n	800442a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	2b00      	cmp	r3, #0
 8004412:	da0a      	bge.n	800442a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f043 0208 	orr.w	r2, r3, #8
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2203      	movs	r2, #3
 8004424:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0c2      	b.n	80045b0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	2b00      	cmp	r3, #0
 8004432:	dbe3      	blt.n	80043fc <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004434:	2001      	movs	r0, #1
 8004436:	f7ff fe41 	bl	80040bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	6992      	ldr	r2, [r2, #24]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	ea02 0103 	and.w	r1, r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	409a      	lsls	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	21ff      	movs	r1, #255	; 0xff
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	ea02 0103 	and.w	r1, r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	409a      	lsls	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d11d      	bne.n	80044e2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	221f      	movs	r2, #31
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2207      	movs	r2, #7
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	400a      	ands	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	f640 72fc 	movw	r2, #4092	; 0xffc
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	22c0      	movs	r2, #192	; 0xc0
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43da      	mvns	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	400a      	ands	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0ac      	b.n	8004724 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fab6 	bl	8004b40 <DFSDM_GetChannelFromInstance>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4a55      	ldr	r2, [pc, #340]	; (800472c <HAL_DFSDM_ChannelInit+0x174>)
 80045d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e09f      	b.n	8004724 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe f93f 	bl	8002868 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80045ea:	4b51      	ldr	r3, [pc, #324]	; (8004730 <HAL_DFSDM_ChannelInit+0x178>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	4a4f      	ldr	r2, [pc, #316]	; (8004730 <HAL_DFSDM_ChannelInit+0x178>)
 80045f2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80045f4:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_DFSDM_ChannelInit+0x178>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d125      	bne.n	8004648 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80045fc:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4c      	ldr	r2, [pc, #304]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 8004602:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004606:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004608:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4948      	ldr	r1, [pc, #288]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004616:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 800461c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004620:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	791b      	ldrb	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	3b01      	subs	r3, #1
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	493f      	ldr	r1, [pc, #252]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800463c:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3c      	ldr	r2, [pc, #240]	; (8004734 <HAL_DFSDM_ChannelInit+0x17c>)
 8004642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004646:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004656:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004666:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800466c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 020f 	bic.w	r2, r2, #15
 8004684:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80046ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6899      	ldr	r1, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f002 0207 	and.w	r2, r2, #7
 80046d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004704:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fa14 	bl	8004b40 <DFSDM_GetChannelFromInstance>
 8004718:	4602      	mov	r2, r0
 800471a:	4904      	ldr	r1, [pc, #16]	; (800472c <HAL_DFSDM_ChannelInit+0x174>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000a1a4 	.word	0x2000a1a4
 8004730:	2000a1a0 	.word	0x2000a1a0
 8004734:	40016000 	.word	0x40016000

08004738 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0ca      	b.n	80048e0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a66      	ldr	r2, [pc, #408]	; (80048e8 <HAL_DFSDM_FilterInit+0x1b0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d109      	bne.n	8004768 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0bb      	b.n	80048e0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fd ffc5 	bl	8002710 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004794:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7a1b      	ldrb	r3, [r3, #8]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d108      	bne.n	80047b0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e007      	b.n	80047c0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80047be:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7a5b      	ldrb	r3, [r3, #9]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d108      	bne.n	80047da <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e007      	b.n	80047ea <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80047f8:	f023 0308 	bic.w	r3, r3, #8
 80047fc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d108      	bne.n	8004818 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7c1b      	ldrb	r3, [r3, #16]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d108      	bne.n	8004832 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0210 	orr.w	r2, r2, #16
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0210 	bic.w	r2, r2, #16
 8004840:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	7c5b      	ldrb	r3, [r3, #17]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d108      	bne.n	800485c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0220 	orr.w	r2, r2, #32
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0220 	bic.w	r2, r2, #32
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800487a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800487e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6959      	ldr	r1, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	3b01      	subs	r3, #1
 8004890:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004892:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800489a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7c1a      	ldrb	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40016100 	.word	0x40016100

080048ec <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800490c:	2bff      	cmp	r3, #255	; 0xff
 800490e:	d029      	beq.n	8004964 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800491e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004922:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10d      	bne.n	8004946 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e00a      	b.n	800495c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6819      	ldr	r1, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
 8004962:	e001      	b.n	8004968 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
}
 800496a:	4618      	mov	r0, r3
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
 8004998:	e064      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a8:	d002      	beq.n	80049b0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
 80049ae:	e059      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10e      	bne.n	80049d6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d002      	beq.n	80049d6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
 80049d4:	e046      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d102      	bne.n	80049f6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
 80049f4:	e036      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d004      	beq.n	8004a0a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d12a      	bne.n	8004a60 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d101      	bne.n	8004a28 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004a24:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004a26:	e000      	b.n	8004a2a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004a28:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	331c      	adds	r3, #28
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f000 fa26 	bl	8004e90 <HAL_DMA_Start_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004a56:	e005      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f8bd 	bl	8004bd8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004a5e:	e001      	b.n	8004a64 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08004b01 	.word	0x08004b01
 8004a74:	08004b1d 	.word	0x08004b1d
 8004a78:	08004ae5 	.word	0x08004ae5

08004a7c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d007      	beq.n	8004aa2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d002      	beq.n	8004aa2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e007      	b.n	8004ab2 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fa52 	bl	8004f50 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8e9 	bl	8004c84 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff ffe2 	bl	8004abc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7fc fba4 	bl	800125c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ffcd 	bl	8004ad0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <DFSDM_GetChannelFromInstance+0x7c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d102      	bne.n	8004b56 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e02b      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <DFSDM_GetChannelFromInstance+0x80>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d102      	bne.n	8004b64 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e024      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <DFSDM_GetChannelFromInstance+0x84>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d102      	bne.n	8004b72 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e01d      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <DFSDM_GetChannelFromInstance+0x88>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d102      	bne.n	8004b80 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e016      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <DFSDM_GetChannelFromInstance+0x8c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004b88:	2305      	movs	r3, #5
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e00f      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <DFSDM_GetChannelFromInstance+0x90>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d102      	bne.n	8004b9c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004b96:	2306      	movs	r3, #6
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e008      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <DFSDM_GetChannelFromInstance+0x94>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e001      	b.n	8004bae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004baa:	2303      	movs	r3, #3
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40016000 	.word	0x40016000
 8004bc0:	40016020 	.word	0x40016020
 8004bc4:	40016040 	.word	0x40016040
 8004bc8:	40016080 	.word	0x40016080
 8004bcc:	400160a0 	.word	0x400160a0
 8004bd0:	400160c0 	.word	0x400160c0
 8004bd4:	400160e0 	.word	0x400160e0

08004bd8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e033      	b.n	8004c62 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004c18:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d116      	bne.n	8004c62 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0202 	orr.w	r2, r2, #2
 8004c4a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d102      	bne.n	8004c5c <DFSDM_RegConvStart+0x84>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	e000      	b.n	8004c5e <DFSDM_RegConvStart+0x86>
 8004c5c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <DFSDM_RegConvStart+0x98>
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	e000      	b.n	8004c72 <DFSDM_RegConvStart+0x9a>
 8004c70:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d116      	bne.n	8004cfc <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0202 	orr.w	r2, r2, #2
 8004ce4:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d102      	bne.n	8004cf6 <DFSDM_RegConvStop+0x72>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	e000      	b.n	8004cf8 <DFSDM_RegConvStop+0x74>
 8004cf6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d101      	bne.n	8004d0a <DFSDM_RegConvStop+0x86>
 8004d06:	2201      	movs	r2, #1
 8004d08:	e000      	b.n	8004d0c <DFSDM_RegConvStop+0x88>
 8004d0a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e098      	b.n	8004e64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_DMA_Init+0x150>)
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d80f      	bhi.n	8004d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_DMA_Init+0x154>)
 8004d46:	4413      	add	r3, r2
 8004d48:	4a4b      	ldr	r2, [pc, #300]	; (8004e78 <HAL_DMA_Init+0x158>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	009a      	lsls	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a48      	ldr	r2, [pc, #288]	; (8004e7c <HAL_DMA_Init+0x15c>)
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d5c:	e00e      	b.n	8004d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <HAL_DMA_Init+0x160>)
 8004d66:	4413      	add	r3, r2
 8004d68:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <HAL_DMA_Init+0x158>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	009a      	lsls	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a42      	ldr	r2, [pc, #264]	; (8004e84 <HAL_DMA_Init+0x164>)
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd6:	d039      	beq.n	8004e4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <HAL_DMA_Init+0x15c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d11a      	bne.n	8004e18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <HAL_DMA_Init+0x168>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f003 031c 	and.w	r3, r3, #28
 8004dee:	210f      	movs	r1, #15
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	4924      	ldr	r1, [pc, #144]	; (8004e88 <HAL_DMA_Init+0x168>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004dfc:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_DMA_Init+0x168>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	f003 031c 	and.w	r3, r3, #28
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	491d      	ldr	r1, [pc, #116]	; (8004e88 <HAL_DMA_Init+0x168>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]
 8004e16:	e019      	b.n	8004e4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e18:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <HAL_DMA_Init+0x16c>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	f003 031c 	and.w	r3, r3, #28
 8004e24:	210f      	movs	r1, #15
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	4917      	ldr	r1, [pc, #92]	; (8004e8c <HAL_DMA_Init+0x16c>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_DMA_Init+0x16c>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f003 031c 	and.w	r3, r3, #28
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	4911      	ldr	r1, [pc, #68]	; (8004e8c <HAL_DMA_Init+0x16c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40020407 	.word	0x40020407
 8004e74:	bffdfff8 	.word	0xbffdfff8
 8004e78:	cccccccd 	.word	0xcccccccd
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	bffdfbf8 	.word	0xbffdfbf8
 8004e84:	40020400 	.word	0x40020400
 8004e88:	400200a8 	.word	0x400200a8
 8004e8c:	400204a8 	.word	0x400204a8

08004e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_DMA_Start_IT+0x20>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e04b      	b.n	8004f48 <HAL_DMA_Start_IT+0xb8>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d13a      	bne.n	8004f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f91e 	bl	800512a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 020e 	orr.w	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e00f      	b.n	8004f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 020a 	orr.w	r2, r2, #10
 8004f26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e005      	b.n	8004f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d008      	beq.n	8004f7a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e022      	b.n	8004fc0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 020e 	bic.w	r2, r2, #14
 8004f88:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f003 021c 	and.w	r2, r3, #28
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f003 031c 	and.w	r3, r3, #28
 8004fec:	2204      	movs	r2, #4
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d026      	beq.n	8005046 <HAL_DMA_IRQHandler+0x7a>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d021      	beq.n	8005046 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	f003 021c 	and.w	r2, r3, #28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	2104      	movs	r1, #4
 800502e:	fa01 f202 	lsl.w	r2, r1, r2
 8005032:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	2b00      	cmp	r3, #0
 800503a:	d071      	beq.n	8005120 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005044:	e06c      	b.n	8005120 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	f003 031c 	and.w	r3, r3, #28
 800504e:	2202      	movs	r2, #2
 8005050:	409a      	lsls	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02e      	beq.n	80050b8 <HAL_DMA_IRQHandler+0xec>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d029      	beq.n	80050b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 020a 	bic.w	r2, r2, #10
 8005080:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f003 021c 	and.w	r2, r3, #28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2102      	movs	r1, #2
 8005098:	fa01 f202 	lsl.w	r2, r1, r2
 800509c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d038      	beq.n	8005120 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050b6:	e033      	b.n	8005120 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	f003 031c 	and.w	r3, r3, #28
 80050c0:	2208      	movs	r2, #8
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02a      	beq.n	8005122 <HAL_DMA_IRQHandler+0x156>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d025      	beq.n	8005122 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 020e 	bic.w	r2, r2, #14
 80050e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f003 021c 	and.w	r2, r3, #28
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f202 	lsl.w	r2, r1, r2
 80050f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005120:	bf00      	nop
 8005122:	bf00      	nop
}
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	f003 021c 	and.w	r2, r3, #28
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f202 	lsl.w	r2, r1, r2
 800514a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b10      	cmp	r3, #16
 800515a:	d108      	bne.n	800516e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800516c:	e007      	b.n	800517e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	460b      	mov	r3, r1
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	bf00      	nop
  }

  return status;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e003      	b.n	80051da <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	2201      	movs	r2, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_EXTI_IRQHandler+0x5c>)
 8005212:	4413      	add	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4013      	ands	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4798      	blx	r3
    }
  }
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40010414 	.word	0x40010414

08005248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005256:	e17f      	b.n	8005558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8171 	beq.w	8005552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d005      	beq.n	8005288 <HAL_GPIO_Init+0x40>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d130      	bne.n	80052ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	2203      	movs	r2, #3
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052be:	2201      	movs	r2, #1
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	f003 0201 	and.w	r2, r3, #1
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d118      	bne.n	8005328 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80052fc:	2201      	movs	r2, #1
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f003 0201 	and.w	r2, r3, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b03      	cmp	r3, #3
 8005332:	d017      	beq.n	8005364 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	2203      	movs	r2, #3
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4013      	ands	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d123      	bne.n	80053b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	08da      	lsrs	r2, r3, #3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3208      	adds	r2, #8
 8005378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	220f      	movs	r2, #15
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3208      	adds	r2, #8
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	2203      	movs	r2, #3
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0203 	and.w	r2, r3, #3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80ac 	beq.w	8005552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fa:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <HAL_GPIO_Init+0x330>)
 80053fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fe:	4a5e      	ldr	r2, [pc, #376]	; (8005578 <HAL_GPIO_Init+0x330>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6613      	str	r3, [r2, #96]	; 0x60
 8005406:	4b5c      	ldr	r3, [pc, #368]	; (8005578 <HAL_GPIO_Init+0x330>)
 8005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005412:	4a5a      	ldr	r2, [pc, #360]	; (800557c <HAL_GPIO_Init+0x334>)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	3302      	adds	r3, #2
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800543c:	d025      	beq.n	800548a <HAL_GPIO_Init+0x242>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a4f      	ldr	r2, [pc, #316]	; (8005580 <HAL_GPIO_Init+0x338>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01f      	beq.n	8005486 <HAL_GPIO_Init+0x23e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a4e      	ldr	r2, [pc, #312]	; (8005584 <HAL_GPIO_Init+0x33c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d019      	beq.n	8005482 <HAL_GPIO_Init+0x23a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a4d      	ldr	r2, [pc, #308]	; (8005588 <HAL_GPIO_Init+0x340>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_GPIO_Init+0x236>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a4c      	ldr	r2, [pc, #304]	; (800558c <HAL_GPIO_Init+0x344>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_GPIO_Init+0x232>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a4b      	ldr	r2, [pc, #300]	; (8005590 <HAL_GPIO_Init+0x348>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <HAL_GPIO_Init+0x22e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a4a      	ldr	r2, [pc, #296]	; (8005594 <HAL_GPIO_Init+0x34c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_GPIO_Init+0x22a>
 800546e:	2306      	movs	r3, #6
 8005470:	e00c      	b.n	800548c <HAL_GPIO_Init+0x244>
 8005472:	2307      	movs	r3, #7
 8005474:	e00a      	b.n	800548c <HAL_GPIO_Init+0x244>
 8005476:	2305      	movs	r3, #5
 8005478:	e008      	b.n	800548c <HAL_GPIO_Init+0x244>
 800547a:	2304      	movs	r3, #4
 800547c:	e006      	b.n	800548c <HAL_GPIO_Init+0x244>
 800547e:	2303      	movs	r3, #3
 8005480:	e004      	b.n	800548c <HAL_GPIO_Init+0x244>
 8005482:	2302      	movs	r3, #2
 8005484:	e002      	b.n	800548c <HAL_GPIO_Init+0x244>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_GPIO_Init+0x244>
 800548a:	2300      	movs	r3, #0
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	f002 0203 	and.w	r2, r2, #3
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	4093      	lsls	r3, r2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800549c:	4937      	ldr	r1, [pc, #220]	; (800557c <HAL_GPIO_Init+0x334>)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	3302      	adds	r3, #2
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054aa:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <HAL_GPIO_Init+0x350>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054ce:	4a32      	ldr	r2, [pc, #200]	; (8005598 <HAL_GPIO_Init+0x350>)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054d4:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_GPIO_Init+0x350>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43db      	mvns	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054f8:	4a27      	ldr	r2, [pc, #156]	; (8005598 <HAL_GPIO_Init+0x350>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80054fe:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_GPIO_Init+0x350>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_GPIO_Init+0x350>)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_GPIO_Init+0x350>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	43db      	mvns	r3, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800554c:	4a12      	ldr	r2, [pc, #72]	; (8005598 <HAL_GPIO_Init+0x350>)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f ae78 	bne.w	8005258 <HAL_GPIO_Init+0x10>
  }
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	40010000 	.word	0x40010000
 8005580:	48000400 	.word	0x48000400
 8005584:	48000800 	.word	0x48000800
 8005588:	48000c00 	.word	0x48000c00
 800558c:	48001000 	.word	0x48001000
 8005590:	48001400 	.word	0x48001400
 8005594:	48001800 	.word	0x48001800
 8005598:	40010400 	.word	0x40010400

0800559c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80055aa:	e0cd      	b.n	8005748 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055ac:	2201      	movs	r2, #1
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80c0 	beq.w	8005742 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80055c2:	4a68      	ldr	r2, [pc, #416]	; (8005764 <HAL_GPIO_DeInit+0x1c8>)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	3302      	adds	r3, #2
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	220f      	movs	r2, #15
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055ea:	d025      	beq.n	8005638 <HAL_GPIO_DeInit+0x9c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a5e      	ldr	r2, [pc, #376]	; (8005768 <HAL_GPIO_DeInit+0x1cc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01f      	beq.n	8005634 <HAL_GPIO_DeInit+0x98>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a5d      	ldr	r2, [pc, #372]	; (800576c <HAL_GPIO_DeInit+0x1d0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d019      	beq.n	8005630 <HAL_GPIO_DeInit+0x94>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a5c      	ldr	r2, [pc, #368]	; (8005770 <HAL_GPIO_DeInit+0x1d4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_GPIO_DeInit+0x90>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a5b      	ldr	r2, [pc, #364]	; (8005774 <HAL_GPIO_DeInit+0x1d8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00d      	beq.n	8005628 <HAL_GPIO_DeInit+0x8c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a5a      	ldr	r2, [pc, #360]	; (8005778 <HAL_GPIO_DeInit+0x1dc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d007      	beq.n	8005624 <HAL_GPIO_DeInit+0x88>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a59      	ldr	r2, [pc, #356]	; (800577c <HAL_GPIO_DeInit+0x1e0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d101      	bne.n	8005620 <HAL_GPIO_DeInit+0x84>
 800561c:	2306      	movs	r3, #6
 800561e:	e00c      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005620:	2307      	movs	r3, #7
 8005622:	e00a      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005624:	2305      	movs	r3, #5
 8005626:	e008      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005628:	2304      	movs	r3, #4
 800562a:	e006      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 800562c:	2303      	movs	r3, #3
 800562e:	e004      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005630:	2302      	movs	r3, #2
 8005632:	e002      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <HAL_GPIO_DeInit+0x9e>
 8005638:	2300      	movs	r3, #0
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	f002 0203 	and.w	r2, r2, #3
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4093      	lsls	r3, r2
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	429a      	cmp	r2, r3
 8005648:	d132      	bne.n	80056b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800564a:	4b4d      	ldr	r3, [pc, #308]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	494b      	ldr	r1, [pc, #300]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 8005654:	4013      	ands	r3, r2
 8005656:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	43db      	mvns	r3, r3
 8005660:	4947      	ldr	r1, [pc, #284]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 8005662:	4013      	ands	r3, r2
 8005664:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	4944      	ldr	r1, [pc, #272]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 8005670:	4013      	ands	r3, r2
 8005672:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005674:	4b42      	ldr	r3, [pc, #264]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	43db      	mvns	r3, r3
 800567c:	4940      	ldr	r1, [pc, #256]	; (8005780 <HAL_GPIO_DeInit+0x1e4>)
 800567e:	4013      	ands	r3, r2
 8005680:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005692:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_GPIO_DeInit+0x1c8>)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	3302      	adds	r3, #2
 800569a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	43da      	mvns	r2, r3
 80056a2:	4830      	ldr	r0, [pc, #192]	; (8005764 <HAL_GPIO_DeInit+0x1c8>)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	089b      	lsrs	r3, r3, #2
 80056a8:	400a      	ands	r2, r1
 80056aa:	3302      	adds	r3, #2
 80056ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	2103      	movs	r1, #3
 80056ba:	fa01 f303 	lsl.w	r3, r1, r3
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	08d2      	lsrs	r2, r2, #3
 80056e4:	4019      	ands	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3208      	adds	r2, #8
 80056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2103      	movs	r1, #3
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	401a      	ands	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	2101      	movs	r1, #1
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	2103      	movs	r1, #3
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	401a      	ands	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005732:	2101      	movs	r1, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	401a      	ands	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3301      	adds	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f af2b 	bne.w	80055ac <HAL_GPIO_DeInit+0x10>
  }
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40010000 	.word	0x40010000
 8005768:	48000400 	.word	0x48000400
 800576c:	48000800 	.word	0x48000800
 8005770:	48000c00 	.word	0x48000c00
 8005774:	48001000 	.word	0x48001000
 8005778:	48001400 	.word	0x48001400
 800577c:	48001800 	.word	0x48001800
 8005780:	40010400 	.word	0x40010400

08005784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e001      	b.n	80057a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c4:	787b      	ldrb	r3, [r7, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057d0:	e002      	b.n	80057d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057f6:	887a      	ldrh	r2, [r7, #2]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4013      	ands	r3, r2
 80057fc:	041a      	lsls	r2, r3, #16
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	43d9      	mvns	r1, r3
 8005802:	887b      	ldrh	r3, [r7, #2]
 8005804:	400b      	ands	r3, r1
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	619a      	str	r2, [r3, #24]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800582e:	4a05      	ldr	r2, [pc, #20]	; (8005844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fb fcee 	bl	8001218 <HAL_GPIO_EXTI_Callback>
  }
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40010400 	.word	0x40010400

08005848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e08d      	b.n	8005976 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fd f86a 	bl	8002948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	; 0x24
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	e006      	b.n	80058d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d108      	bne.n	80058ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	e007      	b.n	80058fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800591c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e021      	b.n	80059d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	; 0x24
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0201 	bic.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fd f86f 	bl	8002a8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	4608      	mov	r0, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	461a      	mov	r2, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	817b      	strh	r3, [r7, #10]
 80059ee:	460b      	mov	r3, r1
 80059f0:	813b      	strh	r3, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	f040 80f9 	bne.w	8005bf6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x34>
 8005a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0ed      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_I2C_Mem_Write+0x4e>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0e6      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a32:	f7fe fb37 	bl	80040a4 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2319      	movs	r3, #25
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fac3 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d1      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2221      	movs	r2, #33	; 0x21
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a7c:	88f8      	ldrh	r0, [r7, #6]
 8005a7e:	893a      	ldrh	r2, [r7, #8]
 8005a80:	8979      	ldrh	r1, [r7, #10]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f9d3 	bl	8005e38 <I2C_RequestMemoryWrite>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0a9      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2bff      	cmp	r3, #255	; 0xff
 8005aac:	d90e      	bls.n	8005acc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	8979      	ldrh	r1, [r7, #10]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fc3d 	bl	8006344 <I2C_TransferConfig>
 8005aca:	e00f      	b.n	8005aec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	8979      	ldrh	r1, [r7, #10]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fc2c 	bl	8006344 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fabc 	bl	800606e <I2C_WaitOnTXISFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e07b      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d034      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x1c8>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d130      	bne.n	8005ba4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fa3f 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e04d      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2bff      	cmp	r3, #255	; 0xff
 8005b64:	d90e      	bls.n	8005b84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	8979      	ldrh	r1, [r7, #10]
 8005b74:	2300      	movs	r3, #0
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fbe1 	bl	8006344 <I2C_TransferConfig>
 8005b82:	e00f      	b.n	8005ba4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	8979      	ldrh	r1, [r7, #10]
 8005b96:	2300      	movs	r3, #0
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fbd0 	bl	8006344 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d19e      	bne.n	8005aec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 faa2 	bl	80060fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e01a      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <HAL_I2C_Mem_Write+0x224>)
 8005bd6:	400b      	ands	r3, r1
 8005bd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	fe00e800 	.word	0xfe00e800

08005c04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	817b      	strh	r3, [r7, #10]
 8005c16:	460b      	mov	r3, r1
 8005c18:	813b      	strh	r3, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	f040 80fd 	bne.w	8005e26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_I2C_Mem_Read+0x34>
 8005c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d105      	bne.n	8005c44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0f1      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Mem_Read+0x4e>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e0ea      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c5a:	f7fe fa23 	bl	80040a4 <HAL_GetTick>
 8005c5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2319      	movs	r3, #25
 8005c66:	2201      	movs	r2, #1
 8005c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f9af 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0d5      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2222      	movs	r2, #34	; 0x22
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ca4:	88f8      	ldrh	r0, [r7, #6]
 8005ca6:	893a      	ldrh	r2, [r7, #8]
 8005ca8:	8979      	ldrh	r1, [r7, #10]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f913 	bl	8005ee0 <I2C_RequestMemoryRead>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0ad      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2bff      	cmp	r3, #255	; 0xff
 8005cd4:	d90e      	bls.n	8005cf4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	8979      	ldrh	r1, [r7, #10]
 8005ce4:	4b52      	ldr	r3, [pc, #328]	; (8005e30 <HAL_I2C_Mem_Read+0x22c>)
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fb29 	bl	8006344 <I2C_TransferConfig>
 8005cf2:	e00f      	b.n	8005d14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	8979      	ldrh	r1, [r7, #10]
 8005d06:	4b4a      	ldr	r3, [pc, #296]	; (8005e30 <HAL_I2C_Mem_Read+0x22c>)
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fb18 	bl	8006344 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2104      	movs	r1, #4
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f956 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e07c      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d034      	beq.n	8005dd4 <HAL_I2C_Mem_Read+0x1d0>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d130      	bne.n	8005dd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f927 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04d      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2bff      	cmp	r3, #255	; 0xff
 8005d94:	d90e      	bls.n	8005db4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	22ff      	movs	r2, #255	; 0xff
 8005d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	8979      	ldrh	r1, [r7, #10]
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fac9 	bl	8006344 <I2C_TransferConfig>
 8005db2:	e00f      	b.n	8005dd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	8979      	ldrh	r1, [r7, #10]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fab8 	bl	8006344 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d19a      	bne.n	8005d14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f98a 	bl	80060fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e01a      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2220      	movs	r2, #32
 8005df8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_I2C_Mem_Read+0x230>)
 8005e06:	400b      	ands	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
  }
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	80002400 	.word	0x80002400
 8005e34:	fe00e800 	.word	0xfe00e800

08005e38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	817b      	strh	r3, [r7, #10]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	813b      	strh	r3, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	8979      	ldrh	r1, [r7, #10]
 8005e58:	4b20      	ldr	r3, [pc, #128]	; (8005edc <I2C_RequestMemoryWrite+0xa4>)
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fa6f 	bl	8006344 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f8ff 	bl	800606e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e02c      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	629a      	str	r2, [r3, #40]	; 0x28
 8005e8a:	e015      	b.n	8005eb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e8c:	893b      	ldrh	r3, [r7, #8]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f8e5 	bl	800606e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e012      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f884 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	80002000 	.word	0x80002000

08005ee0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	813b      	strh	r3, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	8979      	ldrh	r1, [r7, #10]
 8005f00:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <I2C_RequestMemoryRead+0xa4>)
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2300      	movs	r3, #0
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa1c 	bl	8006344 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f8ac 	bl	800606e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e02c      	b.n	8005f7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d105      	bne.n	8005f32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f30:	e015      	b.n	8005f5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	69b9      	ldr	r1, [r7, #24]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f892 	bl	800606e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e012      	b.n	8005f7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f54:	893b      	ldrh	r3, [r7, #8]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f831 	bl	8005fd0 <I2C_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	80002000 	.word	0x80002000

08005f88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d103      	bne.n	8005fa6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d007      	beq.n	8005fc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	619a      	str	r2, [r3, #24]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe0:	e031      	b.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d02d      	beq.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fe f85b 	bl	80040a4 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d122      	bne.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4013      	ands	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	d113      	bne.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e00f      	b.n	8006066 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	429a      	cmp	r2, r3
 8006062:	d0be      	beq.n	8005fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800607a:	e033      	b.n	80060e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f87f 	bl	8006184 <I2C_IsErrorOccurred>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e031      	b.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006096:	d025      	beq.n	80060e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006098:	f7fe f804 	bl	80040a4 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d302      	bcc.n	80060ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11a      	bne.n	80060e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d013      	beq.n	80060e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e007      	b.n	80060f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d1c4      	bne.n	800607c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006108:	e02f      	b.n	800616a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f838 	bl	8006184 <I2C_IsErrorOccurred>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e02d      	b.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fd ffc1 	bl	80040a4 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11a      	bne.n	800616a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d013      	beq.n	800616a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e007      	b.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b20      	cmp	r3, #32
 8006176:	d1c8      	bne.n	800610a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d068      	beq.n	8006282 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061b8:	e049      	b.n	800624e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c0:	d045      	beq.n	800624e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fd ff6f 	bl	80040a4 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_IsErrorOccurred+0x54>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d13a      	bne.n	800624e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fa:	d121      	bne.n	8006240 <I2C_IsErrorOccurred+0xbc>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006202:	d01d      	beq.n	8006240 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	2b20      	cmp	r3, #32
 8006208:	d01a      	beq.n	8006240 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006218:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800621a:	f7fd ff43 	bl	80040a4 <HAL_GetTick>
 800621e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006220:	e00e      	b.n	8006240 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006222:	f7fd ff3f 	bl	80040a4 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b19      	cmp	r3, #25
 800622e:	d907      	bls.n	8006240 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	f043 0320 	orr.w	r3, r3, #32
 8006236:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800623e:	e006      	b.n	800624e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b20      	cmp	r3, #32
 800624c:	d1e9      	bne.n	8006222 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b20      	cmp	r3, #32
 800625a:	d003      	beq.n	8006264 <I2C_IsErrorOccurred+0xe0>
 800625c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0aa      	beq.n	80061ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2220      	movs	r2, #32
 8006272:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	f043 0308 	orr.w	r3, r3, #8
 80062bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	f043 0302 	orr.w	r3, r3, #2
 80062de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80062f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01c      	beq.n	8006332 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fe45 	bl	8005f88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <I2C_IsErrorOccurred+0x1bc>)
 800630a:	400b      	ands	r3, r1
 800630c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006336:	4618      	mov	r0, r3
 8006338:	3728      	adds	r7, #40	; 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	fe00e800 	.word	0xfe00e800

08006344 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	817b      	strh	r3, [r7, #10]
 8006352:	4613      	mov	r3, r2
 8006354:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800635c:	7a7b      	ldrb	r3, [r7, #9]
 800635e:	041b      	lsls	r3, r3, #16
 8006360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006364:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4313      	orrs	r3, r2
 800636e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006372:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	0d5b      	lsrs	r3, r3, #21
 800637e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006382:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <I2C_TransferConfig+0x60>)
 8006384:	430b      	orrs	r3, r1
 8006386:	43db      	mvns	r3, r3
 8006388:	ea02 0103 	and.w	r1, r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	03ff63ff 	.word	0x03ff63ff

080063a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d138      	bne.n	8006430 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e032      	b.n	8006432 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2224      	movs	r2, #36	; 0x24
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b20      	cmp	r3, #32
 8006452:	d139      	bne.n	80064c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800645e:	2302      	movs	r3, #2
 8006460:	e033      	b.n	80064ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2224      	movs	r2, #36	; 0x24
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006490:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40007000 	.word	0x40007000

080064f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <HAL_PWREx_GetVoltageRange+0x18>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006504:	4618      	mov	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40007000 	.word	0x40007000

08006514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006522:	d130      	bne.n	8006586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d038      	beq.n	80065a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800653a:	4a1e      	ldr	r2, [pc, #120]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800653c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2232      	movs	r2, #50	; 0x32
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0c9b      	lsrs	r3, r3, #18
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006558:	e002      	b.n	8006560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b01      	subs	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006560:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d102      	bne.n	8006574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f2      	bne.n	800655a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006580:	d110      	bne.n	80065a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e00f      	b.n	80065a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d007      	beq.n	80065a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006594:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800659c:	4a05      	ldr	r2, [pc, #20]	; (80065b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800659e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40007000 	.word	0x40007000
 80065b8:	20000008 	.word	0x20000008
 80065bc:	431bde83 	.word	0x431bde83

080065c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80065c8:	f7fd fd6c 	bl	80040a4 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e063      	b.n	80066a0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fc fa89 	bl	8002b04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80065f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb03 	bl	8006c02 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	3b01      	subs	r3, #1
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	2120      	movs	r1, #32
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fafb 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d131      	bne.n	8006696 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800663c:	f023 0310 	bic.w	r3, r3, #16
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6852      	ldr	r2, [r2, #4]
 8006644:	0611      	lsls	r1, r2, #24
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68d2      	ldr	r2, [r2, #12]
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	430b      	orrs	r3, r1
 8006652:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <HAL_QSPI_Init+0xe8>)
 800665c:	4013      	ands	r3, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6912      	ldr	r2, [r2, #16]
 8006662:	0411      	lsls	r1, r2, #16
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6952      	ldr	r2, [r2, #20]
 8006668:	4311      	orrs	r1, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6992      	ldr	r2, [r2, #24]
 800666e:	4311      	orrs	r1, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	430b      	orrs	r3, r1
 8006676:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800669e:	7afb      	ldrb	r3, [r7, #11]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	ffe0f8fe 	.word	0xffe0f8fe

080066ac <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e016      	b.n	80066ec <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fc fa5c 	bl	8002b8c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006700:	f7fd fcd0 	bl	80040a4 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_QSPI_Command+0x22>
 8006712:	2302      	movs	r3, #2
 8006714:	e048      	b.n	80067a8 <HAL_QSPI_Command+0xb4>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d137      	bne.n	800679a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2200      	movs	r2, #0
 8006740:	2120      	movs	r1, #32
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fa6b 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d125      	bne.n	800679e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006752:	2200      	movs	r2, #0
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fa98 	bl	8006c8c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d115      	bne.n	8006790 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2201      	movs	r2, #1
 800676c:	2102      	movs	r1, #2
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fa55 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2202      	movs	r2, #2
 8006784:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800678e:	e006      	b.n	800679e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006798:	e001      	b.n	800679e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800679a:	2302      	movs	r3, #2
 800679c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80067c0:	f7fd fc70 	bl	80040a4 <HAL_GetTick>
 80067c4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3320      	adds	r3, #32
 80067cc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_QSPI_Transmit+0x2e>
 80067da:	2302      	movs	r3, #2
 80067dc:	e07b      	b.n	80068d6 <HAL_QSPI_Transmit+0x126>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d16a      	bne.n	80068c8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d05b      	beq.n	80068b6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2212      	movs	r2, #18
 8006802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006832:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006834:	e01b      	b.n	800686e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2201      	movs	r2, #1
 800683e:	2104      	movs	r1, #4
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f9ec 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800684a:	7ffb      	ldrb	r3, [r7, #31]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d113      	bne.n	8006878 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1e5a      	subs	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1df      	bne.n	8006836 <HAL_QSPI_Transmit+0x86>
 8006876:	e000      	b.n	800687a <HAL_QSPI_Transmit+0xca>
          break;
 8006878:	bf00      	nop
      }

      if (status == HAL_OK)
 800687a:	7ffb      	ldrb	r3, [r7, #31]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d115      	bne.n	80068ac <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2201      	movs	r2, #1
 8006888:	2102      	movs	r1, #2
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f9c7 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006894:	7ffb      	ldrb	r3, [r7, #31]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2202      	movs	r2, #2
 80068a0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f934 	bl	8006b10 <HAL_QSPI_Abort>
 80068a8:	4603      	mov	r3, r0
 80068aa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80068b4:	e00a      	b.n	80068cc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e001      	b.n	80068cc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
 80068ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b08a      	sub	sp, #40	; 0x28
 80068e2:	af02      	add	r7, sp, #8
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80068ee:	f7fd fbd9 	bl	80040a4 <HAL_GetTick>
 80068f2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3320      	adds	r3, #32
 8006902:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_QSPI_Receive+0x36>
 8006910:	2302      	movs	r3, #2
 8006912:	e082      	b.n	8006a1a <HAL_QSPI_Receive+0x13c>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d171      	bne.n	8006a0c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d062      	beq.n	80069fa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2222      	movs	r2, #34	; 0x22
 8006938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800696c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006976:	e01c      	b.n	80069b2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2201      	movs	r2, #1
 8006980:	2106      	movs	r1, #6
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f94b 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800698c:	7ffb      	ldrb	r3, [r7, #31]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d114      	bne.n	80069bc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	7812      	ldrb	r2, [r2, #0]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	1e5a      	subs	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1de      	bne.n	8006978 <HAL_QSPI_Receive+0x9a>
 80069ba:	e000      	b.n	80069be <HAL_QSPI_Receive+0xe0>
          break;
 80069bc:	bf00      	nop
      }

      if (status == HAL_OK)
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d115      	bne.n	80069f0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2201      	movs	r2, #1
 80069cc:	2102      	movs	r1, #2
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f925 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d108      	bne.n	80069f0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2202      	movs	r2, #2
 80069e4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f892 	bl	8006b10 <HAL_QSPI_Abort>
 80069ec:	4603      	mov	r3, r0
 80069ee:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80069f8:	e00a      	b.n	8006a10 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e001      	b.n	8006a10 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b088      	sub	sp, #32
 8006a26:	af02      	add	r7, sp, #8
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a30:	f7fd fb38 	bl	80040a4 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_QSPI_AutoPolling+0x24>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e060      	b.n	8006b08 <HAL_QSPI_AutoPolling+0xe6>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d14f      	bne.n	8006afa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2242      	movs	r2, #66	; 0x42
 8006a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2120      	movs	r1, #32
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8d3 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d13d      	bne.n	8006afe <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6852      	ldr	r2, [r2, #4]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6892      	ldr	r2, [r2, #8]
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006ab8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f8df 	bl	8006c8c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2108      	movs	r1, #8
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f8a0 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2208      	movs	r2, #8
 8006aee:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006af8:	e001      	b.n	8006afe <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
 8006afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006b1c:	f7fd fac2 	bl	80040a4 <HAL_GetTick>
 8006b20:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d062      	beq.n	8006bf8 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0204 	bic.w	r2, r2, #4
 8006b56:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe f9f7 	bl	8004f50 <HAL_DMA_Abort>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	f043 0204 	orr.w	r2, r3, #4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d034      	beq.n	8006bf0 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0202 	orr.w	r2, r2, #2
 8006b94:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f83b 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2120      	movs	r1, #32
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f829 	bl	8006c1e <QSPI_WaitFlagStateUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d110      	bne.n	8006bf8 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006be4:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006bee:	e003      	b.n	8006bf8 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c2e:	e01a      	b.n	8006c66 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c36:	d016      	beq.n	8006c66 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c38:	f7fd fa34 	bl	80040a4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2204      	movs	r2, #4
 8006c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	f043 0201 	orr.w	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e00e      	b.n	8006c84 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d1d6      	bne.n	8006c30 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <QSPI_Config+0x28>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ca6:	d005      	beq.n	8006cb4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80b9 	beq.w	8006e30 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d05f      	beq.n	8006d86 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	6892      	ldr	r2, [r2, #8]
 8006cce:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d031      	beq.n	8006d3c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	431a      	orrs	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	049b      	lsls	r3, r3, #18
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	ea42 0103 	orr.w	r1, r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d2c:	f000 812e 	beq.w	8006f8c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	6852      	ldr	r2, [r2, #4]
 8006d38:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006d3a:	e127      	b.n	8006f8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	049b      	lsls	r3, r3, #18
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	ea42 0103 	orr.w	r1, r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	615a      	str	r2, [r3, #20]
}
 8006d84:	e102      	b.n	8006f8c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d02e      	beq.n	8006dec <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	049b      	lsls	r3, r3, #18
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	431a      	orrs	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	ea42 0103 	orr.w	r1, r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ddc:	f000 80d6 	beq.w	8006f8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	6852      	ldr	r2, [r2, #4]
 8006de8:	619a      	str	r2, [r3, #24]
}
 8006dea:	e0cf      	b.n	8006f8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	049b      	lsls	r3, r3, #18
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	ea42 0103 	orr.w	r1, r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	615a      	str	r2, [r3, #20]
}
 8006e2e:	e0ad      	b.n	8006f8c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d058      	beq.n	8006eea <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	6892      	ldr	r2, [r2, #8]
 8006e40:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02d      	beq.n	8006ea6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	049b      	lsls	r3, r3, #18
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	ea42 0103 	orr.w	r1, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e98:	d078      	beq.n	8006f8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	6852      	ldr	r2, [r2, #4]
 8006ea2:	619a      	str	r2, [r3, #24]
}
 8006ea4:	e072      	b.n	8006f8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	049b      	lsls	r3, r3, #18
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	ea42 0103 	orr.w	r1, r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	615a      	str	r2, [r3, #20]
}
 8006ee8:	e050      	b.n	8006f8c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02a      	beq.n	8006f48 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	431a      	orrs	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	049b      	lsls	r3, r3, #18
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	ea42 0103 	orr.w	r1, r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f3a:	d027      	beq.n	8006f8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	6852      	ldr	r2, [r2, #4]
 8006f44:	619a      	str	r2, [r3, #24]
}
 8006f46:	e021      	b.n	8006f8c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01d      	beq.n	8006f8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	049b      	lsls	r3, r3, #18
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	ea42 0103 	orr.w	r1, r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	615a      	str	r2, [r3, #20]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e3ca      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006faa:	4b97      	ldr	r3, [pc, #604]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 030c 	and.w	r3, r3, #12
 8006fb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb4:	4b94      	ldr	r3, [pc, #592]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80e4 	beq.w	8007194 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x4a>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	f040 808b 	bne.w	80070f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 8087 	bne.w	80070f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fe2:	4b89      	ldr	r3, [pc, #548]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_RCC_OscConfig+0x62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e3a2      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <HAL_RCC_OscConfig+0x7c>
 800700a:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007012:	e005      	b.n	8007020 <HAL_RCC_OscConfig+0x88>
 8007014:	4b7c      	ldr	r3, [pc, #496]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007020:	4293      	cmp	r3, r2
 8007022:	d223      	bcs.n	800706c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fd55 	bl	8007ad8 <RCC_SetFlashLatencyFromMSIRange>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e383      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007038:	4b73      	ldr	r3, [pc, #460]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a72      	ldr	r2, [pc, #456]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800703e:	f043 0308 	orr.w	r3, r3, #8
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4b70      	ldr	r3, [pc, #448]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	496d      	ldr	r1, [pc, #436]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007056:	4b6c      	ldr	r3, [pc, #432]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	4968      	ldr	r1, [pc, #416]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007066:	4313      	orrs	r3, r2
 8007068:	604b      	str	r3, [r1, #4]
 800706a:	e025      	b.n	80070b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800706c:	4b66      	ldr	r3, [pc, #408]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a65      	ldr	r2, [pc, #404]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007072:	f043 0308 	orr.w	r3, r3, #8
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b63      	ldr	r3, [pc, #396]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	4960      	ldr	r1, [pc, #384]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800708a:	4b5f      	ldr	r3, [pc, #380]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	495b      	ldr	r1, [pc, #364]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fd15 	bl	8007ad8 <RCC_SetFlashLatencyFromMSIRange>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e343      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070b8:	f000 fc4a 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b52      	ldr	r3, [pc, #328]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4950      	ldr	r1, [pc, #320]	; (800720c <HAL_RCC_OscConfig+0x274>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	4a4e      	ldr	r2, [pc, #312]	; (8007210 <HAL_RCC_OscConfig+0x278>)
 80070d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070d8:	4b4e      	ldr	r3, [pc, #312]	; (8007214 <HAL_RCC_OscConfig+0x27c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fc ff91 	bl	8004004 <HAL_InitTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d052      	beq.n	8007192 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	e327      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d032      	beq.n	800715e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070f8:	4b43      	ldr	r3, [pc, #268]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a42      	ldr	r2, [pc, #264]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007104:	f7fc ffce 	bl	80040a4 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800710c:	f7fc ffca 	bl	80040a4 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e310      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800711e:	4b3a      	ldr	r3, [pc, #232]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a36      	ldr	r2, [pc, #216]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007130:	f043 0308 	orr.w	r3, r3, #8
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b34      	ldr	r3, [pc, #208]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	4931      	ldr	r1, [pc, #196]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007144:	4313      	orrs	r3, r2
 8007146:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007148:	4b2f      	ldr	r3, [pc, #188]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	492c      	ldr	r1, [pc, #176]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	e01a      	b.n	8007194 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800715e:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a29      	ldr	r2, [pc, #164]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800716a:	f7fc ff9b 	bl	80040a4 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007172:	f7fc ff97 	bl	80040a4 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e2dd      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x1da>
 8007190:	e000      	b.n	8007194 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007192:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d074      	beq.n	800728a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d005      	beq.n	80071b2 <HAL_RCC_OscConfig+0x21a>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d10e      	bne.n	80071ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d10b      	bne.n	80071ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d064      	beq.n	8007288 <HAL_RCC_OscConfig+0x2f0>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d160      	bne.n	8007288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e2ba      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x24a>
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a0b      	ldr	r2, [pc, #44]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e026      	b.n	8007230 <HAL_RCC_OscConfig+0x298>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ea:	d115      	bne.n	8007218 <HAL_RCC_OscConfig+0x280>
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a02      	ldr	r2, [pc, #8]	; (8007208 <HAL_RCC_OscConfig+0x270>)
 80071fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	e014      	b.n	8007230 <HAL_RCC_OscConfig+0x298>
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000
 800720c:	0800af9c 	.word	0x0800af9c
 8007210:	20000008 	.word	0x20000008
 8007214:	20000034 	.word	0x20000034
 8007218:	4ba0      	ldr	r3, [pc, #640]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a9f      	ldr	r2, [pc, #636]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	4b9d      	ldr	r3, [pc, #628]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a9c      	ldr	r2, [pc, #624]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800722a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800722e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d013      	beq.n	8007260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fc ff34 	bl	80040a4 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007240:	f7fc ff30 	bl	80040a4 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e276      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007252:	4b92      	ldr	r3, [pc, #584]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x2a8>
 800725e:	e014      	b.n	800728a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fc ff20 	bl	80040a4 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007268:	f7fc ff1c 	bl	80040a4 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	; 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e262      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800727a:	4b88      	ldr	r3, [pc, #544]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x2d0>
 8007286:	e000      	b.n	800728a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d060      	beq.n	8007358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d005      	beq.n	80072a8 <HAL_RCC_OscConfig+0x310>
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b0c      	cmp	r3, #12
 80072a0:	d119      	bne.n	80072d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d116      	bne.n	80072d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072a8:	4b7c      	ldr	r3, [pc, #496]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_RCC_OscConfig+0x328>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e23f      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c0:	4b76      	ldr	r3, [pc, #472]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	4973      	ldr	r1, [pc, #460]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d4:	e040      	b.n	8007358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d023      	beq.n	8007326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072de:	4b6f      	ldr	r3, [pc, #444]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a6e      	ldr	r2, [pc, #440]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ea:	f7fc fedb 	bl	80040a4 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f2:	f7fc fed7 	bl	80040a4 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e21d      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007304:	4b65      	ldr	r3, [pc, #404]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007310:	4b62      	ldr	r3, [pc, #392]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	495f      	ldr	r1, [pc, #380]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007320:	4313      	orrs	r3, r2
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	e018      	b.n	8007358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007326:	4b5d      	ldr	r3, [pc, #372]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a5c      	ldr	r2, [pc, #368]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800732c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007332:	f7fc feb7 	bl	80040a4 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733a:	f7fc feb3 	bl	80040a4 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e1f9      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800734c:	4b53      	ldr	r3, [pc, #332]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d03c      	beq.n	80073de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01c      	beq.n	80073a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800736c:	4b4b      	ldr	r3, [pc, #300]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800736e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007372:	4a4a      	ldr	r2, [pc, #296]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fc fe92 	bl	80040a4 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007384:	f7fc fe8e 	bl	80040a4 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e1d4      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007396:	4b41      	ldr	r3, [pc, #260]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ef      	beq.n	8007384 <HAL_RCC_OscConfig+0x3ec>
 80073a4:	e01b      	b.n	80073de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a6:	4b3d      	ldr	r3, [pc, #244]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	4a3b      	ldr	r2, [pc, #236]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b6:	f7fc fe75 	bl	80040a4 <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073be:	f7fc fe71 	bl	80040a4 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e1b7      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073d0:	4b32      	ldr	r3, [pc, #200]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80073d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1ef      	bne.n	80073be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80a6 	beq.w	8007538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073ec:	2300      	movs	r3, #0
 80073ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073f0:	4b2a      	ldr	r3, [pc, #168]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80073f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073fc:	4b27      	ldr	r3, [pc, #156]	; (800749c <HAL_RCC_OscConfig+0x504>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	4a26      	ldr	r2, [pc, #152]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007406:	6593      	str	r3, [r2, #88]	; 0x58
 8007408:	4b24      	ldr	r3, [pc, #144]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007418:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <HAL_RCC_OscConfig+0x508>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d118      	bne.n	8007456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007424:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_RCC_OscConfig+0x508>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_RCC_OscConfig+0x508>)
 800742a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007430:	f7fc fe38 	bl	80040a4 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007438:	f7fc fe34 	bl	80040a4 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e17a      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <HAL_RCC_OscConfig+0x508>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d108      	bne.n	8007470 <HAL_RCC_OscConfig+0x4d8>
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800746e:	e029      	b.n	80074c4 <HAL_RCC_OscConfig+0x52c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b05      	cmp	r3, #5
 8007476:	d115      	bne.n	80074a4 <HAL_RCC_OscConfig+0x50c>
 8007478:	4b08      	ldr	r3, [pc, #32]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	4a07      	ldr	r2, [pc, #28]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007480:	f043 0304 	orr.w	r3, r3, #4
 8007484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <HAL_RCC_OscConfig+0x504>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	4a03      	ldr	r2, [pc, #12]	; (800749c <HAL_RCC_OscConfig+0x504>)
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007498:	e014      	b.n	80074c4 <HAL_RCC_OscConfig+0x52c>
 800749a:	bf00      	nop
 800749c:	40021000 	.word	0x40021000
 80074a0:	40007000 	.word	0x40007000
 80074a4:	4b9c      	ldr	r3, [pc, #624]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	4a9b      	ldr	r2, [pc, #620]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80074ac:	f023 0301 	bic.w	r3, r3, #1
 80074b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074b4:	4b98      	ldr	r3, [pc, #608]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	4a97      	ldr	r2, [pc, #604]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80074bc:	f023 0304 	bic.w	r3, r3, #4
 80074c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d016      	beq.n	80074fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fc fdea 	bl	80040a4 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d4:	f7fc fde6 	bl	80040a4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e12a      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074ea:	4b8b      	ldr	r3, [pc, #556]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ed      	beq.n	80074d4 <HAL_RCC_OscConfig+0x53c>
 80074f8:	e015      	b.n	8007526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074fa:	f7fc fdd3 	bl	80040a4 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007500:	e00a      	b.n	8007518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007502:	f7fc fdcf 	bl	80040a4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e113      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007518:	4b7f      	ldr	r3, [pc, #508]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1ed      	bne.n	8007502 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d105      	bne.n	8007538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800752c:	4b7a      	ldr	r3, [pc, #488]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	4a79      	ldr	r2, [pc, #484]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007536:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80fe 	beq.w	800773e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	2b02      	cmp	r3, #2
 8007548:	f040 80d0 	bne.w	80076ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800754c:	4b72      	ldr	r3, [pc, #456]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f003 0203 	and.w	r2, r3, #3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	429a      	cmp	r2, r3
 800755e:	d130      	bne.n	80075c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	3b01      	subs	r3, #1
 800756c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800756e:	429a      	cmp	r2, r3
 8007570:	d127      	bne.n	80075c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800757e:	429a      	cmp	r2, r3
 8007580:	d11f      	bne.n	80075c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800758c:	2a07      	cmp	r2, #7
 800758e:	bf14      	ite	ne
 8007590:	2201      	movne	r2, #1
 8007592:	2200      	moveq	r2, #0
 8007594:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007596:	4293      	cmp	r3, r2
 8007598:	d113      	bne.n	80075c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d109      	bne.n	80075c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	3b01      	subs	r3, #1
 80075bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075be:	429a      	cmp	r2, r3
 80075c0:	d06e      	beq.n	80076a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d069      	beq.n	800769c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075c8:	4b53      	ldr	r3, [pc, #332]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d105      	bne.n	80075e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80075d4:	4b50      	ldr	r3, [pc, #320]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0ad      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80075e4:	4b4c      	ldr	r3, [pc, #304]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a4b      	ldr	r2, [pc, #300]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80075ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075f0:	f7fc fd58 	bl	80040a4 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fc fd54 	bl	80040a4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e09a      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800760a:	4b43      	ldr	r3, [pc, #268]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f0      	bne.n	80075f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007616:	4b40      	ldr	r3, [pc, #256]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	4b40      	ldr	r3, [pc, #256]	; (800771c <HAL_RCC_OscConfig+0x784>)
 800761c:	4013      	ands	r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007626:	3a01      	subs	r2, #1
 8007628:	0112      	lsls	r2, r2, #4
 800762a:	4311      	orrs	r1, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007630:	0212      	lsls	r2, r2, #8
 8007632:	4311      	orrs	r1, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007638:	0852      	lsrs	r2, r2, #1
 800763a:	3a01      	subs	r2, #1
 800763c:	0552      	lsls	r2, r2, #21
 800763e:	4311      	orrs	r1, r2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007644:	0852      	lsrs	r2, r2, #1
 8007646:	3a01      	subs	r2, #1
 8007648:	0652      	lsls	r2, r2, #25
 800764a:	4311      	orrs	r1, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007650:	0912      	lsrs	r2, r2, #4
 8007652:	0452      	lsls	r2, r2, #17
 8007654:	430a      	orrs	r2, r1
 8007656:	4930      	ldr	r1, [pc, #192]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 8007658:	4313      	orrs	r3, r2
 800765a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800765c:	4b2e      	ldr	r3, [pc, #184]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 8007662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007668:	4b2b      	ldr	r3, [pc, #172]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a2a      	ldr	r2, [pc, #168]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 800766e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007674:	f7fc fd16 	bl	80040a4 <HAL_GetTick>
 8007678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767a:	e008      	b.n	800768e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800767c:	f7fc fd12 	bl	80040a4 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e058      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800768e:	4b22      	ldr	r3, [pc, #136]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0f0      	beq.n	800767c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800769a:	e050      	b.n	800773e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e04f      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076a0:	4b1d      	ldr	r3, [pc, #116]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d148      	bne.n	800773e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076b8:	4b17      	ldr	r3, [pc, #92]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4a16      	ldr	r2, [pc, #88]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076c4:	f7fc fcee 	bl	80040a4 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076cc:	f7fc fcea 	bl	80040a4 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e030      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <HAL_RCC_OscConfig+0x734>
 80076ea:	e028      	b.n	800773e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d023      	beq.n	800773a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a08      	ldr	r2, [pc, #32]	; (8007718 <HAL_RCC_OscConfig+0x780>)
 80076f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fe:	f7fc fcd1 	bl	80040a4 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007704:	e00c      	b.n	8007720 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007706:	f7fc fccd 	bl	80040a4 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d905      	bls.n	8007720 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e013      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
 8007718:	40021000 	.word	0x40021000
 800771c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <HAL_RCC_OscConfig+0x7b0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1ec      	bne.n	8007706 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_RCC_OscConfig+0x7b0>)
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	4905      	ldr	r1, [pc, #20]	; (8007748 <HAL_RCC_OscConfig+0x7b0>)
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <HAL_RCC_OscConfig+0x7b4>)
 8007734:	4013      	ands	r3, r2
 8007736:	60cb      	str	r3, [r1, #12]
 8007738:	e001      	b.n	800773e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	feeefffc 	.word	0xfeeefffc

08007750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0e7      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007764:	4b75      	ldr	r3, [pc, #468]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d910      	bls.n	8007794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007772:	4b72      	ldr	r3, [pc, #456]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 0207 	bic.w	r2, r3, #7
 800777a:	4970      	ldr	r1, [pc, #448]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b6e      	ldr	r3, [pc, #440]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0cf      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d010      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	4b66      	ldr	r3, [pc, #408]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d908      	bls.n	80077c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077b0:	4b63      	ldr	r3, [pc, #396]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	4960      	ldr	r1, [pc, #384]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d04c      	beq.n	8007868 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d107      	bne.n	80077e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077d6:	4b5a      	ldr	r3, [pc, #360]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d121      	bne.n	8007826 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0a6      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d107      	bne.n	80077fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ee:	4b54      	ldr	r3, [pc, #336]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d115      	bne.n	8007826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e09a      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d107      	bne.n	8007816 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007806:	4b4e      	ldr	r3, [pc, #312]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d109      	bne.n	8007826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e08e      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007816:	4b4a      	ldr	r3, [pc, #296]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e086      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007826:	4b46      	ldr	r3, [pc, #280]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f023 0203 	bic.w	r2, r3, #3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	4943      	ldr	r1, [pc, #268]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007834:	4313      	orrs	r3, r2
 8007836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007838:	f7fc fc34 	bl	80040a4 <HAL_GetTick>
 800783c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783e:	e00a      	b.n	8007856 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007840:	f7fc fc30 	bl	80040a4 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f241 3288 	movw	r2, #5000	; 0x1388
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e06e      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007856:	4b3a      	ldr	r3, [pc, #232]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 020c 	and.w	r2, r3, #12
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	429a      	cmp	r2, r3
 8007866:	d1eb      	bne.n	8007840 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007880:	429a      	cmp	r2, r3
 8007882:	d208      	bcs.n	8007896 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007884:	4b2e      	ldr	r3, [pc, #184]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	492b      	ldr	r1, [pc, #172]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007892:	4313      	orrs	r3, r2
 8007894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007896:	4b29      	ldr	r3, [pc, #164]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d210      	bcs.n	80078c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a4:	4b25      	ldr	r3, [pc, #148]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f023 0207 	bic.w	r2, r3, #7
 80078ac:	4923      	ldr	r1, [pc, #140]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b4:	4b21      	ldr	r3, [pc, #132]	; (800793c <HAL_RCC_ClockConfig+0x1ec>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d001      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e036      	b.n	8007934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078d2:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	4918      	ldr	r1, [pc, #96]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4910      	ldr	r1, [pc, #64]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 8007900:	4313      	orrs	r3, r2
 8007902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007904:	f000 f824 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <HAL_RCC_ClockConfig+0x1f0>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	490b      	ldr	r1, [pc, #44]	; (8007944 <HAL_RCC_ClockConfig+0x1f4>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
 8007920:	4a09      	ldr	r2, [pc, #36]	; (8007948 <HAL_RCC_ClockConfig+0x1f8>)
 8007922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007924:	4b09      	ldr	r3, [pc, #36]	; (800794c <HAL_RCC_ClockConfig+0x1fc>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f7fc fb6b 	bl	8004004 <HAL_InitTick>
 800792e:	4603      	mov	r3, r0
 8007930:	72fb      	strb	r3, [r7, #11]

  return status;
 8007932:	7afb      	ldrb	r3, [r7, #11]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40022000 	.word	0x40022000
 8007940:	40021000 	.word	0x40021000
 8007944:	0800af9c 	.word	0x0800af9c
 8007948:	20000008 	.word	0x20000008
 800794c:	20000034 	.word	0x20000034

08007950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	b089      	sub	sp, #36	; 0x24
 8007954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800795e:	4b3e      	ldr	r3, [pc, #248]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 030c 	and.w	r3, r3, #12
 8007966:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_RCC_GetSysClockFreq+0x34>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d121      	bne.n	80079c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d11e      	bne.n	80079c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007984:	4b34      	ldr	r3, [pc, #208]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	e005      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80079a0:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	091b      	lsrs	r3, r3, #4
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x10c>)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10d      	bne.n	80079d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079c0:	e00a      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d102      	bne.n	80079ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	e004      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80079d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b0c      	cmp	r3, #12
 80079dc:	d134      	bne.n	8007a48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079de:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d003      	beq.n	80079f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d003      	beq.n	80079fc <HAL_RCC_GetSysClockFreq+0xac>
 80079f4:	e005      	b.n	8007a02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80079f6:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80079f8:	617b      	str	r3, [r7, #20]
      break;
 80079fa:	e005      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80079fc:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80079fe:	617b      	str	r3, [r7, #20]
      break;
 8007a00:	e002      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	617b      	str	r3, [r7, #20]
      break;
 8007a06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a08:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	3301      	adds	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a16:	4b10      	ldr	r3, [pc, #64]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	fb03 f202 	mul.w	r2, r3, r2
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	0e5b      	lsrs	r3, r3, #25
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	3301      	adds	r3, #1
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a48:	69bb      	ldr	r3, [r7, #24]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3724      	adds	r7, #36	; 0x24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	0800afb4 	.word	0x0800afb4
 8007a60:	00f42400 	.word	0x00f42400
 8007a64:	007a1200 	.word	0x007a1200

08007a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a6c:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000008 	.word	0x20000008

08007a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a84:	f7ff fff0 	bl	8007a68 <HAL_RCC_GetHCLKFreq>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a96:	5ccb      	ldrb	r3, [r1, r3]
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	0800afac 	.word	0x0800afac

08007aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ab0:	f7ff ffda 	bl	8007a68 <HAL_RCC_GetHCLKFreq>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	0adb      	lsrs	r3, r3, #11
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	4904      	ldr	r1, [pc, #16]	; (8007ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ac2:	5ccb      	ldrb	r3, [r1, r3]
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	0800afac 	.word	0x0800afac

08007ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ae4:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007af0:	f7fe fd02 	bl	80064f8 <HAL_PWREx_GetVoltageRange>
 8007af4:	6178      	str	r0, [r7, #20]
 8007af6:	e014      	b.n	8007b22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	6593      	str	r3, [r2, #88]	; 0x58
 8007b04:	4b22      	ldr	r3, [pc, #136]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b10:	f7fe fcf2 	bl	80064f8 <HAL_PWREx_GetVoltageRange>
 8007b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b16:	4b1e      	ldr	r3, [pc, #120]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b28:	d10b      	bne.n	8007b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d919      	bls.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2ba0      	cmp	r3, #160	; 0xa0
 8007b34:	d902      	bls.n	8007b3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b36:	2302      	movs	r3, #2
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e013      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	e010      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d902      	bls.n	8007b4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007b48:	2303      	movs	r3, #3
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e00a      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	d102      	bne.n	8007b5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b54:	2302      	movs	r3, #2
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	e004      	b.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b70      	cmp	r3, #112	; 0x70
 8007b5e:	d101      	bne.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b60:	2301      	movs	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f023 0207 	bic.w	r2, r3, #7
 8007b6c:	4909      	ldr	r1, [pc, #36]	; (8007b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d001      	beq.n	8007b86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40021000 	.word	0x40021000
 8007b94:	40022000 	.word	0x40022000

08007b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d041      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bbc:	d02a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bc2:	d824      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc8:	d008      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bce:	d81e      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d010      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007bda:	e018      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bdc:	4b86      	ldr	r3, [pc, #536]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a85      	ldr	r2, [pc, #532]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007be8:	e015      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3304      	adds	r3, #4
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 facb 	bl	800818c <RCCEx_PLLSAI1_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007bfa:	e00c      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3320      	adds	r3, #32
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fbb6 	bl	8008374 <RCCEx_PLLSAI2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	74fb      	strb	r3, [r7, #19]
      break;
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c16:	7cfb      	ldrb	r3, [r7, #19]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c1c:	4b76      	ldr	r3, [pc, #472]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2a:	4973      	ldr	r1, [pc, #460]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c32:	e001      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	7cfb      	ldrb	r3, [r7, #19]
 8007c36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d041      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c4c:	d02a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007c4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c52:	d824      	bhi.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c58:	d008      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c5e:	d81e      	bhi.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c68:	d010      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007c6a:	e018      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c6c:	4b62      	ldr	r3, [pc, #392]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a61      	ldr	r2, [pc, #388]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c78:	e015      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fa83 	bl	800818c <RCCEx_PLLSAI1_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c8a:	e00c      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3320      	adds	r3, #32
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fb6e 	bl	8008374 <RCCEx_PLLSAI2_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c9c:	e003      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca6:	7cfb      	ldrb	r3, [r7, #19]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cac:	4b52      	ldr	r3, [pc, #328]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cba:	494f      	ldr	r1, [pc, #316]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cc2:	e001      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80a0 	beq.w	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cda:	4b47      	ldr	r3, [pc, #284]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf0:	4b41      	ldr	r3, [pc, #260]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf4:	4a40      	ldr	r2, [pc, #256]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfc:	4b3e      	ldr	r3, [pc, #248]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d0c:	4b3b      	ldr	r3, [pc, #236]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a3a      	ldr	r2, [pc, #232]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d18:	f7fc f9c4 	bl	80040a4 <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d1e:	e009      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d20:	f7fc f9c0 	bl	80040a4 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d902      	bls.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	74fb      	strb	r3, [r7, #19]
        break;
 8007d32:	e005      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d34:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0ef      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007d40:	7cfb      	ldrb	r3, [r7, #19]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d15c      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d46:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01f      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d019      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	4a20      	ldr	r2, [pc, #128]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d80:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d86:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da2:	f7fc f97f 	bl	80040a4 <HAL_GetTick>
 8007da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007da8:	e00b      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007daa:	f7fc f97b 	bl	80040a4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d902      	bls.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8007dc0:	e006      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0ec      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007dd0:	7cfb      	ldrb	r3, [r7, #19]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dd6:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de6:	4904      	ldr	r1, [pc, #16]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007dee:	e009      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007df0:	7cfb      	ldrb	r3, [r7, #19]
 8007df2:	74bb      	strb	r3, [r7, #18]
 8007df4:	e006      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007df6:	bf00      	nop
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e00:	7cfb      	ldrb	r3, [r7, #19]
 8007e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e04:	7c7b      	ldrb	r3, [r7, #17]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d105      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e0a:	4b9e      	ldr	r3, [pc, #632]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0e:	4a9d      	ldr	r2, [pc, #628]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e22:	4b98      	ldr	r3, [pc, #608]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	f023 0203 	bic.w	r2, r3, #3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	4994      	ldr	r1, [pc, #592]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e44:	4b8f      	ldr	r3, [pc, #572]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4a:	f023 020c 	bic.w	r2, r3, #12
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e52:	498c      	ldr	r1, [pc, #560]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e66:	4b87      	ldr	r3, [pc, #540]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	4983      	ldr	r1, [pc, #524]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e88:	4b7e      	ldr	r3, [pc, #504]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	497b      	ldr	r1, [pc, #492]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007eaa:	4b76      	ldr	r3, [pc, #472]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb8:	4972      	ldr	r1, [pc, #456]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ecc:	4b6d      	ldr	r3, [pc, #436]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eda:	496a      	ldr	r1, [pc, #424]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	4961      	ldr	r1, [pc, #388]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f10:	4b5c      	ldr	r3, [pc, #368]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	4959      	ldr	r1, [pc, #356]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f32:	4b54      	ldr	r3, [pc, #336]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f40:	4950      	ldr	r1, [pc, #320]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f54:	4b4b      	ldr	r3, [pc, #300]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f62:	4948      	ldr	r1, [pc, #288]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f76:	4b43      	ldr	r3, [pc, #268]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f84:	493f      	ldr	r1, [pc, #252]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d028      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f98:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa6:	4937      	ldr	r1, [pc, #220]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fb8:	4b32      	ldr	r3, [pc, #200]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	4a31      	ldr	r2, [pc, #196]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc2:	60d3      	str	r3, [r2, #12]
 8007fc4:	e011      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fce:	d10c      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f8d8 	bl	800818c <RCCEx_PLLSAI1_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007fe0:	7cfb      	ldrb	r3, [r7, #19]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007fe6:	7cfb      	ldrb	r3, [r7, #19]
 8007fe8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d028      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008004:	491f      	ldr	r1, [pc, #124]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008006:	4313      	orrs	r3, r2
 8008008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008014:	d106      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008016:	4b1b      	ldr	r3, [pc, #108]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800801c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008020:	60d3      	str	r3, [r2, #12]
 8008022:	e011      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800802c:	d10c      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	2101      	movs	r1, #1
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8a9 	bl	800818c <RCCEx_PLLSAI1_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800803e:	7cfb      	ldrb	r3, [r7, #19]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008044:	7cfb      	ldrb	r3, [r7, #19]
 8008046:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d02b      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008062:	4908      	ldr	r1, [pc, #32]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d109      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008074:	4b03      	ldr	r3, [pc, #12]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4a02      	ldr	r2, [pc, #8]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800807a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800807e:	60d3      	str	r3, [r2, #12]
 8008080:	e014      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008082:	bf00      	nop
 8008084:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008090:	d10c      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3304      	adds	r3, #4
 8008096:	2101      	movs	r1, #1
 8008098:	4618      	mov	r0, r3
 800809a:	f000 f877 	bl	800818c <RCCEx_PLLSAI1_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080a2:	7cfb      	ldrb	r3, [r7, #19]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80080a8:	7cfb      	ldrb	r3, [r7, #19]
 80080aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d02f      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080b8:	4b2b      	ldr	r3, [pc, #172]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080c6:	4928      	ldr	r1, [pc, #160]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080d6:	d10d      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f854 	bl	800818c <RCCEx_PLLSAI1_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080e8:	7cfb      	ldrb	r3, [r7, #19]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d014      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80080ee:	7cfb      	ldrb	r3, [r7, #19]
 80080f0:	74bb      	strb	r3, [r7, #18]
 80080f2:	e011      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080fc:	d10c      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3320      	adds	r3, #32
 8008102:	2102      	movs	r1, #2
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f935 	bl	8008374 <RCCEx_PLLSAI2_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800810e:	7cfb      	ldrb	r3, [r7, #19]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008114:	7cfb      	ldrb	r3, [r7, #19]
 8008116:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008132:	490d      	ldr	r1, [pc, #52]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008134:	4313      	orrs	r3, r2
 8008136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008156:	4904      	ldr	r1, [pc, #16]	; (8008168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008158:	4313      	orrs	r3, r2
 800815a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800815e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40021000 	.word	0x40021000

0800816c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a04      	ldr	r2, [pc, #16]	; (8008188 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008176:	f043 0304 	orr.w	r3, r3, #4
 800817a:	6013      	str	r3, [r2, #0]
}
 800817c:	bf00      	nop
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	40021000 	.word	0x40021000

0800818c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800819a:	4b75      	ldr	r3, [pc, #468]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d018      	beq.n	80081d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80081a6:	4b72      	ldr	r3, [pc, #456]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0203 	and.w	r2, r3, #3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d10d      	bne.n	80081d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
       ||
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80081be:	4b6c      	ldr	r3, [pc, #432]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	091b      	lsrs	r3, r3, #4
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
       ||
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d047      	beq.n	8008262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	e044      	b.n	8008262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d018      	beq.n	8008212 <RCCEx_PLLSAI1_Config+0x86>
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d825      	bhi.n	8008230 <RCCEx_PLLSAI1_Config+0xa4>
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d002      	beq.n	80081ee <RCCEx_PLLSAI1_Config+0x62>
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d009      	beq.n	8008200 <RCCEx_PLLSAI1_Config+0x74>
 80081ec:	e020      	b.n	8008230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081ee:	4b60      	ldr	r3, [pc, #384]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081fe:	e01a      	b.n	8008236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008200:	4b5b      	ldr	r3, [pc, #364]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008208:	2b00      	cmp	r3, #0
 800820a:	d116      	bne.n	800823a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008210:	e013      	b.n	800823a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008212:	4b57      	ldr	r3, [pc, #348]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10f      	bne.n	800823e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800821e:	4b54      	ldr	r3, [pc, #336]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800822e:	e006      	b.n	800823e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e004      	b.n	8008240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008236:	bf00      	nop
 8008238:	e002      	b.n	8008240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800823a:	bf00      	nop
 800823c:	e000      	b.n	8008240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800823e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10d      	bne.n	8008262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008246:	4b4a      	ldr	r3, [pc, #296]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	3b01      	subs	r3, #1
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	430b      	orrs	r3, r1
 800825c:	4944      	ldr	r1, [pc, #272]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800825e:	4313      	orrs	r3, r2
 8008260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d17d      	bne.n	8008364 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008268:	4b41      	ldr	r3, [pc, #260]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a40      	ldr	r2, [pc, #256]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800826e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008274:	f7fb ff16 	bl	80040a4 <HAL_GetTick>
 8008278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800827a:	e009      	b.n	8008290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800827c:	f7fb ff12 	bl	80040a4 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d902      	bls.n	8008290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	73fb      	strb	r3, [r7, #15]
        break;
 800828e:	e005      	b.n	800829c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008290:	4b37      	ldr	r3, [pc, #220]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1ef      	bne.n	800827c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d160      	bne.n	8008364 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d111      	bne.n	80082cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082a8:	4b31      	ldr	r3, [pc, #196]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80082b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6892      	ldr	r2, [r2, #8]
 80082b8:	0211      	lsls	r1, r2, #8
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	68d2      	ldr	r2, [r2, #12]
 80082be:	0912      	lsrs	r2, r2, #4
 80082c0:	0452      	lsls	r2, r2, #17
 80082c2:	430a      	orrs	r2, r1
 80082c4:	492a      	ldr	r1, [pc, #168]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	610b      	str	r3, [r1, #16]
 80082ca:	e027      	b.n	800831c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d112      	bne.n	80082f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082d2:	4b27      	ldr	r3, [pc, #156]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80082da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6892      	ldr	r2, [r2, #8]
 80082e2:	0211      	lsls	r1, r2, #8
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6912      	ldr	r2, [r2, #16]
 80082e8:	0852      	lsrs	r2, r2, #1
 80082ea:	3a01      	subs	r2, #1
 80082ec:	0552      	lsls	r2, r2, #21
 80082ee:	430a      	orrs	r2, r1
 80082f0:	491f      	ldr	r1, [pc, #124]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	610b      	str	r3, [r1, #16]
 80082f6:	e011      	b.n	800831c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6892      	ldr	r2, [r2, #8]
 8008308:	0211      	lsls	r1, r2, #8
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6952      	ldr	r2, [r2, #20]
 800830e:	0852      	lsrs	r2, r2, #1
 8008310:	3a01      	subs	r2, #1
 8008312:	0652      	lsls	r2, r2, #25
 8008314:	430a      	orrs	r2, r1
 8008316:	4916      	ldr	r1, [pc, #88]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008318:	4313      	orrs	r3, r2
 800831a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800831c:	4b14      	ldr	r3, [pc, #80]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a13      	ldr	r2, [pc, #76]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008328:	f7fb febc 	bl	80040a4 <HAL_GetTick>
 800832c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800832e:	e009      	b.n	8008344 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008330:	f7fb feb8 	bl	80040a4 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d902      	bls.n	8008344 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	73fb      	strb	r3, [r7, #15]
          break;
 8008342:	e005      	b.n	8008350 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0ef      	beq.n	8008330 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	4904      	ldr	r1, [pc, #16]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008360:	4313      	orrs	r3, r2
 8008362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40021000 	.word	0x40021000

08008374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800838e:	4b67      	ldr	r3, [pc, #412]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0203 	and.w	r2, r3, #3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d10d      	bne.n	80083ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
       ||
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80083a6:	4b61      	ldr	r3, [pc, #388]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	091b      	lsrs	r3, r3, #4
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
       ||
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d047      	beq.n	800844a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	e044      	b.n	800844a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d018      	beq.n	80083fa <RCCEx_PLLSAI2_Config+0x86>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d825      	bhi.n	8008418 <RCCEx_PLLSAI2_Config+0xa4>
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d002      	beq.n	80083d6 <RCCEx_PLLSAI2_Config+0x62>
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d009      	beq.n	80083e8 <RCCEx_PLLSAI2_Config+0x74>
 80083d4:	e020      	b.n	8008418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80083d6:	4b55      	ldr	r3, [pc, #340]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11d      	bne.n	800841e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083e6:	e01a      	b.n	800841e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80083e8:	4b50      	ldr	r3, [pc, #320]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d116      	bne.n	8008422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f8:	e013      	b.n	8008422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80083fa:	4b4c      	ldr	r3, [pc, #304]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10f      	bne.n	8008426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008406:	4b49      	ldr	r3, [pc, #292]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008416:	e006      	b.n	8008426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
      break;
 800841c:	e004      	b.n	8008428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800841e:	bf00      	nop
 8008420:	e002      	b.n	8008428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008422:	bf00      	nop
 8008424:	e000      	b.n	8008428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008426:	bf00      	nop
    }

    if(status == HAL_OK)
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10d      	bne.n	800844a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800842e:	4b3f      	ldr	r3, [pc, #252]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	3b01      	subs	r3, #1
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	430b      	orrs	r3, r1
 8008444:	4939      	ldr	r1, [pc, #228]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008446:	4313      	orrs	r3, r2
 8008448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d167      	bne.n	8008520 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008450:	4b36      	ldr	r3, [pc, #216]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a35      	ldr	r2, [pc, #212]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845c:	f7fb fe22 	bl	80040a4 <HAL_GetTick>
 8008460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008462:	e009      	b.n	8008478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008464:	f7fb fe1e 	bl	80040a4 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d902      	bls.n	8008478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	73fb      	strb	r3, [r7, #15]
        break;
 8008476:	e005      	b.n	8008484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008478:	4b2c      	ldr	r3, [pc, #176]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1ef      	bne.n	8008464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d14a      	bne.n	8008520 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d111      	bne.n	80084b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008490:	4b26      	ldr	r3, [pc, #152]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6892      	ldr	r2, [r2, #8]
 80084a0:	0211      	lsls	r1, r2, #8
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68d2      	ldr	r2, [r2, #12]
 80084a6:	0912      	lsrs	r2, r2, #4
 80084a8:	0452      	lsls	r2, r2, #17
 80084aa:	430a      	orrs	r2, r1
 80084ac:	491f      	ldr	r1, [pc, #124]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	614b      	str	r3, [r1, #20]
 80084b2:	e011      	b.n	80084d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80084b4:	4b1d      	ldr	r3, [pc, #116]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80084bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
 80084c4:	0211      	lsls	r1, r2, #8
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6912      	ldr	r2, [r2, #16]
 80084ca:	0852      	lsrs	r2, r2, #1
 80084cc:	3a01      	subs	r2, #1
 80084ce:	0652      	lsls	r2, r2, #25
 80084d0:	430a      	orrs	r2, r1
 80084d2:	4916      	ldr	r1, [pc, #88]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80084d8:	4b14      	ldr	r3, [pc, #80]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a13      	ldr	r2, [pc, #76]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e4:	f7fb fdde 	bl	80040a4 <HAL_GetTick>
 80084e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80084ea:	e009      	b.n	8008500 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084ec:	f7fb fdda 	bl	80040a4 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d902      	bls.n	8008500 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	73fb      	strb	r3, [r7, #15]
          break;
 80084fe:	e005      	b.n	800850c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0ef      	beq.n	80084ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	4904      	ldr	r1, [pc, #16]	; (800852c <RCCEx_PLLSAI2_Config+0x1b8>)
 800851c:	4313      	orrs	r3, r2
 800851e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40021000 	.word	0x40021000

08008530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e095      	b.n	800866e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d108      	bne.n	800855c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008552:	d009      	beq.n	8008568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	61da      	str	r2, [r3, #28]
 800855a:	e005      	b.n	8008568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d106      	bne.n	8008588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f877 	bl	8008676 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085a8:	d902      	bls.n	80085b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e002      	b.n	80085b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80085b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80085be:	d007      	beq.n	80085d0 <HAL_SPI_Init+0xa0>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085c8:	d002      	beq.n	80085d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	ea42 0103 	orr.w	r1, r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	0c1b      	lsrs	r3, r3, #16
 800862c:	f003 0204 	and.w	r2, r3, #4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800864c:	ea42 0103 	orr.w	r1, r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b08a      	sub	sp, #40	; 0x28
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008698:	2301      	movs	r3, #1
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_SPI_TransmitReceive+0x26>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e20a      	b.n	8008ac6 <HAL_SPI_TransmitReceive+0x43c>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086b8:	f7fb fcf4 	bl	80040a4 <HAL_GetTick>
 80086bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80086d0:	887b      	ldrh	r3, [r7, #2]
 80086d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086d4:	7efb      	ldrb	r3, [r7, #27]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d00e      	beq.n	80086f8 <HAL_SPI_TransmitReceive+0x6e>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e0:	d106      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x66>
 80086ea:	7efb      	ldrb	r3, [r7, #27]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d003      	beq.n	80086f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
 80086f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80086f6:	e1e0      	b.n	8008aba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_SPI_TransmitReceive+0x80>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <HAL_SPI_TransmitReceive+0x80>
 8008704:	887b      	ldrh	r3, [r7, #2]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008710:	e1d3      	b.n	8008aba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b04      	cmp	r3, #4
 800871c:	d003      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2205      	movs	r2, #5
 8008722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	887a      	ldrh	r2, [r7, #2]
 8008736:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	887a      	ldrh	r2, [r7, #2]
 800873e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	887a      	ldrh	r2, [r7, #2]
 800874c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	887a      	ldrh	r2, [r7, #2]
 8008752:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008768:	d802      	bhi.n	8008770 <HAL_SPI_TransmitReceive+0xe6>
 800876a:	8a3b      	ldrh	r3, [r7, #16]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d908      	bls.n	8008782 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800877e:	605a      	str	r2, [r3, #4]
 8008780:	e007      	b.n	8008792 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008790:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d007      	beq.n	80087b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087b8:	f240 8081 	bls.w	80088be <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_SPI_TransmitReceive+0x140>
 80087c4:	8a7b      	ldrh	r3, [r7, #18]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d16d      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	1c9a      	adds	r2, r3, #2
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ee:	e05a      	b.n	80088a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d11b      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x1ac>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008802:	b29b      	uxth	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d016      	beq.n	8008836 <HAL_SPI_TransmitReceive+0x1ac>
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	2b01      	cmp	r3, #1
 800880c:	d113      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b01      	cmp	r3, #1
 8008842:	d11c      	bne.n	800887e <HAL_SPI_TransmitReceive+0x1f4>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d016      	beq.n	800887e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	b292      	uxth	r2, r2
 800885c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800887a:	2301      	movs	r3, #1
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800887e:	f7fb fc11 	bl	80040a4 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	429a      	cmp	r2, r3
 800888c:	d80b      	bhi.n	80088a6 <HAL_SPI_TransmitReceive+0x21c>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008894:	d007      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80088a4:	e109      	b.n	8008aba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d19f      	bne.n	80087f0 <HAL_SPI_TransmitReceive+0x166>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d199      	bne.n	80087f0 <HAL_SPI_TransmitReceive+0x166>
 80088bc:	e0e3      	b.n	8008a86 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_SPI_TransmitReceive+0x244>
 80088c6:	8a7b      	ldrh	r3, [r7, #18]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 80cf 	bne.w	8008a6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d912      	bls.n	80088fe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	881a      	ldrh	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	1c9a      	adds	r2, r3, #2
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	3b02      	subs	r3, #2
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088fc:	e0b6      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008924:	e0a2      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b02      	cmp	r3, #2
 8008932:	d134      	bne.n	800899e <HAL_SPI_TransmitReceive+0x314>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02f      	beq.n	800899e <HAL_SPI_TransmitReceive+0x314>
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	2b01      	cmp	r3, #1
 8008942:	d12c      	bne.n	800899e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b01      	cmp	r3, #1
 800894c:	d912      	bls.n	8008974 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	881a      	ldrh	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	1c9a      	adds	r2, r3, #2
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b02      	subs	r3, #2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008972:	e012      	b.n	800899a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	330c      	adds	r3, #12
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008990:	b29b      	uxth	r3, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d148      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x3b4>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d042      	beq.n	8008a3e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d923      	bls.n	8008a0c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	b292      	uxth	r2, r2
 80089d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	1c9a      	adds	r2, r3, #2
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b02      	subs	r3, #2
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d81f      	bhi.n	8008a3a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	e016      	b.n	8008a3a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f103 020c 	add.w	r2, r3, #12
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a3e:	f7fb fb31 	bl	80040a4 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d803      	bhi.n	8008a56 <HAL_SPI_TransmitReceive+0x3cc>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a54:	d102      	bne.n	8008a5c <HAL_SPI_TransmitReceive+0x3d2>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d107      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008a6a:	e026      	b.n	8008aba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f47f af57 	bne.w	8008926 <HAL_SPI_TransmitReceive+0x29c>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f af50 	bne.w	8008926 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f94c 	bl	8008d28 <SPI_EndRxTxTransaction>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ab0:	e003      	b.n	8008aba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3728      	adds	r7, #40	; 0x28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008adc:	b2db      	uxtb	r3, r3
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
	...

08008aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	4613      	mov	r3, r2
 8008afa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008afc:	f7fb fad2 	bl	80040a4 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4413      	add	r3, r2
 8008b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b0c:	f7fb faca 	bl	80040a4 <HAL_GetTick>
 8008b10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b12:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	015b      	lsls	r3, r3, #5
 8008b18:	0d1b      	lsrs	r3, r3, #20
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b22:	e054      	b.n	8008bce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2a:	d050      	beq.n	8008bce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b2c:	f7fb faba 	bl	80040a4 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d902      	bls.n	8008b42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d13d      	bne.n	8008bbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b5a:	d111      	bne.n	8008b80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b64:	d004      	beq.n	8008b70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6e:	d107      	bne.n	8008b80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b88:	d10f      	bne.n	8008baa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e017      	b.n	8008bee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	bf0c      	ite	eq
 8008bde:	2301      	moveq	r3, #1
 8008be0:	2300      	movne	r3, #0
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d19b      	bne.n	8008b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000008 	.word	0x20000008

08008bfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08a      	sub	sp, #40	; 0x28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008c0e:	f7fb fa49 	bl	80040a4 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	1a9b      	subs	r3, r3, r2
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008c1e:	f7fb fa41 	bl	80040a4 <HAL_GetTick>
 8008c22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008c2c:	4b3d      	ldr	r3, [pc, #244]	; (8008d24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	00da      	lsls	r2, r3, #3
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	0d1b      	lsrs	r3, r3, #20
 8008c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3e:	fb02 f303 	mul.w	r3, r2, r3
 8008c42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c44:	e060      	b.n	8008d08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c4c:	d107      	bne.n	8008c5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c64:	d050      	beq.n	8008d08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c66:	f7fb fa1d 	bl	80040a4 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d902      	bls.n	8008c7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d13d      	bne.n	8008cf8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c94:	d111      	bne.n	8008cba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c9e:	d004      	beq.n	8008caa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca8:	d107      	bne.n	8008cba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc2:	d10f      	bne.n	8008ce4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ce2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e010      	b.n	8008d1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	4013      	ands	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d196      	bne.n	8008c46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3728      	adds	r7, #40	; 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000008 	.word	0x20000008

08008d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff ff5b 	bl	8008bfc <SPI_WaitFifoStateUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d007      	beq.n	8008d5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d50:	f043 0220 	orr.w	r2, r3, #32
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e027      	b.n	8008dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	2180      	movs	r1, #128	; 0x80
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fec0 	bl	8008aec <SPI_WaitFlagStateUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d76:	f043 0220 	orr.w	r2, r3, #32
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e014      	b.n	8008dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff ff34 	bl	8008bfc <SPI_WaitFifoStateUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e000      	b.n	8008dac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e040      	b.n	8008e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f9 fef6 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2224      	movs	r2, #36	; 0x24
 8008de0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fae0 	bl	80093c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f825 	bl	8008e50 <UART_SetConfig>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e01b      	b.n	8008e48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0201 	orr.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb5f 	bl	8009504 <UART_CheckIdleState>
 8008e46:	4603      	mov	r3, r0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e54:	b08a      	sub	sp, #40	; 0x28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4ba4      	ldr	r3, [pc, #656]	; (8009110 <UART_SetConfig+0x2c0>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a99      	ldr	r2, [pc, #612]	; (8009114 <UART_SetConfig+0x2c4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a90      	ldr	r2, [pc, #576]	; (8009118 <UART_SetConfig+0x2c8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d126      	bne.n	8008f28 <UART_SetConfig+0xd8>
 8008eda:	4b90      	ldr	r3, [pc, #576]	; (800911c <UART_SetConfig+0x2cc>)
 8008edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d81b      	bhi.n	8008f20 <UART_SetConfig+0xd0>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0xa0>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f01 	.word	0x08008f01
 8008ef4:	08008f11 	.word	0x08008f11
 8008ef8:	08008f09 	.word	0x08008f09
 8008efc:	08008f19 	.word	0x08008f19
 8008f00:	2301      	movs	r3, #1
 8008f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f06:	e116      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f0e:	e112      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f10:	2304      	movs	r3, #4
 8008f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f16:	e10e      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f18:	2308      	movs	r3, #8
 8008f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f1e:	e10a      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f20:	2310      	movs	r3, #16
 8008f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f26:	e106      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a7c      	ldr	r2, [pc, #496]	; (8009120 <UART_SetConfig+0x2d0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d138      	bne.n	8008fa4 <UART_SetConfig+0x154>
 8008f32:	4b7a      	ldr	r3, [pc, #488]	; (800911c <UART_SetConfig+0x2cc>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f38:	f003 030c 	and.w	r3, r3, #12
 8008f3c:	2b0c      	cmp	r3, #12
 8008f3e:	d82d      	bhi.n	8008f9c <UART_SetConfig+0x14c>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <UART_SetConfig+0xf8>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f7d 	.word	0x08008f7d
 8008f4c:	08008f9d 	.word	0x08008f9d
 8008f50:	08008f9d 	.word	0x08008f9d
 8008f54:	08008f9d 	.word	0x08008f9d
 8008f58:	08008f8d 	.word	0x08008f8d
 8008f5c:	08008f9d 	.word	0x08008f9d
 8008f60:	08008f9d 	.word	0x08008f9d
 8008f64:	08008f9d 	.word	0x08008f9d
 8008f68:	08008f85 	.word	0x08008f85
 8008f6c:	08008f9d 	.word	0x08008f9d
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008f95 	.word	0x08008f95
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f82:	e0d8      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f84:	2302      	movs	r3, #2
 8008f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f8a:	e0d4      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f92:	e0d0      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f9a:	e0cc      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fa2:	e0c8      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a5e      	ldr	r2, [pc, #376]	; (8009124 <UART_SetConfig+0x2d4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d125      	bne.n	8008ffa <UART_SetConfig+0x1aa>
 8008fae:	4b5b      	ldr	r3, [pc, #364]	; (800911c <UART_SetConfig+0x2cc>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d016      	beq.n	8008fea <UART_SetConfig+0x19a>
 8008fbc:	2b30      	cmp	r3, #48	; 0x30
 8008fbe:	d818      	bhi.n	8008ff2 <UART_SetConfig+0x1a2>
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d00a      	beq.n	8008fda <UART_SetConfig+0x18a>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d814      	bhi.n	8008ff2 <UART_SetConfig+0x1a2>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <UART_SetConfig+0x182>
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d008      	beq.n	8008fe2 <UART_SetConfig+0x192>
 8008fd0:	e00f      	b.n	8008ff2 <UART_SetConfig+0x1a2>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fd8:	e0ad      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008fda:	2302      	movs	r3, #2
 8008fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe0:	e0a9      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe8:	e0a5      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008fea:	2308      	movs	r3, #8
 8008fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ff0:	e0a1      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ff8:	e09d      	b.n	8009136 <UART_SetConfig+0x2e6>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a4a      	ldr	r2, [pc, #296]	; (8009128 <UART_SetConfig+0x2d8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d125      	bne.n	8009050 <UART_SetConfig+0x200>
 8009004:	4b45      	ldr	r3, [pc, #276]	; (800911c <UART_SetConfig+0x2cc>)
 8009006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800900e:	2bc0      	cmp	r3, #192	; 0xc0
 8009010:	d016      	beq.n	8009040 <UART_SetConfig+0x1f0>
 8009012:	2bc0      	cmp	r3, #192	; 0xc0
 8009014:	d818      	bhi.n	8009048 <UART_SetConfig+0x1f8>
 8009016:	2b80      	cmp	r3, #128	; 0x80
 8009018:	d00a      	beq.n	8009030 <UART_SetConfig+0x1e0>
 800901a:	2b80      	cmp	r3, #128	; 0x80
 800901c:	d814      	bhi.n	8009048 <UART_SetConfig+0x1f8>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <UART_SetConfig+0x1d8>
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d008      	beq.n	8009038 <UART_SetConfig+0x1e8>
 8009026:	e00f      	b.n	8009048 <UART_SetConfig+0x1f8>
 8009028:	2300      	movs	r3, #0
 800902a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800902e:	e082      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009030:	2302      	movs	r3, #2
 8009032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009036:	e07e      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009038:	2304      	movs	r3, #4
 800903a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800903e:	e07a      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009040:	2308      	movs	r3, #8
 8009042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009046:	e076      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009048:	2310      	movs	r3, #16
 800904a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904e:	e072      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a35      	ldr	r2, [pc, #212]	; (800912c <UART_SetConfig+0x2dc>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d12a      	bne.n	80090b0 <UART_SetConfig+0x260>
 800905a:	4b30      	ldr	r3, [pc, #192]	; (800911c <UART_SetConfig+0x2cc>)
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009068:	d01a      	beq.n	80090a0 <UART_SetConfig+0x250>
 800906a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800906e:	d81b      	bhi.n	80090a8 <UART_SetConfig+0x258>
 8009070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009074:	d00c      	beq.n	8009090 <UART_SetConfig+0x240>
 8009076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800907a:	d815      	bhi.n	80090a8 <UART_SetConfig+0x258>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <UART_SetConfig+0x238>
 8009080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009084:	d008      	beq.n	8009098 <UART_SetConfig+0x248>
 8009086:	e00f      	b.n	80090a8 <UART_SetConfig+0x258>
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800908e:	e052      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009090:	2302      	movs	r3, #2
 8009092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009096:	e04e      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009098:	2304      	movs	r3, #4
 800909a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800909e:	e04a      	b.n	8009136 <UART_SetConfig+0x2e6>
 80090a0:	2308      	movs	r3, #8
 80090a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a6:	e046      	b.n	8009136 <UART_SetConfig+0x2e6>
 80090a8:	2310      	movs	r3, #16
 80090aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ae:	e042      	b.n	8009136 <UART_SetConfig+0x2e6>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a17      	ldr	r2, [pc, #92]	; (8009114 <UART_SetConfig+0x2c4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d13a      	bne.n	8009130 <UART_SetConfig+0x2e0>
 80090ba:	4b18      	ldr	r3, [pc, #96]	; (800911c <UART_SetConfig+0x2cc>)
 80090bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090c8:	d01a      	beq.n	8009100 <UART_SetConfig+0x2b0>
 80090ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090ce:	d81b      	bhi.n	8009108 <UART_SetConfig+0x2b8>
 80090d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d4:	d00c      	beq.n	80090f0 <UART_SetConfig+0x2a0>
 80090d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090da:	d815      	bhi.n	8009108 <UART_SetConfig+0x2b8>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <UART_SetConfig+0x298>
 80090e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e4:	d008      	beq.n	80090f8 <UART_SetConfig+0x2a8>
 80090e6:	e00f      	b.n	8009108 <UART_SetConfig+0x2b8>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ee:	e022      	b.n	8009136 <UART_SetConfig+0x2e6>
 80090f0:	2302      	movs	r3, #2
 80090f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090f6:	e01e      	b.n	8009136 <UART_SetConfig+0x2e6>
 80090f8:	2304      	movs	r3, #4
 80090fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090fe:	e01a      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009100:	2308      	movs	r3, #8
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009106:	e016      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009108:	2310      	movs	r3, #16
 800910a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800910e:	e012      	b.n	8009136 <UART_SetConfig+0x2e6>
 8009110:	efff69f3 	.word	0xefff69f3
 8009114:	40008000 	.word	0x40008000
 8009118:	40013800 	.word	0x40013800
 800911c:	40021000 	.word	0x40021000
 8009120:	40004400 	.word	0x40004400
 8009124:	40004800 	.word	0x40004800
 8009128:	40004c00 	.word	0x40004c00
 800912c:	40005000 	.word	0x40005000
 8009130:	2310      	movs	r3, #16
 8009132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a9f      	ldr	r2, [pc, #636]	; (80093b8 <UART_SetConfig+0x568>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d17a      	bne.n	8009236 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009144:	2b08      	cmp	r3, #8
 8009146:	d824      	bhi.n	8009192 <UART_SetConfig+0x342>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <UART_SetConfig+0x300>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009175 	.word	0x08009175
 8009154:	08009193 	.word	0x08009193
 8009158:	0800917d 	.word	0x0800917d
 800915c:	08009193 	.word	0x08009193
 8009160:	08009183 	.word	0x08009183
 8009164:	08009193 	.word	0x08009193
 8009168:	08009193 	.word	0x08009193
 800916c:	08009193 	.word	0x08009193
 8009170:	0800918b 	.word	0x0800918b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009174:	f7fe fc84 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
 8009178:	61f8      	str	r0, [r7, #28]
        break;
 800917a:	e010      	b.n	800919e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800917c:	4b8f      	ldr	r3, [pc, #572]	; (80093bc <UART_SetConfig+0x56c>)
 800917e:	61fb      	str	r3, [r7, #28]
        break;
 8009180:	e00d      	b.n	800919e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009182:	f7fe fbe5 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 8009186:	61f8      	str	r0, [r7, #28]
        break;
 8009188:	e009      	b.n	800919e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800918a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918e:	61fb      	str	r3, [r7, #28]
        break;
 8009190:	e005      	b.n	800919e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800919c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80fb 	beq.w	800939c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d305      	bcc.n	80091c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d903      	bls.n	80091ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091c8:	e0e8      	b.n	800939c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2200      	movs	r2, #0
 80091ce:	461c      	mov	r4, r3
 80091d0:	4615      	mov	r5, r2
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	022b      	lsls	r3, r5, #8
 80091dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80091e0:	0222      	lsls	r2, r4, #8
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	6849      	ldr	r1, [r1, #4]
 80091e6:	0849      	lsrs	r1, r1, #1
 80091e8:	2000      	movs	r0, #0
 80091ea:	4688      	mov	r8, r1
 80091ec:	4681      	mov	r9, r0
 80091ee:	eb12 0a08 	adds.w	sl, r2, r8
 80091f2:	eb43 0b09 	adc.w	fp, r3, r9
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009204:	4650      	mov	r0, sl
 8009206:	4659      	mov	r1, fp
 8009208:	f7f7 fca2 	bl	8000b50 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4613      	mov	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800921a:	d308      	bcc.n	800922e <UART_SetConfig+0x3de>
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009222:	d204      	bcs.n	800922e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	60da      	str	r2, [r3, #12]
 800922c:	e0b6      	b.n	800939c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009234:	e0b2      	b.n	800939c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800923e:	d15e      	bne.n	80092fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009244:	2b08      	cmp	r3, #8
 8009246:	d828      	bhi.n	800929a <UART_SetConfig+0x44a>
 8009248:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <UART_SetConfig+0x400>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	08009275 	.word	0x08009275
 8009254:	0800927d 	.word	0x0800927d
 8009258:	08009285 	.word	0x08009285
 800925c:	0800929b 	.word	0x0800929b
 8009260:	0800928b 	.word	0x0800928b
 8009264:	0800929b 	.word	0x0800929b
 8009268:	0800929b 	.word	0x0800929b
 800926c:	0800929b 	.word	0x0800929b
 8009270:	08009293 	.word	0x08009293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009274:	f7fe fc04 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
 8009278:	61f8      	str	r0, [r7, #28]
        break;
 800927a:	e014      	b.n	80092a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800927c:	f7fe fc16 	bl	8007aac <HAL_RCC_GetPCLK2Freq>
 8009280:	61f8      	str	r0, [r7, #28]
        break;
 8009282:	e010      	b.n	80092a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009284:	4b4d      	ldr	r3, [pc, #308]	; (80093bc <UART_SetConfig+0x56c>)
 8009286:	61fb      	str	r3, [r7, #28]
        break;
 8009288:	e00d      	b.n	80092a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800928a:	f7fe fb61 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 800928e:	61f8      	str	r0, [r7, #28]
        break;
 8009290:	e009      	b.n	80092a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009296:	61fb      	str	r3, [r7, #28]
        break;
 8009298:	e005      	b.n	80092a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80092a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d077      	beq.n	800939c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	005a      	lsls	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	085b      	lsrs	r3, r3, #1
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b0f      	cmp	r3, #15
 80092c6:	d916      	bls.n	80092f6 <UART_SetConfig+0x4a6>
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ce:	d212      	bcs.n	80092f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f023 030f 	bic.w	r3, r3, #15
 80092d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	8afb      	ldrh	r3, [r7, #22]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	8afa      	ldrh	r2, [r7, #22]
 80092f2:	60da      	str	r2, [r3, #12]
 80092f4:	e052      	b.n	800939c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092fc:	e04e      	b.n	800939c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009302:	2b08      	cmp	r3, #8
 8009304:	d827      	bhi.n	8009356 <UART_SetConfig+0x506>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <UART_SetConfig+0x4bc>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009331 	.word	0x08009331
 8009310:	08009339 	.word	0x08009339
 8009314:	08009341 	.word	0x08009341
 8009318:	08009357 	.word	0x08009357
 800931c:	08009347 	.word	0x08009347
 8009320:	08009357 	.word	0x08009357
 8009324:	08009357 	.word	0x08009357
 8009328:	08009357 	.word	0x08009357
 800932c:	0800934f 	.word	0x0800934f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009330:	f7fe fba6 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
 8009334:	61f8      	str	r0, [r7, #28]
        break;
 8009336:	e014      	b.n	8009362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009338:	f7fe fbb8 	bl	8007aac <HAL_RCC_GetPCLK2Freq>
 800933c:	61f8      	str	r0, [r7, #28]
        break;
 800933e:	e010      	b.n	8009362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009340:	4b1e      	ldr	r3, [pc, #120]	; (80093bc <UART_SetConfig+0x56c>)
 8009342:	61fb      	str	r3, [r7, #28]
        break;
 8009344:	e00d      	b.n	8009362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009346:	f7fe fb03 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 800934a:	61f8      	str	r0, [r7, #28]
        break;
 800934c:	e009      	b.n	8009362 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800934e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009352:	61fb      	str	r3, [r7, #28]
        break;
 8009354:	e005      	b.n	8009362 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009360:	bf00      	nop
    }

    if (pclk != 0U)
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d019      	beq.n	800939c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	085a      	lsrs	r2, r3, #1
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	fbb2 f3f3 	udiv	r3, r2, r3
 800937a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	2b0f      	cmp	r3, #15
 8009380:	d909      	bls.n	8009396 <UART_SetConfig+0x546>
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009388:	d205      	bcs.n	8009396 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60da      	str	r2, [r3, #12]
 8009394:	e002      	b.n	800939c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80093a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3728      	adds	r7, #40	; 0x28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093b6:	bf00      	nop
 80093b8:	40008000 	.word	0x40008000
 80093bc:	00f42400 	.word	0x00f42400

080093c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01a      	beq.n	80094d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094be:	d10a      	bne.n	80094d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	605a      	str	r2, [r3, #4]
  }
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b098      	sub	sp, #96	; 0x60
 8009508:	af02      	add	r7, sp, #8
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009514:	f7fa fdc6 	bl	80040a4 <HAL_GetTick>
 8009518:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0308 	and.w	r3, r3, #8
 8009524:	2b08      	cmp	r3, #8
 8009526:	d12e      	bne.n	8009586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009530:	2200      	movs	r2, #0
 8009532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f88c 	bl	8009654 <UART_WaitOnFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d021      	beq.n	8009586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009556:	653b      	str	r3, [r7, #80]	; 0x50
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009560:	647b      	str	r3, [r7, #68]	; 0x44
 8009562:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800956e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e6      	bne.n	8009542 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e062      	b.n	800964c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b04      	cmp	r3, #4
 8009592:	d149      	bne.n	8009628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800959c:	2200      	movs	r2, #0
 800959e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f856 	bl	8009654 <UART_WaitOnFlagUntilTimeout>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d03c      	beq.n	8009628 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	e853 3f00 	ldrex	r3, [r3]
 80095ba:	623b      	str	r3, [r7, #32]
   return(result);
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095cc:	633b      	str	r3, [r7, #48]	; 0x30
 80095ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d4:	e841 2300 	strex	r3, r2, [r1]
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e6      	bne.n	80095ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3308      	adds	r3, #8
 80095e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	e853 3f00 	ldrex	r3, [r3]
 80095ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0301 	bic.w	r3, r3, #1
 80095f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3308      	adds	r3, #8
 80095fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009600:	61fa      	str	r2, [r7, #28]
 8009602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	69b9      	ldr	r1, [r7, #24]
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	617b      	str	r3, [r7, #20]
   return(result);
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e5      	bne.n	80095e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e011      	b.n	800964c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3758      	adds	r7, #88	; 0x58
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	4613      	mov	r3, r2
 8009662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009664:	e049      	b.n	80096fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966c:	d045      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966e:	f7fa fd19 	bl	80040a4 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	429a      	cmp	r2, r3
 800967c:	d302      	bcc.n	8009684 <UART_WaitOnFlagUntilTimeout+0x30>
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e048      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d031      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d110      	bne.n	80096c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2208      	movs	r2, #8
 80096aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f838 	bl	8009722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2208      	movs	r2, #8
 80096b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e029      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d4:	d111      	bne.n	80096fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 f81e 	bl	8009722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e00f      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4013      	ands	r3, r2
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	bf0c      	ite	eq
 800970a:	2301      	moveq	r3, #1
 800970c:	2300      	movne	r3, #0
 800970e:	b2db      	uxtb	r3, r3
 8009710:	461a      	mov	r2, r3
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	429a      	cmp	r2, r3
 8009716:	d0a6      	beq.n	8009666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009722:	b480      	push	{r7}
 8009724:	b095      	sub	sp, #84	; 0x54
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800973e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009748:	643b      	str	r3, [r7, #64]	; 0x40
 800974a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800974e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e6      	bne.n	800972a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3308      	adds	r3, #8
 8009762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	61fb      	str	r3, [r7, #28]
   return(result);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f023 0301 	bic.w	r3, r3, #1
 8009772:	64bb      	str	r3, [r7, #72]	; 0x48
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800977c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009794:	2b01      	cmp	r3, #1
 8009796:	d118      	bne.n	80097ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f023 0310 	bic.w	r3, r3, #16
 80097ac:	647b      	str	r3, [r7, #68]	; 0x44
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6979      	ldr	r1, [r7, #20]
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	613b      	str	r3, [r7, #16]
   return(result);
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e6      	bne.n	8009798 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80097de:	bf00      	nop
 80097e0:	3754      	adds	r7, #84	; 0x54
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b08c      	sub	sp, #48	; 0x30
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	4603      	mov	r3, r0
 80097f4:	71fb      	strb	r3, [r7, #7]
 80097f6:	460b      	mov	r3, r1
 80097f8:	71bb      	strb	r3, [r7, #6]
 80097fa:	4613      	mov	r3, r2
 80097fc:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009802:	79bb      	ldrb	r3, [r7, #6]
 8009804:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009806:	797b      	ldrb	r3, [r7, #5]
 8009808:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800980a:	f107 030c 	add.w	r3, r7, #12
 800980e:	2207      	movs	r2, #7
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f001 f963 	bl	800aade <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009818:	f107 0318 	add.w	r3, r7, #24
 800981c:	2218      	movs	r2, #24
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f001 f95c 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009826:	233f      	movs	r3, #63	; 0x3f
 8009828:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800982a:	238a      	movs	r3, #138	; 0x8a
 800982c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009834:	2303      	movs	r3, #3
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8009838:	f107 030c 	add.w	r3, r7, #12
 800983c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800983e:	2307      	movs	r3, #7
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009842:	f107 0318 	add.w	r3, r7, #24
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fea1 	bl	800a590 <hci_send_req>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	da01      	bge.n	8009858 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009854:	23ff      	movs	r3, #255	; 0xff
 8009856:	e014      	b.n	8009882 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009858:	7b3b      	ldrb	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800985e:	7b3b      	ldrb	r3, [r7, #12]
 8009860:	e00f      	b.n	8009882 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009862:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009866:	b29a      	uxth	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800986c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009870:	b29a      	uxth	r2, r3
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009876:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800987a:	b29a      	uxth	r2, r3
 800987c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3730      	adds	r7, #48	; 0x30
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08e      	sub	sp, #56	; 0x38
 800988e:	af00      	add	r7, sp, #0
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800989e:	f107 0314 	add.w	r3, r7, #20
 80098a2:	2207      	movs	r2, #7
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f919 	bl	800aade <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098ac:	f107 0320 	add.w	r3, r7, #32
 80098b0:	2218      	movs	r2, #24
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 f912 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80098ba:	233f      	movs	r3, #63	; 0x3f
 80098bc:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80098be:	238a      	movs	r3, #138	; 0x8a
 80098c0:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80098c2:	f107 031c 	add.w	r3, r7, #28
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80098c8:	2301      	movs	r3, #1
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80098cc:	f107 0314 	add.w	r3, r7, #20
 80098d0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80098d2:	2307      	movs	r3, #7
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80098d6:	f107 0320 	add.w	r3, r7, #32
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fe57 	bl	800a590 <hci_send_req>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da01      	bge.n	80098ec <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80098e8:	23ff      	movs	r3, #255	; 0xff
 80098ea:	e014      	b.n	8009916 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80098ec:	7d3b      	ldrb	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80098f2:	7d3b      	ldrb	r3, [r7, #20]
 80098f4:	e00f      	b.n	8009916 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80098f6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009900:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009904:	b29a      	uxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800990a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800990e:	b29a      	uxth	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3738      	adds	r7, #56	; 0x38
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800991e:	b590      	push	{r4, r7, lr}
 8009920:	b095      	sub	sp, #84	; 0x54
 8009922:	af00      	add	r7, sp, #0
 8009924:	4604      	mov	r4, r0
 8009926:	4608      	mov	r0, r1
 8009928:	4611      	mov	r1, r2
 800992a:	461a      	mov	r2, r3
 800992c:	4623      	mov	r3, r4
 800992e:	71fb      	strb	r3, [r7, #7]
 8009930:	4603      	mov	r3, r0
 8009932:	80bb      	strh	r3, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	807b      	strh	r3, [r7, #2]
 8009938:	4613      	mov	r3, r2
 800993a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009942:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009946:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800994a:	4413      	add	r3, r2
 800994c:	330e      	adds	r3, #14
 800994e:	2b28      	cmp	r3, #40	; 0x28
 8009950:	d901      	bls.n	8009956 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009952:	2342      	movs	r3, #66	; 0x42
 8009954:	e0c9      	b.n	8009aea <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8009956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800995a:	3350      	adds	r3, #80	; 0x50
 800995c:	443b      	add	r3, r7
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009968:	3301      	adds	r3, #1
 800996a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800996e:	88bb      	ldrh	r3, [r7, #4]
 8009970:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009972:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009976:	f107 0208 	add.w	r2, r7, #8
 800997a:	4413      	add	r3, r2
 800997c:	88ba      	ldrh	r2, [r7, #4]
 800997e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009984:	3302      	adds	r3, #2
 8009986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800998a:	887b      	ldrh	r3, [r7, #2]
 800998c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800998e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009992:	f107 0208 	add.w	r2, r7, #8
 8009996:	4413      	add	r3, r2
 8009998:	887a      	ldrh	r2, [r7, #2]
 800999a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800999c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099a0:	3302      	adds	r3, #2
 80099a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80099a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099aa:	3350      	adds	r3, #80	; 0x50
 80099ac:	443b      	add	r3, r7
 80099ae:	79ba      	ldrb	r2, [r7, #6]
 80099b0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80099b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099b8:	3301      	adds	r3, #1
 80099ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80099be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099c2:	3350      	adds	r3, #80	; 0x50
 80099c4:	443b      	add	r3, r7
 80099c6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80099ca:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80099ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099d2:	3301      	adds	r3, #1
 80099d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80099d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099dc:	3350      	adds	r3, #80	; 0x50
 80099de:	443b      	add	r3, r7
 80099e0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80099e4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80099e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099ec:	3301      	adds	r3, #1
 80099ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80099f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099f6:	f107 0208 	add.w	r2, r7, #8
 80099fa:	4413      	add	r3, r2
 80099fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009a00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 f89e 	bl	800ab44 <memcpy>
  indx +=  LocalNameLen;
 8009a08:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009a0c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009a10:	4413      	add	r3, r2
 8009a12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009a16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a1a:	3350      	adds	r3, #80	; 0x50
 8009a1c:	443b      	add	r3, r7
 8009a1e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009a22:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009a26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009a30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a34:	f107 0208 	add.w	r2, r7, #8
 8009a38:	4413      	add	r3, r2
 8009a3a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009a3e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 f87f 	bl	800ab44 <memcpy>
  indx +=  ServiceUUIDLen;  
 8009a46:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009a4a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009a4e:	4413      	add	r3, r2
 8009a50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009a54:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009a58:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009a5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a60:	f107 0208 	add.w	r2, r7, #8
 8009a64:	4413      	add	r3, r2
 8009a66:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8009a6a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a70:	3302      	adds	r3, #2
 8009a72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009a76:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009a7a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009a7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a82:	f107 0208 	add.w	r2, r7, #8
 8009a86:	4413      	add	r3, r2
 8009a88:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8009a8c:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a92:	3302      	adds	r3, #2
 8009a94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a9c:	2218      	movs	r2, #24
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 f81c 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009aa6:	233f      	movs	r3, #63	; 0x3f
 8009aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009aaa:	2383      	movs	r3, #131	; 0x83
 8009aac:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8009ab4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ab8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8009aba:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009abe:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fd60 	bl	800a590 <hci_send_req>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da01      	bge.n	8009ada <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009ad6:	23ff      	movs	r3, #255	; 0xff
 8009ad8:	e007      	b.n	8009aea <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8009ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <aci_gap_set_discoverable+0x1ca>
    return status;
 8009ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e000      	b.n	8009aea <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3754      	adds	r7, #84	; 0x54
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd90      	pop	{r4, r7, pc}

08009af2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009af2:	b590      	push	{r4, r7, lr}
 8009af4:	b091      	sub	sp, #68	; 0x44
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	603a      	str	r2, [r7, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	4603      	mov	r3, r0
 8009afe:	71fb      	strb	r3, [r7, #7]
 8009b00:	460b      	mov	r3, r1
 8009b02:	71bb      	strb	r3, [r7, #6]
 8009b04:	4613      	mov	r3, r2
 8009b06:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8009b0c:	79bb      	ldrb	r3, [r7, #6]
 8009b0e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009b10:	79bb      	ldrb	r3, [r7, #6]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	f107 030e 	add.w	r3, r7, #14
 8009b1c:	6814      	ldr	r4, [r2, #0]
 8009b1e:	6850      	ldr	r0, [r2, #4]
 8009b20:	6891      	ldr	r1, [r2, #8]
 8009b22:	68d2      	ldr	r2, [r2, #12]
 8009b24:	601c      	str	r4, [r3, #0]
 8009b26:	6058      	str	r0, [r3, #4]
 8009b28:	6099      	str	r1, [r3, #8]
 8009b2a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009b2c:	797b      	ldrb	r3, [r7, #5]
 8009b2e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009b30:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009b34:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009b36:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009b3a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8009b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b40:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8009b44:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009b48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b50:	2218      	movs	r2, #24
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 ffc2 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b5a:	233f      	movs	r3, #63	; 0x3f
 8009b5c:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009b5e:	2386      	movs	r3, #134	; 0x86
 8009b60:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8009b62:	f107 030c 	add.w	r3, r7, #12
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8009b68:	231a      	movs	r3, #26
 8009b6a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8009b6c:	f107 030b 	add.w	r3, r7, #11
 8009b70:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8009b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 fd07 	bl	800a590 <hci_send_req>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da01      	bge.n	8009b8c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009b88:	23ff      	movs	r3, #255	; 0xff
 8009b8a:	e005      	b.n	8009b98 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8009b92:	7afb      	ldrb	r3, [r7, #11]
 8009b94:	e000      	b.n	8009b98 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3744      	adds	r7, #68	; 0x44
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd90      	pop	{r4, r7, pc}

08009ba0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b092      	sub	sp, #72	; 0x48
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6039      	str	r1, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	2b1f      	cmp	r3, #31
 8009bb6:	d901      	bls.n	8009bbc <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009bb8:	2342      	movs	r3, #66	; 0x42
 8009bba:	e03e      	b.n	8009c3a <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8009bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bc0:	3348      	adds	r3, #72	; 0x48
 8009bc2:	443b      	add	r3, r7
 8009bc4:	79fa      	ldrb	r2, [r7, #7]
 8009bc6:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8009bca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009bd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bd8:	f107 0208 	add.w	r2, r7, #8
 8009bdc:	4413      	add	r3, r2
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 ffae 	bl	800ab44 <memcpy>
  indx +=  AdvLen;
 8009be8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009bec:	79fb      	ldrb	r3, [r7, #7]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bf8:	2218      	movs	r2, #24
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 ff6e 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c02:	233f      	movs	r3, #63	; 0x3f
 8009c04:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009c06:	238e      	movs	r3, #142	; 0x8e
 8009c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8009c10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c14:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8009c16:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fcb2 	bl	800a590 <hci_send_req>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da01      	bge.n	8009c36 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009c32:	23ff      	movs	r3, #255	; 0xff
 8009c34:	e001      	b.n	8009c3a <aci_gap_update_adv_data+0x9a>
    
  return status;
 8009c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3748      	adds	r7, #72	; 0x48
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b088      	sub	sp, #32
 8009c46:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	2218      	movs	r2, #24
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 ff44 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c56:	233f      	movs	r3, #63	; 0x3f
 8009c58:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8009c5a:	f240 1301 	movw	r3, #257	; 0x101
 8009c5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c60:	1dfb      	adds	r3, r7, #7
 8009c62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c64:	2301      	movs	r3, #1
 8009c66:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fc8e 	bl	800a590 <hci_send_req>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da01      	bge.n	8009c7e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8009c7a:	23ff      	movs	r3, #255	; 0xff
 8009c7c:	e000      	b.n	8009c80 <aci_gatt_init+0x3e>

  return status;
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b090      	sub	sp, #64	; 0x40
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6039      	str	r1, [r7, #0]
 8009c90:	4611      	mov	r1, r2
 8009c92:	461a      	mov	r2, r3
 8009c94:	4603      	mov	r3, r0
 8009c96:	71fb      	strb	r3, [r7, #7]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	71bb      	strb	r3, [r7, #6]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8009ca6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009caa:	3340      	adds	r3, #64	; 0x40
 8009cac:	443b      	add	r3, r7
 8009cae:	79fa      	ldrb	r2, [r7, #7]
 8009cb0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009cb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d103      	bne.n	8009ccc <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009cca:	e002      	b.n	8009cd2 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009ccc:	2310      	movs	r3, #16
 8009cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009cd2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cd6:	f107 020c 	add.w	r2, r7, #12
 8009cda:	4413      	add	r3, r2
 8009cdc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 ff2e 	bl	800ab44 <memcpy>
  indx +=  uuid_len;
 8009ce8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8009cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8009cf6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cfa:	3340      	adds	r3, #64	; 0x40
 8009cfc:	443b      	add	r3, r7
 8009cfe:	79ba      	ldrb	r2, [r7, #6]
 8009d00:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009d04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d08:	3301      	adds	r3, #1
 8009d0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8009d0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d12:	3340      	adds	r3, #64	; 0x40
 8009d14:	443b      	add	r3, r7
 8009d16:	797a      	ldrb	r2, [r7, #5]
 8009d18:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009d1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d20:	3301      	adds	r3, #1
 8009d22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d26:	f107 0320 	add.w	r3, r7, #32
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fed5 	bl	800aade <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d38:	2218      	movs	r2, #24
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fece 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d42:	233f      	movs	r3, #63	; 0x3f
 8009d44:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8009d46:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8009d4c:	f107 030c 	add.w	r3, r7, #12
 8009d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8009d52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d56:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8009d58:	f107 0320 	add.w	r3, r7, #32
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8009d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fc11 	bl	800a590 <hci_send_req>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da01      	bge.n	8009d78 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8009d74:	23ff      	movs	r3, #255	; 0xff
 8009d76:	e00c      	b.n	8009d92 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8009d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8009d80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d84:	e005      	b.n	8009d92 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8009d86:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8e:	801a      	strh	r2, [r3, #0]

  return 0;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3740      	adds	r7, #64	; 0x40
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b092      	sub	sp, #72	; 0x48
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	603a      	str	r2, [r7, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	4603      	mov	r3, r0
 8009da6:	80fb      	strh	r3, [r7, #6]
 8009da8:	460b      	mov	r3, r1
 8009daa:	717b      	strb	r3, [r7, #5]
 8009dac:	4613      	mov	r3, r2
 8009dae:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009dba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009dbe:	f107 020c 	add.w	r2, r7, #12
 8009dc2:	4413      	add	r3, r2
 8009dc4:	88fa      	ldrh	r2, [r7, #6]
 8009dc6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009dc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009dcc:	3302      	adds	r3, #2
 8009dce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8009dd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009dd6:	3348      	adds	r3, #72	; 0x48
 8009dd8:	443b      	add	r3, r7
 8009dda:	797a      	ldrb	r2, [r7, #5]
 8009ddc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009de0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009de4:	3301      	adds	r3, #1
 8009de6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009dea:	797b      	ldrb	r3, [r7, #5]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d103      	bne.n	8009df8 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009df0:	2302      	movs	r3, #2
 8009df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009df6:	e002      	b.n	8009dfe <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009df8:	2310      	movs	r3, #16
 8009dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e02:	f107 020c 	add.w	r2, r7, #12
 8009e06:	4413      	add	r3, r2
 8009e08:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fe98 	bl	800ab44 <memcpy>
  indx +=  uuid_len;
 8009e14:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8009e18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8009e22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e26:	3348      	adds	r3, #72	; 0x48
 8009e28:	443b      	add	r3, r7
 8009e2a:	793a      	ldrb	r2, [r7, #4]
 8009e2c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e34:	3301      	adds	r3, #1
 8009e36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8009e3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e3e:	3348      	adds	r3, #72	; 0x48
 8009e40:	443b      	add	r3, r7
 8009e42:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009e46:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8009e54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e58:	3348      	adds	r3, #72	; 0x48
 8009e5a:	443b      	add	r3, r7
 8009e5c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8009e60:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e68:	3301      	adds	r3, #1
 8009e6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8009e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e72:	3348      	adds	r3, #72	; 0x48
 8009e74:	443b      	add	r3, r7
 8009e76:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8009e7a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e82:	3301      	adds	r3, #1
 8009e84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8009e88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e8c:	3348      	adds	r3, #72	; 0x48
 8009e8e:	443b      	add	r3, r7
 8009e90:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8009e94:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8009ea2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009ea6:	3348      	adds	r3, #72	; 0x48
 8009ea8:	443b      	add	r3, r7
 8009eaa:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8009eae:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009eb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ec0:	2203      	movs	r2, #3
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fe0a 	bl	800aade <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ece:	2218      	movs	r2, #24
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fe03 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009ed8:	233f      	movs	r3, #63	; 0x3f
 8009eda:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009edc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ee0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8009ee8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8009eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009efc:	2100      	movs	r1, #0
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fb46 	bl	800a590 <hci_send_req>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da01      	bge.n	8009f0e <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009f0a:	23ff      	movs	r3, #255	; 0xff
 8009f0c:	e00c      	b.n	8009f28 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <aci_gatt_add_char+0x182>
    return resp.status;
 8009f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f1a:	e005      	b.n	8009f28 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009f1c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f24:	801a      	strh	r2, [r3, #0]

  return 0;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3748      	adds	r7, #72	; 0x48
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b0ab      	sub	sp, #172	; 0xac
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4623      	mov	r3, r4
 8009f40:	80fb      	strh	r3, [r7, #6]
 8009f42:	4603      	mov	r3, r0
 8009f44:	80bb      	strh	r3, [r7, #4]
 8009f46:	460b      	mov	r3, r1
 8009f48:	70fb      	strb	r3, [r7, #3]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009f54:	78bb      	ldrb	r3, [r7, #2]
 8009f56:	2b7a      	cmp	r3, #122	; 0x7a
 8009f58:	d901      	bls.n	8009f5e <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009f5a:	2342      	movs	r3, #66	; 0x42
 8009f5c:	e074      	b.n	800a048 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009f62:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f66:	f107 0208 	add.w	r2, r7, #8
 8009f6a:	4413      	add	r3, r2
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009f70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f74:	3302      	adds	r3, #2
 8009f76:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8009f7a:	88bb      	ldrh	r3, [r7, #4]
 8009f7c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009f7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f82:	f107 0208 	add.w	r2, r7, #8
 8009f86:	4413      	add	r3, r2
 8009f88:	88ba      	ldrh	r2, [r7, #4]
 8009f8a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009f8c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f90:	3302      	adds	r3, #2
 8009f92:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8009f96:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f9a:	33a8      	adds	r3, #168	; 0xa8
 8009f9c:	443b      	add	r3, r7
 8009f9e:	78fa      	ldrb	r2, [r7, #3]
 8009fa0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009fa4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fa8:	3301      	adds	r3, #1
 8009faa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8009fae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fb2:	33a8      	adds	r3, #168	; 0xa8
 8009fb4:	443b      	add	r3, r7
 8009fb6:	78ba      	ldrb	r2, [r7, #2]
 8009fb8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009fbc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009fc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fca:	f107 0208 	add.w	r2, r7, #8
 8009fce:	4413      	add	r3, r2
 8009fd0:	78ba      	ldrb	r2, [r7, #2]
 8009fd2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fdb4 	bl	800ab44 <memcpy>
  indx +=  charValueLen;
 8009fdc:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8009fe0:	78bb      	ldrb	r3, [r7, #2]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fe8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009fec:	2218      	movs	r2, #24
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fd74 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009ff6:	233f      	movs	r3, #63	; 0x3f
 8009ff8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009ffc:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a000:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800a00c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800a014:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800a018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a022:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fab1 	bl	800a590 <hci_send_req>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	da01      	bge.n	800a038 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800a034:	23ff      	movs	r3, #255	; 0xff
 800a036:	e007      	b.n	800a048 <aci_gatt_update_char_value+0x118>

  if (status) {
 800a038:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <aci_gatt_update_char_value+0x116>
    return status;
 800a040:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a044:	e000      	b.n	800a048 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	37ac      	adds	r7, #172	; 0xac
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd90      	pop	{r4, r7, pc}

0800a050 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800a05e:	f107 0310 	add.w	r3, r7, #16
 800a062:	2218      	movs	r2, #24
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fd39 	bl	800aade <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800a06c:	233f      	movs	r3, #63	; 0x3f
 800a06e:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800a070:	f240 1327 	movw	r3, #295	; 0x127
 800a074:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800a076:	f107 030c 	add.w	r3, r7, #12
 800a07a:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800a07c:	2302      	movs	r3, #2
 800a07e:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800a080:	f107 030b 	add.w	r3, r7, #11
 800a084:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800a086:	2301      	movs	r3, #1
 800a088:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fa7d 	bl	800a590 <hci_send_req>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da01      	bge.n	800a0a0 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800a09c:	23ff      	movs	r3, #255	; 0xff
 800a09e:	e000      	b.n	800a0a2 <aci_gatt_allow_read+0x52>

    return status;
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3728      	adds	r7, #40	; 0x28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b0ac      	sub	sp, #176	; 0xb0
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60ba      	str	r2, [r7, #8]
 800a0b2:	607b      	str	r3, [r7, #4]
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a0c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0c6:	2218      	movs	r2, #24
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fd07 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a0d0:	233f      	movs	r3, #63	; 0x3f
 800a0d2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a0d6:	230d      	movs	r3, #13
 800a0d8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800a0dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a0e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800a0f2:	2380      	movs	r3, #128	; 0x80
 800a0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a0f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fa46 	bl	800a590 <hci_send_req>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	da01      	bge.n	800a10e <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800a10a:	23ff      	movs	r3, #255	; 0xff
 800a10c:	e01e      	b.n	800a14c <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800a10e:	7d3b      	ldrb	r3, [r7, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800a114:	7d3b      	ldrb	r3, [r7, #20]
 800a116:	e019      	b.n	800a14c <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800a118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	89ba      	ldrh	r2, [r7, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d201      	bcs.n	800a136 <aci_hal_read_config_data+0x8c>
 800a132:	89ba      	ldrh	r2, [r7, #12]
 800a134:	e002      	b.n	800a13c <aci_hal_read_config_data+0x92>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f107 0314 	add.w	r3, r7, #20
 800a140:	3301      	adds	r3, #1
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fcfd 	bl	800ab44 <memcpy>
  
  return 0;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	37b0      	adds	r7, #176	; 0xb0
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	; 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	460a      	mov	r2, r1
 800a15e:	71fb      	strb	r3, [r7, #7]
 800a160:	4613      	mov	r3, r2
 800a162:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a168:	79bb      	ldrb	r3, [r7, #6]
 800a16a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a16c:	f107 0310 	add.w	r3, r7, #16
 800a170:	2218      	movs	r2, #24
 800a172:	2100      	movs	r1, #0
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fcb2 	bl	800aade <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a17a:	233f      	movs	r3, #63	; 0x3f
 800a17c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a17e:	230f      	movs	r3, #15
 800a180:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a182:	f107 030c 	add.w	r3, r7, #12
 800a186:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a188:	2302      	movs	r3, #2
 800a18a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a18c:	f107 030b 	add.w	r3, r7, #11
 800a190:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a196:	f107 0310 	add.w	r3, r7, #16
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f9f7 	bl	800a590 <hci_send_req>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da01      	bge.n	800a1ac <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a1a8:	23ff      	movs	r3, #255	; 0xff
 800a1aa:	e000      	b.n	800a1ae <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	; 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a1b6:	b590      	push	{r4, r7, lr}
 800a1b8:	b089      	sub	sp, #36	; 0x24
 800a1ba:	af02      	add	r7, sp, #8
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a1c0:	f107 0410 	add.w	r4, r7, #16
 800a1c4:	f107 0215 	add.w	r2, r7, #21
 800a1c8:	f107 0112 	add.w	r1, r7, #18
 800a1cc:	f107 0016 	add.w	r0, r7, #22
 800a1d0:	f107 030e 	add.w	r3, r7, #14
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	4623      	mov	r3, r4
 800a1d8:	f000 f853 	bl	800a282 <hci_le_read_local_version>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d126      	bne.n	800a234 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a1e6:	8a7b      	ldrh	r3, [r7, #18]
 800a1e8:	0a1b      	lsrs	r3, r3, #8
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b21a      	sxth	r2, r3
 800a202:	89fb      	ldrh	r3, [r7, #14]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	b29b      	uxth	r3, r3
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	b21b      	sxth	r3, r3
 800a210:	4313      	orrs	r3, r2
 800a212:	b21b      	sxth	r3, r3
 800a214:	b29a      	uxth	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b21a      	sxth	r2, r3
 800a220:	89fb      	ldrh	r3, [r7, #14]
 800a222:	b21b      	sxth	r3, r3
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	b21b      	sxth	r3, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	b21b      	sxth	r3, r3
 800a22e:	b29a      	uxth	r2, r3
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd90      	pop	{r4, r7, pc}

0800a23e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b088      	sub	sp, #32
 800a242:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a244:	f107 0308 	add.w	r3, r7, #8
 800a248:	2218      	movs	r2, #24
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fc46 	bl	800aade <memset>
  rq.ogf = OGF_HOST_CTL;
 800a252:	2303      	movs	r3, #3
 800a254:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a256:	2303      	movs	r3, #3
 800a258:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a25a:	1dfb      	adds	r3, r7, #7
 800a25c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a25e:	2301      	movs	r3, #1
 800a260:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f991 	bl	800a590 <hci_send_req>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	da01      	bge.n	800a278 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a274:	23ff      	movs	r3, #255	; 0xff
 800a276:	e000      	b.n	800a27a <hci_reset+0x3c>
  
  return status;  
 800a278:	79fb      	ldrb	r3, [r7, #7]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3720      	adds	r7, #32
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b08e      	sub	sp, #56	; 0x38
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	2209      	movs	r2, #9
 800a296:	2100      	movs	r1, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 fc20 	bl	800aade <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a29e:	f107 0320 	add.w	r3, r7, #32
 800a2a2:	2218      	movs	r2, #24
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fc19 	bl	800aade <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800a2bc:	f107 0314 	add.w	r3, r7, #20
 800a2c0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a2c2:	2309      	movs	r3, #9
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a2c6:	f107 0320 	add.w	r3, r7, #32
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f95f 	bl	800a590 <hci_send_req>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	da01      	bge.n	800a2dc <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a2d8:	23ff      	movs	r3, #255	; 0xff
 800a2da:	e018      	b.n	800a30e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a2dc:	7d3b      	ldrb	r3, [r7, #20]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <hci_le_read_local_version+0x64>
    return resp.status;
 800a2e2:	7d3b      	ldrb	r3, [r7, #20]
 800a2e4:	e013      	b.n	800a30e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a2e6:	7d7a      	ldrb	r2, [r7, #21]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a2ec:	8afa      	ldrh	r2, [r7, #22]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a2f2:	7e3a      	ldrb	r2, [r7, #24]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a2f8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a302:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a306:	b29a      	uxth	r2, r3
 800a308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a30a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3738      	adds	r7, #56	; 0x38
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b092      	sub	sp, #72	; 0x48
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	4603      	mov	r3, r0
 800a31e:	6039      	str	r1, [r7, #0]
 800a320:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a322:	f107 0310 	add.w	r3, r7, #16
 800a326:	2220      	movs	r2, #32
 800a328:	2100      	movs	r1, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fbd7 	bl	800aade <memset>
  scan_resp_cp.length = length;
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	2b1f      	cmp	r3, #31
 800a338:	bf28      	it	cs
 800a33a:	231f      	movcs	r3, #31
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	f107 0310 	add.w	r3, r7, #16
 800a344:	3301      	adds	r3, #1
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fbfb 	bl	800ab44 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a34e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a352:	2218      	movs	r2, #24
 800a354:	2100      	movs	r1, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f000 fbc1 	bl	800aade <memset>
  rq.ogf = OGF_LE_CTL;
 800a35c:	2308      	movs	r3, #8
 800a35e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a360:	2309      	movs	r3, #9
 800a362:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800a364:	f107 0310 	add.w	r3, r7, #16
 800a368:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a36a:	2320      	movs	r3, #32
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800a36e:	f107 030f 	add.w	r3, r7, #15
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800a374:	2301      	movs	r3, #1
 800a376:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f906 	bl	800a590 <hci_send_req>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	da01      	bge.n	800a38e <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a38a:	23ff      	movs	r3, #255	; 0xff
 800a38c:	e000      	b.n	800a390 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3748      	adds	r7, #72	; 0x48
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d001      	beq.n	800a3b2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e00c      	b.n	800a3cc <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3c0:	3b03      	subs	r3, #3
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d001      	beq.n	800a3ca <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e000      	b.n	800a3cc <verify_packet+0x34>
  
  return 0;      
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b0a6      	sub	sp, #152	; 0x98
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	607b      	str	r3, [r7, #4]
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	81fb      	strh	r3, [r7, #14]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	81bb      	strh	r3, [r7, #12]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a3ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a3f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3f4:	b21a      	sxth	r2, r3
 800a3f6:	89fb      	ldrh	r3, [r7, #14]
 800a3f8:	029b      	lsls	r3, r3, #10
 800a3fa:	b21b      	sxth	r3, r3
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	b29b      	uxth	r3, r3
 800a402:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a404:	7afb      	ldrb	r3, [r7, #11]
 800a406:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a408:	2301      	movs	r3, #1
 800a40a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a40c:	f107 0318 	add.w	r3, r7, #24
 800a410:	3301      	adds	r3, #1
 800a412:	461a      	mov	r2, r3
 800a414:	f107 0314 	add.w	r3, r7, #20
 800a418:	8819      	ldrh	r1, [r3, #0]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	8011      	strh	r1, [r2, #0]
 800a41e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a420:	f107 0318 	add.w	r3, r7, #24
 800a424:	3304      	adds	r3, #4
 800a426:	7afa      	ldrb	r2, [r7, #11]
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fb8a 	bl	800ab44 <memcpy>
  
  if (hciContext.io.Send)
 800a430:	4b08      	ldr	r3, [pc, #32]	; (800a454 <send_cmd+0x7c>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <send_cmd+0x7c>)
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	7afa      	ldrb	r2, [r7, #11]
 800a43e:	b292      	uxth	r2, r2
 800a440:	3204      	adds	r2, #4
 800a442:	b291      	uxth	r1, r2
 800a444:	f107 0218 	add.w	r2, r7, #24
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
  }
}
 800a44c:	bf00      	nop
 800a44e:	3798      	adds	r7, #152	; 0x98
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	2000a490 	.word	0x2000a490

0800a458 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a462:	e00a      	b.n	800a47a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a464:	f107 030c 	add.w	r3, r7, #12
 800a468:	4619      	mov	r1, r3
 800a46a:	6838      	ldr	r0, [r7, #0]
 800a46c:	f000 fae8 	bl	800aa40 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa4f 	bl	800a918 <list_insert_head>
  while (!list_is_empty(src_list))
 800a47a:	6838      	ldr	r0, [r7, #0]
 800a47c:	f000 fa2a 	bl	800a8d4 <list_is_empty>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0ee      	beq.n	800a464 <move_list+0xc>
  }
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a496:	e009      	b.n	800a4ac <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a498:	1d3b      	adds	r3, r7, #4
 800a49a:	4619      	mov	r1, r3
 800a49c:	4809      	ldr	r0, [pc, #36]	; (800a4c4 <free_event_list+0x34>)
 800a49e:	f000 faa8 	bl	800a9f2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4808      	ldr	r0, [pc, #32]	; (800a4c8 <free_event_list+0x38>)
 800a4a8:	f000 fa5c 	bl	800a964 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a4ac:	4806      	ldr	r0, [pc, #24]	; (800a4c8 <free_event_list+0x38>)
 800a4ae:	f000 faee 	bl	800aa8e <list_get_size>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	ddef      	ble.n	800a498 <free_event_list+0x8>
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000a1cc 	.word	0x2000a1cc
 800a4c8:	2000a1c4 	.word	0x2000a1c4

0800a4cc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a4dc:	4a18      	ldr	r2, [pc, #96]	; (800a540 <hci_init+0x74>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a4e2:	4818      	ldr	r0, [pc, #96]	; (800a544 <hci_init+0x78>)
 800a4e4:	f000 f9e6 	bl	800a8b4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a4e8:	4817      	ldr	r0, [pc, #92]	; (800a548 <hci_init+0x7c>)
 800a4ea:	f000 f9e3 	bl	800a8b4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a4ee:	f7f6 fdf3 	bl	80010d8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
 800a4f6:	e00c      	b.n	800a512 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	228c      	movs	r2, #140	; 0x8c
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
 800a500:	4a12      	ldr	r2, [pc, #72]	; (800a54c <hci_init+0x80>)
 800a502:	4413      	add	r3, r2
 800a504:	4619      	mov	r1, r3
 800a506:	480f      	ldr	r0, [pc, #60]	; (800a544 <hci_init+0x78>)
 800a508:	f000 fa2c 	bl	800a964 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	3301      	adds	r3, #1
 800a510:	73fb      	strb	r3, [r7, #15]
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b04      	cmp	r3, #4
 800a516:	d9ef      	bls.n	800a4f8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <hci_init+0x74>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <hci_init+0x5c>
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <hci_init+0x74>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2000      	movs	r0, #0
 800a526:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a528:	4b05      	ldr	r3, [pc, #20]	; (800a540 <hci_init+0x74>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <hci_init+0x6a>
 800a530:	4b03      	ldr	r3, [pc, #12]	; (800a540 <hci_init+0x74>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	4798      	blx	r3
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	2000a490 	.word	0x2000a490
 800a544:	2000a1c4 	.word	0x2000a1c4
 800a548:	2000a1cc 	.word	0x2000a1cc
 800a54c:	2000a1d4 	.word	0x2000a1d4

0800a550 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a0b      	ldr	r2, [pc, #44]	; (800a58c <hci_register_io_bus+0x3c>)
 800a55e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	4a09      	ldr	r2, [pc, #36]	; (800a58c <hci_register_io_bus+0x3c>)
 800a566:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	4a07      	ldr	r2, [pc, #28]	; (800a58c <hci_register_io_bus+0x3c>)
 800a56e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	4a05      	ldr	r2, [pc, #20]	; (800a58c <hci_register_io_bus+0x3c>)
 800a576:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	4a03      	ldr	r2, [pc, #12]	; (800a58c <hci_register_io_bus+0x3c>)
 800a57e:	6093      	str	r3, [r2, #8]
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	2000a490 	.word	0x2000a490

0800a590 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	885b      	ldrh	r3, [r3, #2]
 800a5a0:	b21b      	sxth	r3, r3
 800a5a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5a6:	b21a      	sxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	029b      	lsls	r3, r3, #10
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	b21b      	sxth	r3, r3
 800a5b4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 f978 	bl	800a8b4 <list_init_head>

  free_event_list();
 800a5c4:	f7ff ff64 	bl	800a490 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8818      	ldrh	r0, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8859      	ldrh	r1, [r3, #2]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f7ff fefd 	bl	800a3d8 <send_cmd>
  
  if (async)
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <hci_send_req+0x58>
  {
    return 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e0e2      	b.n	800a7ae <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a5e8:	f7f9 fd5c 	bl	80040a4 <HAL_GetTick>
 800a5ec:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a5ee:	f7f9 fd59 	bl	80040a4 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5fc:	f200 80b3 	bhi.w	800a766 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a600:	486d      	ldr	r0, [pc, #436]	; (800a7b8 <hci_send_req+0x228>)
 800a602:	f000 f967 	bl	800a8d4 <list_is_empty>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d000      	beq.n	800a60e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a60c:	e7ef      	b.n	800a5ee <hci_send_req+0x5e>
      {
        break;
 800a60e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a610:	f107 0310 	add.w	r3, r7, #16
 800a614:	4619      	mov	r1, r3
 800a616:	4868      	ldr	r0, [pc, #416]	; (800a7b8 <hci_send_req+0x228>)
 800a618:	f000 f9eb 	bl	800a9f2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	3308      	adds	r3, #8
 800a620:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b04      	cmp	r3, #4
 800a628:	d17f      	bne.n	800a72a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	3301      	adds	r3, #1
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	3308      	adds	r3, #8
 800a634:	3303      	adds	r3, #3
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a63e:	3b03      	subs	r3, #3
 800a640:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b3e      	cmp	r3, #62	; 0x3e
 800a648:	d04c      	beq.n	800a6e4 <hci_send_req+0x154>
 800a64a:	2b3e      	cmp	r3, #62	; 0x3e
 800a64c:	dc68      	bgt.n	800a720 <hci_send_req+0x190>
 800a64e:	2b10      	cmp	r3, #16
 800a650:	f000 808b 	beq.w	800a76a <hci_send_req+0x1da>
 800a654:	2b10      	cmp	r3, #16
 800a656:	dc63      	bgt.n	800a720 <hci_send_req+0x190>
 800a658:	2b0e      	cmp	r3, #14
 800a65a:	d023      	beq.n	800a6a4 <hci_send_req+0x114>
 800a65c:	2b0f      	cmp	r3, #15
 800a65e:	d15f      	bne.n	800a720 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d17e      	bne.n	800a76e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2b0f      	cmp	r3, #15
 800a676:	d004      	beq.n	800a682 <hci_send_req+0xf2>
          if (cs->status) {
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d051      	beq.n	800a724 <hci_send_req+0x194>
            goto failed;
 800a680:	e078      	b.n	800a774 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695a      	ldr	r2, [r3, #20]
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	429a      	cmp	r2, r3
 800a68a:	bf28      	it	cs
 800a68c:	461a      	movcs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	461a      	mov	r2, r3
 800a69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a69e:	f000 fa51 	bl	800ab44 <memcpy>
        goto done;
 800a6a2:	e078      	b.n	800a796 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d15d      	bne.n	800a772 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	3b03      	subs	r3, #3
 800a6c0:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	695a      	ldr	r2, [r3, #20]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	bf28      	it	cs
 800a6cc:	461a      	movcs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6918      	ldr	r0, [r3, #16]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6de:	f000 fa31 	bl	800ab44 <memcpy>
        goto done;
 800a6e2:	e058      	b.n	800a796 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d118      	bne.n	800a728 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	695a      	ldr	r2, [r3, #20]
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	429a      	cmp	r2, r3
 800a704:	bf28      	it	cs
 800a706:	461a      	movcs	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6918      	ldr	r0, [r3, #16]
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	461a      	mov	r2, r3
 800a71a:	f000 fa13 	bl	800ab44 <memcpy>
        goto done;
 800a71e:	e03a      	b.n	800a796 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a720:	bf00      	nop
 800a722:	e002      	b.n	800a72a <hci_send_req+0x19a>
          break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <hci_send_req+0x19a>
          break;
 800a728:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a72a:	4824      	ldr	r0, [pc, #144]	; (800a7bc <hci_send_req+0x22c>)
 800a72c:	f000 f8d2 	bl	800a8d4 <list_is_empty>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00d      	beq.n	800a752 <hci_send_req+0x1c2>
 800a736:	4820      	ldr	r0, [pc, #128]	; (800a7b8 <hci_send_req+0x228>)
 800a738:	f000 f8cc 	bl	800a8d4 <list_is_empty>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d007      	beq.n	800a752 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4619      	mov	r1, r3
 800a746:	481d      	ldr	r0, [pc, #116]	; (800a7bc <hci_send_req+0x22c>)
 800a748:	f000 f90c 	bl	800a964 <list_insert_tail>
      hciReadPacket=NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	e008      	b.n	800a764 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	f107 0308 	add.w	r3, r7, #8
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f902 	bl	800a964 <list_insert_tail>
      hciReadPacket=NULL;
 800a760:	2300      	movs	r3, #0
 800a762:	613b      	str	r3, [r7, #16]
  {
 800a764:	e740      	b.n	800a5e8 <hci_send_req+0x58>
        goto failed;
 800a766:	bf00      	nop
 800a768:	e004      	b.n	800a774 <hci_send_req+0x1e4>
        goto failed;
 800a76a:	bf00      	nop
 800a76c:	e002      	b.n	800a774 <hci_send_req+0x1e4>
          goto failed;
 800a76e:	bf00      	nop
 800a770:	e000      	b.n	800a774 <hci_send_req+0x1e4>
          goto failed;
 800a772:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	4619      	mov	r1, r3
 800a77e:	480f      	ldr	r0, [pc, #60]	; (800a7bc <hci_send_req+0x22c>)
 800a780:	f000 f8ca 	bl	800a918 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4619      	mov	r1, r3
 800a78a:	480b      	ldr	r0, [pc, #44]	; (800a7b8 <hci_send_req+0x228>)
 800a78c:	f7ff fe64 	bl	800a458 <move_list>

  return -1;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a794:	e00b      	b.n	800a7ae <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4619      	mov	r1, r3
 800a79a:	4808      	ldr	r0, [pc, #32]	; (800a7bc <hci_send_req+0x22c>)
 800a79c:	f000 f8bc 	bl	800a918 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4804      	ldr	r0, [pc, #16]	; (800a7b8 <hci_send_req+0x228>)
 800a7a8:	f7ff fe56 	bl	800a458 <move_list>

  return 0;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3738      	adds	r7, #56	; 0x38
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2000a1cc 	.word	0x2000a1cc
 800a7bc:	2000a1c4 	.word	0x2000a1c4

0800a7c0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a7ca:	e013      	b.n	800a7f4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a7cc:	1d3b      	adds	r3, r7, #4
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	480e      	ldr	r0, [pc, #56]	; (800a80c <hci_user_evt_proc+0x4c>)
 800a7d2:	f000 f90e 	bl	800a9f2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <hci_user_evt_proc+0x50>)
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d005      	beq.n	800a7ea <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a7de:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <hci_user_evt_proc+0x50>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	3208      	adds	r2, #8
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4809      	ldr	r0, [pc, #36]	; (800a814 <hci_user_evt_proc+0x54>)
 800a7f0:	f000 f8b8 	bl	800a964 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a7f4:	4805      	ldr	r0, [pc, #20]	; (800a80c <hci_user_evt_proc+0x4c>)
 800a7f6:	f000 f86d 	bl	800a8d4 <list_is_empty>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0e5      	beq.n	800a7cc <hci_user_evt_proc+0xc>
  }
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	2000a1cc 	.word	0x2000a1cc
 800a810:	2000a490 	.word	0x2000a490
 800a814:	2000a1c4 	.word	0x2000a1c4

0800a818 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a828:	481f      	ldr	r0, [pc, #124]	; (800a8a8 <hci_notify_asynch_evt+0x90>)
 800a82a:	f000 f853 	bl	800a8d4 <list_is_empty>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d132      	bne.n	800a89a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a834:	f107 030c 	add.w	r3, r7, #12
 800a838:	4619      	mov	r1, r3
 800a83a:	481b      	ldr	r0, [pc, #108]	; (800a8a8 <hci_notify_asynch_evt+0x90>)
 800a83c:	f000 f8d9 	bl	800a9f2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <hci_notify_asynch_evt+0x94>)
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d02a      	beq.n	800a89e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a848:	4b18      	ldr	r3, [pc, #96]	; (800a8ac <hci_notify_asynch_evt+0x94>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	3208      	adds	r2, #8
 800a850:	2180      	movs	r1, #128	; 0x80
 800a852:	4610      	mov	r0, r2
 800a854:	4798      	blx	r3
 800a856:	4603      	mov	r3, r0
 800a858:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a85a:	7cfb      	ldrb	r3, [r7, #19]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d016      	beq.n	800a88e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	7cfa      	ldrb	r2, [r7, #19]
 800a864:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fd94 	bl	800a398 <verify_packet>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d105      	bne.n	800a882 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4619      	mov	r1, r3
 800a87a:	480d      	ldr	r0, [pc, #52]	; (800a8b0 <hci_notify_asynch_evt+0x98>)
 800a87c:	f000 f872 	bl	800a964 <list_insert_tail>
 800a880:	e00d      	b.n	800a89e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4619      	mov	r1, r3
 800a886:	4808      	ldr	r0, [pc, #32]	; (800a8a8 <hci_notify_asynch_evt+0x90>)
 800a888:	f000 f846 	bl	800a918 <list_insert_head>
 800a88c:	e007      	b.n	800a89e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4619      	mov	r1, r3
 800a892:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <hci_notify_asynch_evt+0x90>)
 800a894:	f000 f840 	bl	800a918 <list_insert_head>
 800a898:	e001      	b.n	800a89e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a89e:	697b      	ldr	r3, [r7, #20]

}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	2000a1c4 	.word	0x2000a1c4
 800a8ac:	2000a490 	.word	0x2000a490
 800a8b0:	2000a1cc 	.word	0x2000a1cc

0800a8b4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	605a      	str	r2, [r3, #4]
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e6:	b672      	cpsid	i
}
 800a8e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d102      	bne.n	800a8fa <list_is_empty+0x26>
  {
    return_value = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	75fb      	strb	r3, [r7, #23]
 800a8f8:	e001      	b.n	800a8fe <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f383 8810 	msr	PRIMASK, r3
}
 800a908:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a922:	f3ef 8310 	mrs	r3, PRIMASK
 800a926:	60fb      	str	r3, [r7, #12]
  return(result);
 800a928:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a92a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a92c:	b672      	cpsid	i
}
 800a92e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	605a      	str	r2, [r3, #4]
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f383 8810 	msr	PRIMASK, r3
}
 800a956:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a958:	bf00      	nop
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96e:	f3ef 8310 	mrs	r3, PRIMASK
 800a972:	60fb      	str	r3, [r7, #12]
  return(result);
 800a974:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a976:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a978:	b672      	cpsid	i
}
 800a97a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f383 8810 	msr	PRIMASK, r3
}
 800a9a2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a9a4:	bf00      	nop
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9be:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c2:	b672      	cpsid	i
}
 800a9c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6852      	ldr	r2, [r2, #4]
 800a9d8:	605a      	str	r2, [r3, #4]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f383 8810 	msr	PRIMASK, r3
}
 800a9e4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a9e6:	bf00      	nop
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b086      	sub	sp, #24
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800aa00:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa02:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa06:	b672      	cpsid	i
}
 800aa08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff ffca 	bl	800a9b0 <list_remove_node>
  (*node)->next = NULL;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	605a      	str	r2, [r3, #4]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f383 8810 	msr	PRIMASK, r3
}
 800aa36:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa4a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa50:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa54:	b672      	cpsid	i
}
 800aa56:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff ffa3 	bl	800a9b0 <list_remove_node>
  (*node)->next = NULL;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f383 8810 	msr	PRIMASK, r3
}
 800aa84:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aa86:	bf00      	nop
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b089      	sub	sp, #36	; 0x24
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  int size = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa9a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9e:	613b      	str	r3, [r7, #16]
  return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aaa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaa4:	b672      	cpsid	i
}
 800aaa6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800aaae:	e005      	b.n	800aabc <list_get_size+0x2e>
  {
    size++;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	3301      	adds	r3, #1
 800aab4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d1f5      	bne.n	800aab0 <list_get_size+0x22>
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f383 8810 	msr	PRIMASK, r3
}
 800aace:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800aad0:	69fb      	ldr	r3, [r7, #28]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3724      	adds	r7, #36	; 0x24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <memset>:
 800aade:	4402      	add	r2, r0
 800aae0:	4603      	mov	r3, r0
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d100      	bne.n	800aae8 <memset+0xa>
 800aae6:	4770      	bx	lr
 800aae8:	f803 1b01 	strb.w	r1, [r3], #1
 800aaec:	e7f9      	b.n	800aae2 <memset+0x4>
	...

0800aaf0 <__errno>:
 800aaf0:	4b01      	ldr	r3, [pc, #4]	; (800aaf8 <__errno+0x8>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	20000088 	.word	0x20000088

0800aafc <__libc_init_array>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4d0d      	ldr	r5, [pc, #52]	; (800ab34 <__libc_init_array+0x38>)
 800ab00:	4c0d      	ldr	r4, [pc, #52]	; (800ab38 <__libc_init_array+0x3c>)
 800ab02:	1b64      	subs	r4, r4, r5
 800ab04:	10a4      	asrs	r4, r4, #2
 800ab06:	2600      	movs	r6, #0
 800ab08:	42a6      	cmp	r6, r4
 800ab0a:	d109      	bne.n	800ab20 <__libc_init_array+0x24>
 800ab0c:	4d0b      	ldr	r5, [pc, #44]	; (800ab3c <__libc_init_array+0x40>)
 800ab0e:	4c0c      	ldr	r4, [pc, #48]	; (800ab40 <__libc_init_array+0x44>)
 800ab10:	f000 fa28 	bl	800af64 <_init>
 800ab14:	1b64      	subs	r4, r4, r5
 800ab16:	10a4      	asrs	r4, r4, #2
 800ab18:	2600      	movs	r6, #0
 800ab1a:	42a6      	cmp	r6, r4
 800ab1c:	d105      	bne.n	800ab2a <__libc_init_array+0x2e>
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
 800ab20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab24:	4798      	blx	r3
 800ab26:	3601      	adds	r6, #1
 800ab28:	e7ee      	b.n	800ab08 <__libc_init_array+0xc>
 800ab2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2e:	4798      	blx	r3
 800ab30:	3601      	adds	r6, #1
 800ab32:	e7f2      	b.n	800ab1a <__libc_init_array+0x1e>
 800ab34:	0800aff0 	.word	0x0800aff0
 800ab38:	0800aff0 	.word	0x0800aff0
 800ab3c:	0800aff0 	.word	0x0800aff0
 800ab40:	0800aff4 	.word	0x0800aff4

0800ab44 <memcpy>:
 800ab44:	440a      	add	r2, r1
 800ab46:	4291      	cmp	r1, r2
 800ab48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab4c:	d100      	bne.n	800ab50 <memcpy+0xc>
 800ab4e:	4770      	bx	lr
 800ab50:	b510      	push	{r4, lr}
 800ab52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab5a:	4291      	cmp	r1, r2
 800ab5c:	d1f9      	bne.n	800ab52 <memcpy+0xe>
 800ab5e:	bd10      	pop	{r4, pc}

0800ab60 <log>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	ed2d 8b02 	vpush	{d8}
 800ab66:	ec55 4b10 	vmov	r4, r5, d0
 800ab6a:	f000 f841 	bl	800abf0 <__ieee754_log>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	462b      	mov	r3, r5
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	eeb0 8a40 	vmov.f32	s16, s0
 800ab7a:	eef0 8a60 	vmov.f32	s17, s1
 800ab7e:	f7f5 ff81 	bl	8000a84 <__aeabi_dcmpun>
 800ab82:	b998      	cbnz	r0, 800abac <log+0x4c>
 800ab84:	2200      	movs	r2, #0
 800ab86:	2300      	movs	r3, #0
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	f7f5 ff70 	bl	8000a70 <__aeabi_dcmpgt>
 800ab90:	b960      	cbnz	r0, 800abac <log+0x4c>
 800ab92:	2200      	movs	r2, #0
 800ab94:	2300      	movs	r3, #0
 800ab96:	4620      	mov	r0, r4
 800ab98:	4629      	mov	r1, r5
 800ab9a:	f7f5 ff41 	bl	8000a20 <__aeabi_dcmpeq>
 800ab9e:	b160      	cbz	r0, 800abba <log+0x5a>
 800aba0:	f7ff ffa6 	bl	800aaf0 <__errno>
 800aba4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800abd0 <log+0x70>
 800aba8:	2322      	movs	r3, #34	; 0x22
 800abaa:	6003      	str	r3, [r0, #0]
 800abac:	eeb0 0a48 	vmov.f32	s0, s16
 800abb0:	eef0 0a68 	vmov.f32	s1, s17
 800abb4:	ecbd 8b02 	vpop	{d8}
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	f7ff ff99 	bl	800aaf0 <__errno>
 800abbe:	ecbd 8b02 	vpop	{d8}
 800abc2:	2321      	movs	r3, #33	; 0x21
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abca:	4803      	ldr	r0, [pc, #12]	; (800abd8 <log+0x78>)
 800abcc:	f000 b808 	b.w	800abe0 <nan>
 800abd0:	00000000 	.word	0x00000000
 800abd4:	fff00000 	.word	0xfff00000
 800abd8:	0800afe4 	.word	0x0800afe4
 800abdc:	00000000 	.word	0x00000000

0800abe0 <nan>:
 800abe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abe8 <nan+0x8>
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	00000000 	.word	0x00000000
 800abec:	7ff80000 	.word	0x7ff80000

0800abf0 <__ieee754_log>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	ec51 0b10 	vmov	r0, r1, d0
 800abf8:	ed2d 8b04 	vpush	{d8-d9}
 800abfc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac00:	b083      	sub	sp, #12
 800ac02:	460d      	mov	r5, r1
 800ac04:	da29      	bge.n	800ac5a <__ieee754_log+0x6a>
 800ac06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac0a:	4303      	orrs	r3, r0
 800ac0c:	ee10 2a10 	vmov	r2, s0
 800ac10:	d10c      	bne.n	800ac2c <__ieee754_log+0x3c>
 800ac12:	49cf      	ldr	r1, [pc, #828]	; (800af50 <__ieee754_log+0x360>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f7f5 fdc3 	bl	80007a4 <__aeabi_ddiv>
 800ac1e:	ec41 0b10 	vmov	d0, r0, r1
 800ac22:	b003      	add	sp, #12
 800ac24:	ecbd 8b04 	vpop	{d8-d9}
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	da05      	bge.n	800ac3c <__ieee754_log+0x4c>
 800ac30:	460b      	mov	r3, r1
 800ac32:	f7f5 fad5 	bl	80001e0 <__aeabi_dsub>
 800ac36:	2200      	movs	r2, #0
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e7ee      	b.n	800ac1a <__ieee754_log+0x2a>
 800ac3c:	4bc5      	ldr	r3, [pc, #788]	; (800af54 <__ieee754_log+0x364>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f7f5 fc86 	bl	8000550 <__aeabi_dmul>
 800ac44:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ac48:	460d      	mov	r5, r1
 800ac4a:	4ac3      	ldr	r2, [pc, #780]	; (800af58 <__ieee754_log+0x368>)
 800ac4c:	4295      	cmp	r5, r2
 800ac4e:	dd06      	ble.n	800ac5e <__ieee754_log+0x6e>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	f7f5 fac6 	bl	80001e4 <__adddf3>
 800ac58:	e7e1      	b.n	800ac1e <__ieee754_log+0x2e>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e7f5      	b.n	800ac4a <__ieee754_log+0x5a>
 800ac5e:	152c      	asrs	r4, r5, #20
 800ac60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac64:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac68:	441c      	add	r4, r3
 800ac6a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ac6e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ac72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac76:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ac7a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ac7e:	ea42 0105 	orr.w	r1, r2, r5
 800ac82:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ac86:	2200      	movs	r2, #0
 800ac88:	4bb4      	ldr	r3, [pc, #720]	; (800af5c <__ieee754_log+0x36c>)
 800ac8a:	f7f5 faa9 	bl	80001e0 <__aeabi_dsub>
 800ac8e:	1cab      	adds	r3, r5, #2
 800ac90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	4682      	mov	sl, r0
 800ac98:	468b      	mov	fp, r1
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	dc53      	bgt.n	800ad48 <__ieee754_log+0x158>
 800aca0:	2300      	movs	r3, #0
 800aca2:	f7f5 febd 	bl	8000a20 <__aeabi_dcmpeq>
 800aca6:	b1d0      	cbz	r0, 800acde <__ieee754_log+0xee>
 800aca8:	2c00      	cmp	r4, #0
 800acaa:	f000 8122 	beq.w	800aef2 <__ieee754_log+0x302>
 800acae:	4620      	mov	r0, r4
 800acb0:	f7f5 fbe4 	bl	800047c <__aeabi_i2d>
 800acb4:	a390      	add	r3, pc, #576	; (adr r3, 800aef8 <__ieee754_log+0x308>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	4606      	mov	r6, r0
 800acbc:	460f      	mov	r7, r1
 800acbe:	f7f5 fc47 	bl	8000550 <__aeabi_dmul>
 800acc2:	a38f      	add	r3, pc, #572	; (adr r3, 800af00 <__ieee754_log+0x310>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fc3e 	bl	8000550 <__aeabi_dmul>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4620      	mov	r0, r4
 800acda:	4629      	mov	r1, r5
 800acdc:	e7ba      	b.n	800ac54 <__ieee754_log+0x64>
 800acde:	a38a      	add	r3, pc, #552	; (adr r3, 800af08 <__ieee754_log+0x318>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	4650      	mov	r0, sl
 800ace6:	4659      	mov	r1, fp
 800ace8:	f7f5 fc32 	bl	8000550 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	2000      	movs	r0, #0
 800acf2:	499b      	ldr	r1, [pc, #620]	; (800af60 <__ieee754_log+0x370>)
 800acf4:	f7f5 fa74 	bl	80001e0 <__aeabi_dsub>
 800acf8:	4652      	mov	r2, sl
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	465b      	mov	r3, fp
 800ad00:	4650      	mov	r0, sl
 800ad02:	4659      	mov	r1, fp
 800ad04:	f7f5 fc24 	bl	8000550 <__aeabi_dmul>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	4639      	mov	r1, r7
 800ad10:	f7f5 fc1e 	bl	8000550 <__aeabi_dmul>
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	b914      	cbnz	r4, 800ad20 <__ieee754_log+0x130>
 800ad1a:	4632      	mov	r2, r6
 800ad1c:	463b      	mov	r3, r7
 800ad1e:	e0a2      	b.n	800ae66 <__ieee754_log+0x276>
 800ad20:	4620      	mov	r0, r4
 800ad22:	f7f5 fbab 	bl	800047c <__aeabi_i2d>
 800ad26:	a374      	add	r3, pc, #464	; (adr r3, 800aef8 <__ieee754_log+0x308>)
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	f7f5 fc0e 	bl	8000550 <__aeabi_dmul>
 800ad34:	a372      	add	r3, pc, #456	; (adr r3, 800af00 <__ieee754_log+0x310>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	f7f5 fc05 	bl	8000550 <__aeabi_dmul>
 800ad46:	e0a7      	b.n	800ae98 <__ieee754_log+0x2a8>
 800ad48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad4c:	f7f5 fa4a 	bl	80001e4 <__adddf3>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4650      	mov	r0, sl
 800ad56:	4659      	mov	r1, fp
 800ad58:	f7f5 fd24 	bl	80007a4 <__aeabi_ddiv>
 800ad5c:	ec41 0b18 	vmov	d8, r0, r1
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7f5 fb8b 	bl	800047c <__aeabi_i2d>
 800ad66:	ec53 2b18 	vmov	r2, r3, d8
 800ad6a:	ec41 0b19 	vmov	d9, r0, r1
 800ad6e:	ec51 0b18 	vmov	r0, r1, d8
 800ad72:	f7f5 fbed 	bl	8000550 <__aeabi_dmul>
 800ad76:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ad7a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4680      	mov	r8, r0
 800ad86:	4689      	mov	r9, r1
 800ad88:	f7f5 fbe2 	bl	8000550 <__aeabi_dmul>
 800ad8c:	a360      	add	r3, pc, #384	; (adr r3, 800af10 <__ieee754_log+0x320>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	4606      	mov	r6, r0
 800ad94:	460f      	mov	r7, r1
 800ad96:	f7f5 fbdb 	bl	8000550 <__aeabi_dmul>
 800ad9a:	a35f      	add	r3, pc, #380	; (adr r3, 800af18 <__ieee754_log+0x328>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fa20 	bl	80001e4 <__adddf3>
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	f7f5 fbd2 	bl	8000550 <__aeabi_dmul>
 800adac:	a35c      	add	r3, pc, #368	; (adr r3, 800af20 <__ieee754_log+0x330>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 fa17 	bl	80001e4 <__adddf3>
 800adb6:	4632      	mov	r2, r6
 800adb8:	463b      	mov	r3, r7
 800adba:	f7f5 fbc9 	bl	8000550 <__aeabi_dmul>
 800adbe:	a35a      	add	r3, pc, #360	; (adr r3, 800af28 <__ieee754_log+0x338>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fa0e 	bl	80001e4 <__adddf3>
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	f7f5 fbc0 	bl	8000550 <__aeabi_dmul>
 800add0:	a357      	add	r3, pc, #348	; (adr r3, 800af30 <__ieee754_log+0x340>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	4630      	mov	r0, r6
 800addc:	4639      	mov	r1, r7
 800adde:	f7f5 fbb7 	bl	8000550 <__aeabi_dmul>
 800ade2:	a355      	add	r3, pc, #340	; (adr r3, 800af38 <__ieee754_log+0x348>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f7f5 f9fc 	bl	80001e4 <__adddf3>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	f7f5 fbae 	bl	8000550 <__aeabi_dmul>
 800adf4:	a352      	add	r3, pc, #328	; (adr r3, 800af40 <__ieee754_log+0x350>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 f9f3 	bl	80001e4 <__adddf3>
 800adfe:	4632      	mov	r2, r6
 800ae00:	463b      	mov	r3, r7
 800ae02:	f7f5 fba5 	bl	8000550 <__aeabi_dmul>
 800ae06:	460b      	mov	r3, r1
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	f7f5 f9e9 	bl	80001e4 <__adddf3>
 800ae12:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae16:	9b01      	ldr	r3, [sp, #4]
 800ae18:	3551      	adds	r5, #81	; 0x51
 800ae1a:	431d      	orrs	r5, r3
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	4680      	mov	r8, r0
 800ae20:	4689      	mov	r9, r1
 800ae22:	dd48      	ble.n	800aeb6 <__ieee754_log+0x2c6>
 800ae24:	4b4e      	ldr	r3, [pc, #312]	; (800af60 <__ieee754_log+0x370>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	4650      	mov	r0, sl
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	f7f5 fb90 	bl	8000550 <__aeabi_dmul>
 800ae30:	4652      	mov	r2, sl
 800ae32:	465b      	mov	r3, fp
 800ae34:	f7f5 fb8c 	bl	8000550 <__aeabi_dmul>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 f9ce 	bl	80001e4 <__adddf3>
 800ae48:	ec53 2b18 	vmov	r2, r3, d8
 800ae4c:	f7f5 fb80 	bl	8000550 <__aeabi_dmul>
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	b964      	cbnz	r4, 800ae70 <__ieee754_log+0x280>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	f7f5 f9bf 	bl	80001e0 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4650      	mov	r0, sl
 800ae68:	4659      	mov	r1, fp
 800ae6a:	f7f5 f9b9 	bl	80001e0 <__aeabi_dsub>
 800ae6e:	e6d6      	b.n	800ac1e <__ieee754_log+0x2e>
 800ae70:	a321      	add	r3, pc, #132	; (adr r3, 800aef8 <__ieee754_log+0x308>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	ec51 0b19 	vmov	r0, r1, d9
 800ae7a:	f7f5 fb69 	bl	8000550 <__aeabi_dmul>
 800ae7e:	a320      	add	r3, pc, #128	; (adr r3, 800af00 <__ieee754_log+0x310>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	4604      	mov	r4, r0
 800ae86:	460d      	mov	r5, r1
 800ae88:	ec51 0b19 	vmov	r0, r1, d9
 800ae8c:	f7f5 fb60 	bl	8000550 <__aeabi_dmul>
 800ae90:	4642      	mov	r2, r8
 800ae92:	464b      	mov	r3, r9
 800ae94:	f7f5 f9a6 	bl	80001e4 <__adddf3>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 f99e 	bl	80001e0 <__aeabi_dsub>
 800aea4:	4652      	mov	r2, sl
 800aea6:	465b      	mov	r3, fp
 800aea8:	f7f5 f99a 	bl	80001e0 <__aeabi_dsub>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	e7d9      	b.n	800ae6a <__ieee754_log+0x27a>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4650      	mov	r0, sl
 800aebc:	4659      	mov	r1, fp
 800aebe:	f7f5 f98f 	bl	80001e0 <__aeabi_dsub>
 800aec2:	ec53 2b18 	vmov	r2, r3, d8
 800aec6:	f7f5 fb43 	bl	8000550 <__aeabi_dmul>
 800aeca:	4606      	mov	r6, r0
 800aecc:	460f      	mov	r7, r1
 800aece:	2c00      	cmp	r4, #0
 800aed0:	f43f af23 	beq.w	800ad1a <__ieee754_log+0x12a>
 800aed4:	a308      	add	r3, pc, #32	; (adr r3, 800aef8 <__ieee754_log+0x308>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	ec51 0b19 	vmov	r0, r1, d9
 800aede:	f7f5 fb37 	bl	8000550 <__aeabi_dmul>
 800aee2:	a307      	add	r3, pc, #28	; (adr r3, 800af00 <__ieee754_log+0x310>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	4604      	mov	r4, r0
 800aeea:	460d      	mov	r5, r1
 800aeec:	ec51 0b19 	vmov	r0, r1, d9
 800aef0:	e727      	b.n	800ad42 <__ieee754_log+0x152>
 800aef2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800af48 <__ieee754_log+0x358>
 800aef6:	e694      	b.n	800ac22 <__ieee754_log+0x32>
 800aef8:	fee00000 	.word	0xfee00000
 800aefc:	3fe62e42 	.word	0x3fe62e42
 800af00:	35793c76 	.word	0x35793c76
 800af04:	3dea39ef 	.word	0x3dea39ef
 800af08:	55555555 	.word	0x55555555
 800af0c:	3fd55555 	.word	0x3fd55555
 800af10:	df3e5244 	.word	0xdf3e5244
 800af14:	3fc2f112 	.word	0x3fc2f112
 800af18:	96cb03de 	.word	0x96cb03de
 800af1c:	3fc74664 	.word	0x3fc74664
 800af20:	94229359 	.word	0x94229359
 800af24:	3fd24924 	.word	0x3fd24924
 800af28:	55555593 	.word	0x55555593
 800af2c:	3fe55555 	.word	0x3fe55555
 800af30:	d078c69f 	.word	0xd078c69f
 800af34:	3fc39a09 	.word	0x3fc39a09
 800af38:	1d8e78af 	.word	0x1d8e78af
 800af3c:	3fcc71c5 	.word	0x3fcc71c5
 800af40:	9997fa04 	.word	0x9997fa04
 800af44:	3fd99999 	.word	0x3fd99999
	...
 800af50:	c3500000 	.word	0xc3500000
 800af54:	43500000 	.word	0x43500000
 800af58:	7fefffff 	.word	0x7fefffff
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	3fe00000 	.word	0x3fe00000

0800af64 <_init>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	bf00      	nop
 800af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6a:	bc08      	pop	{r3}
 800af6c:	469e      	mov	lr, r3
 800af6e:	4770      	bx	lr

0800af70 <_fini>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr
