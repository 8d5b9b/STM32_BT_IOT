
FinalBLEProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dcc  08009dcc  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd4  08009dd4  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08009ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014064  20000038  08009e14  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001409c  08009e14  0002409c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000223e2  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e3e  00000000  00000000  0004248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  000472d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c0  00000000  00000000  00049058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e642  00000000  00000000  0004a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025bf3  00000000  00000000  00078d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109571  00000000  00000000  0009e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a1c  00000000  00000000  001a7ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001af8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d4c 	.word	0x08009d4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08009d4c 	.word	0x08009d4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <HCI_TL_SPI_Init+0x88>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e0:	4a1e      	ldr	r2, [pc, #120]	; (800055c <HCI_TL_SPI_Init+0x88>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <HCI_TL_SPI_Init+0x88>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80004f4:	2340      	movs	r3, #64	; 0x40
 80004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	4619      	mov	r1, r3
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <HCI_TL_SPI_Init+0x8c>)
 800050a:	f003 ff99 	bl	8004440 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800050e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f003 ff89 	bl	8004440 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800052e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <HCI_TL_SPI_Init+0x90>)
 8000548:	f003 ff7a 	bl	8004440 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800054c:	f002 faf8 	bl	8002b40 <BSP_SPI3_Init>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	48001000 	.word	0x48001000
 8000564:	48000c00 	.word	0x48000c00

08000568 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800056c:	2140      	movs	r1, #64	; 0x40
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <HCI_TL_SPI_DeInit+0x28>)
 8000570:	f004 f910 	bl	8004794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <HCI_TL_SPI_DeInit+0x2c>)
 800057a:	f004 f90b 	bl	8004794 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f004 f905 	bl	8004794 <HAL_GPIO_DeInit>
  return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48001000 	.word	0x48001000
 8000594:	48000c00 	.word	0x48000c00

08000598 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <HCI_TL_SPI_Reset+0x40>)
 80005a4:	f004 fa02 	bl	80049ac <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f004 f9fb 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f002 fe7c 	bl	80032b4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f004 f9f1 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005ca:	2005      	movs	r0, #5
 80005cc:	f002 fe72 	bl	80032b4 <HAL_Delay>
  return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	48000c00 	.word	0x48000c00

080005dc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80005ec:	23ff      	movs	r3, #255	; 0xff
 80005ee:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <HCI_TL_SPI_Receive+0xb0>)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fa:	6018      	str	r0, [r3, #0]
 80005fc:	3304      	adds	r3, #4
 80005fe:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	4822      	ldr	r0, [pc, #136]	; (8000690 <HCI_TL_SPI_Receive+0xb4>)
 8000608:	f004 f9d0 	bl	80049ac <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800060c:	f107 010c 	add.w	r1, r7, #12
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2205      	movs	r2, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fac2 	bl	8002ba0 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 800061c:	7b3b      	ldrb	r3, [r7, #12]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d129      	bne.n	8000676 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000622:	7c3b      	ldrb	r3, [r7, #16]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	b21a      	sxth	r2, r3
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000632:	8bfb      	ldrh	r3, [r7, #30]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01e      	beq.n	8000676 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000638:	8bfa      	ldrh	r2, [r7, #30]
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	429a      	cmp	r2, r3
 800063e:	d901      	bls.n	8000644 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000644:	2300      	movs	r3, #0
 8000646:	777b      	strb	r3, [r7, #29]
 8000648:	e010      	b.n	800066c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800064a:	f107 011b 	add.w	r1, r7, #27
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2201      	movs	r2, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f002 faa3 	bl	8002ba0 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800065a:	7f7b      	ldrb	r3, [r7, #29]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	7efa      	ldrb	r2, [r7, #27]
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000666:	7f7b      	ldrb	r3, [r7, #29]
 8000668:	3301      	adds	r3, #1
 800066a:	777b      	strb	r3, [r7, #29]
 800066c:	7f7b      	ldrb	r3, [r7, #29]
 800066e:	b29b      	uxth	r3, r3
 8000670:	8bfa      	ldrh	r2, [r7, #30]
 8000672:	429a      	cmp	r2, r3
 8000674:	d8e9      	bhi.n	800064a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <HCI_TL_SPI_Receive+0xb4>)
 800067e:	f004 f995 	bl	80049ac <HAL_GPIO_WritePin>

  return len;
 8000682:	7f7b      	ldrb	r3, [r7, #29]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08009d64 	.word	0x08009d64
 8000690:	48000c00 	.word	0x48000c00

08000694 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006a0:	4a24      	ldr	r2, [pc, #144]	; (8000734 <HCI_TL_SPI_Send+0xa0>)
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f002 fdf4 	bl	800329c <HAL_GetTick>
 80006b4:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	481d      	ldr	r0, [pc, #116]	; (8000738 <HCI_TL_SPI_Send+0xa4>)
 80006c2:	f004 f973 	bl	80049ac <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2205      	movs	r2, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fa65 	bl	8002ba0 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80006d6:	7a3b      	ldrb	r3, [r7, #8]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d10f      	bne.n	80006fc <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80006dc:	7a7b      	ldrb	r3, [r7, #9]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d806      	bhi.n	80006f4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4914      	ldr	r1, [pc, #80]	; (800073c <HCI_TL_SPI_Send+0xa8>)
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f002 fa57 	bl	8002ba0 <BSP_SPI3_SendRecv>
 80006f2:	e006      	b.n	8000702 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80006f4:	f06f 0301 	mvn.w	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e002      	b.n	8000702 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000700:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <HCI_TL_SPI_Send+0xa4>)
 800070a:	f004 f94f 	bl	80049ac <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800070e:	f002 fdc5 	bl	800329c <HAL_GetTick>
 8000712:	4602      	mov	r2, r0
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d903      	bls.n	8000724 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 800071c:	f06f 0302 	mvn.w	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
      break;
 8000722:	e002      	b.n	800072a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dbc5      	blt.n	80006b6 <HCI_TL_SPI_Send+0x22>

  return result;
 800072a:	69fb      	ldr	r3, [r7, #28]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08009d6c 	.word	0x08009d6c
 8000738:	48000c00 	.word	0x48000c00
 800073c:	2000005c 	.word	0x2000005c

08000740 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <IsDataAvailable+0x1c>)
 8000748:	f004 f918 	bl	800497c <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	bd80      	pop	{r7, pc}
 800075c:	48001000 	.word	0x48001000

08000760 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <hci_tl_lowlevel_init+0x50>)
 8000768:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <hci_tl_lowlevel_init+0x54>)
 800076c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <hci_tl_lowlevel_init+0x58>)
 8000770:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <hci_tl_lowlevel_init+0x5c>)
 8000774:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <hci_tl_lowlevel_init+0x60>)
 8000778:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <hci_tl_lowlevel_init+0x64>)
 800077c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f008 ffe1 	bl	8009748 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000786:	4910      	ldr	r1, [pc, #64]	; (80007c8 <hci_tl_lowlevel_init+0x68>)
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <hci_tl_lowlevel_init+0x6c>)
 800078a:	f003 fe14 	bl	80043b6 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <hci_tl_lowlevel_init+0x70>)
 8000790:	2100      	movs	r1, #0
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <hci_tl_lowlevel_init+0x6c>)
 8000794:	f003 fdf5 	bl	8004382 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2017      	movs	r0, #23
 800079e:	f002 fe88 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007a2:	2017      	movs	r0, #23
 80007a4:	f002 fea1 	bl	80034ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	080004d5 	.word	0x080004d5
 80007b4:	08000569 	.word	0x08000569
 80007b8:	08000695 	.word	0x08000695
 80007bc:	080005dd 	.word	0x080005dd
 80007c0:	08000599 	.word	0x08000599
 80007c4:	08002be1 	.word	0x08002be1
 80007c8:	16000006 	.word	0x16000006
 80007cc:	20000054 	.word	0x20000054
 80007d0:	080007d5 	.word	0x080007d5

080007d4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80007d8:	e005      	b.n	80007e6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80007da:	2000      	movs	r0, #0
 80007dc:	f009 f918 	bl	8009a10 <hci_notify_asynch_evt>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d105      	bne.n	80007f2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80007e6:	f7ff ffab 	bl	8000740 <IsDataAvailable>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f4      	bne.n	80007da <hci_tl_lowlevel_isr+0x6>
 80007f0:	e000      	b.n	80007f4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80007f2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == myButton_Pin) {
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000808:	d10d      	bne.n	8000826 <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_GPIO_TogglePin(myLED_GPIO_Port, myLED_Pin);
 800080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_GPIO_EXTI_Callback+0x38>)
 8000810:	f004 f8e4 	bl	80049dc <HAL_GPIO_TogglePin>
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000816:	f003 fa2d 	bl	8003c74 <HAL_DFSDM_FilterRegularStop_DMA>
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,wave_value,10000);
 800081a:	f242 7210 	movw	r2, #10000	; 0x2710
 800081e:	4906      	ldr	r1, [pc, #24]	; (8000838 <HAL_GPIO_EXTI_Callback+0x40>)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000822:	f003 f9a5 	bl	8003b70 <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	48000400 	.word	0x48000400
 8000834:	20000170 	.word	0x20000170
 8000838:	200003b8 	.word	0x200003b8

0800083c <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef * hdfsdm_filter){
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	//bitshift by 8
	int32_t min = wave_value[0]>>8;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	121b      	asrs	r3, r3, #8
 800084a:	617b      	str	r3, [r7, #20]
	int32_t max = min;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 10000; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e023      	b.n	800089e <HAL_DFSDM_FilterRegConvCpltCallback+0x62>
		wave_value_filtered[i] = wave_value[i]>>8;
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	121a      	asrs	r2, r3, #8
 8000860:	4918      	ldr	r1, [pc, #96]	; (80008c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(wave_value_filtered[i] > max){
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	429a      	cmp	r2, r3
 8000874:	da04      	bge.n	8000880 <HAL_DFSDM_FilterRegConvCpltCallback+0x44>
			max = wave_value_filtered[i];
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	613b      	str	r3, [r7, #16]
		}
		if(wave_value_filtered[i] < min){
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	429a      	cmp	r2, r3
 800088c:	dd04      	ble.n	8000898 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>
			min = wave_value_filtered[i];
 800088e:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000896:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 10000; i++){
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3301      	adds	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008a4:	4293      	cmp	r3, r2
 80008a6:	ddd6      	ble.n	8000856 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
		}
	}
	noise_level = max-min;
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	200003b8 	.word	0x200003b8
 80008c4:	20009ff8 	.word	0x20009ff8
 80008c8:	20013c38 	.word	0x20013c38

080008cc <getReadings>:
BLE_Update_Data getReadings(){
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	BLE_Update_Data curr_data;
	curr_data.noise = noise_level;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <getReadings+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	617b      	str	r3, [r7, #20]
	curr_data.pressure = (int16_t) BSP_PSENSOR_ReadPressure();
 80008da:	f001 fd09 	bl	80022f0 <BSP_PSENSOR_ReadPressure>
 80008de:	eef0 7a40 	vmov.f32	s15, s0
 80008e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e6:	ee17 3a90 	vmov	r3, s15
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	81fb      	strh	r3, [r7, #14]
	curr_data.humidity =(int16_t) BSP_HSENSOR_ReadHumidity();
 80008ee:	f001 fcd1 	bl	8002294 <BSP_HSENSOR_ReadHumidity>
 80008f2:	eef0 7a40 	vmov.f32	s15, s0
 80008f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fa:	ee17 3a90 	vmov	r3, s15
 80008fe:	b21b      	sxth	r3, r3
 8000900:	823b      	strh	r3, [r7, #16]
	curr_data.temperature = (int16_t) BSP_TSENSOR_ReadTemp();
 8000902:	f002 f90f 	bl	8002b24 <BSP_TSENSOR_ReadTemp>
 8000906:	eef0 7a40 	vmov.f32	s15, s0
 800090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	b21b      	sxth	r3, r3
 8000914:	81bb      	strh	r3, [r7, #12]
	curr_data.timestamp = HAL_GetTick();
 8000916:	f002 fcc1 	bl	800329c <HAL_GetTick>
 800091a:	4603      	mov	r3, r0
 800091c:	60bb      	str	r3, [r7, #8]
	return curr_data;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	461c      	mov	r4, r3
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	371c      	adds	r7, #28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	20013c38 	.word	0x20013c38

08000938 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093e:	f002 fc44 	bl	80031ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000942:	f000 f84f 	bl	80009e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000946:	f000 fa3b 	bl	8000dc0 <MX_GPIO_Init>
	MX_DMA_Init();
 800094a:	f000 fa1b 	bl	8000d84 <MX_DMA_Init>
	MX_I2C2_Init();
 800094e:	f000 f985 	bl	8000c5c <MX_I2C2_Init>
	MX_DFSDM1_Init();
 8000952:	f000 f8dd 	bl	8000b10 <MX_DFSDM1_Init>
	MX_DAC1_Init();
 8000956:	f000 f8a7 	bl	8000aa8 <MX_DAC1_Init>
	MX_I2C1_Init();
 800095a:	f000 f93f 	bl	8000bdc <MX_I2C1_Init>
	MX_QUADSPI_Init();
 800095e:	f000 f9bb 	bl	8000cd8 <MX_QUADSPI_Init>
	MX_USART1_UART_Init();
 8000962:	f000 f9df 	bl	8000d24 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BSP_PSENSOR_Init();
 8000966:	f001 fca3 	bl	80022b0 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 800096a:	f002 f8bf 	bl	8002aec <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 800096e:	f001 fc71 	bl	8002254 <BSP_HSENSOR_Init>
	if (BSP_QSPI_Init() != QSPI_OK) {
 8000972:	f001 fccb 	bl	800230c <BSP_QSPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <main+0x48>
		Error_Handler();
 800097c:	f000 fc9b 	bl	80012b6 <Error_Handler>
	}
	init_ble();
 8000980:	f000 fc9e 	bl	80012c0 <init_ble>
	BLE_Update_Data curr_data;
	single_block_data_size = MAX_DATA_SINGLE_BLOCK / sizeof(BLE_Update_Data);
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0xa8>)
 8000986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800098a:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		curr_data= getReadings();
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff9b 	bl	80008cc <getReadings>
		uint16_t data_length = readNumOfData_1();
 8000996:	f000 fbe3 	bl	8001160 <readNumOfData_1>
 800099a:	4603      	mov	r3, r0
 800099c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(data_length>0){
 800099e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <main+0x7c>
			BLE_Update_Data stored_data = readDataBlock1(data_length-1);
 80009a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009a6:	3b01      	subs	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fc5e 	bl	8001270 <readDataBlock1>
		}
		writeDataToFlash(curr_data,data_length,0);
 80009b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b6:	2200      	movs	r2, #0
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c2:	f000 fbfb 	bl	80011bc <writeDataToFlash>
		run_ble(curr_data,1);
 80009c6:	2301      	movs	r3, #1
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	f000 fe2c 	bl	800162c <run_ble>
		HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f002 fc6c 	bl	80032b4 <HAL_Delay>
	{
 80009dc:	e7d6      	b.n	800098c <main+0x54>
 80009de:	bf00      	nop
 80009e0:	20013c3c 	.word	0x20013c3c

080009e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2244      	movs	r2, #68	; 0x44
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f009 f96f 	bl	8009cd6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a0a:	f004 fe7f 	bl	800570c <HAL_PWREx_ControlVoltageScaling>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a14:	f000 fc4f 	bl	80012b6 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a18:	f004 fe5a 	bl	80056d0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <SystemClock_Config+0xc0>)
 8000a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a22:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <SystemClock_Config+0xc0>)
 8000a24:	f023 0318 	bic.w	r3, r3, #24
 8000a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a3c:	2360      	movs	r3, #96	; 0x60
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000a4c:	2328      	movs	r3, #40	; 0x28
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 fb95 	bl	8006190 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000a6c:	f000 fc23 	bl	80012b6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2303      	movs	r3, #3
 8000a76:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	2104      	movs	r1, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 ff5d 	bl	8006948 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000a94:	f000 fc0f 	bl	80012b6 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000a98:	f006 fc64 	bl	8007364 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a9c:	bf00      	nop
 8000a9e:	3758      	adds	r7, #88	; 0x58
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2224      	movs	r2, #36	; 0x24
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 f90e 	bl	8009cd6 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_DAC1_Init+0x60>)
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_DAC1_Init+0x64>)
 8000abe:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_DAC1_Init+0x60>)
 8000ac2:	f002 fd2c 	bl	800351e <HAL_DAC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8000acc:	f000 fbf3 	bl	80012b6 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
	sConfig.DAC_TrimmingValue = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_DAC1_Init+0x60>)
 8000af0:	f002 fd37 	bl	8003562 <HAL_DAC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_DAC1_Init+0x56>
	{
		Error_Handler();
 8000afa:	f000 fbdc 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000015c 	.word	0x2000015c
 8000b0c:	40007400 	.word	0x40007400

08000b10 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <MX_DFSDM1_Init+0xbc>)
 8000b18:	601a      	str	r2, [r3, #0]
	hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
	hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	721a      	strb	r2, [r3, #8]
	hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	725a      	strb	r2, [r3, #9]
	hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b2e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b32:	61da      	str	r2, [r3, #28]
	hdfsdm1_filter0.Init.FilterParam.Oversampling = 95;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b36:	225f      	movs	r2, #95	; 0x5f
 8000b38:	621a      	str	r2, [r3, #32]
	hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000b42:	f002 fef5 	bl	8003930 <HAL_DFSDM_FilterInit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DFSDM1_Init+0x40>
	{
		Error_Handler();
 8000b4c:	f000 fbb3 	bl	80012b6 <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <MX_DFSDM1_Init+0xc4>)
 8000b54:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
	hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b64:	2228      	movs	r2, #40	; 0x28
 8000b66:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	621a      	str	r2, [r3, #32]
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b88:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_DFSDM1_Init+0xc0>)
 8000ba2:	f002 fe05 	bl	80037b0 <HAL_DFSDM_ChannelInit>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_DFSDM1_Init+0xa0>
	{
		Error_Handler();
 8000bac:	f000 fb83 	bl	80012b6 <Error_Handler>
	}
	if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <MX_DFSDM1_Init+0xc8>)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_DFSDM1_Init+0xb8>)
 8000bb6:	f002 ff95 	bl	8003ae4 <HAL_DFSDM_FilterConfigRegChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_DFSDM1_Init+0xb4>
	{
		Error_Handler();
 8000bc0:	f000 fb79 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000170 	.word	0x20000170
 8000bcc:	40016100 	.word	0x40016100
 8000bd0:	200001c4 	.word	0x200001c4
 8000bd4:	40016040 	.word	0x40016040
 8000bd8:	00020004 	.word	0x00020004

08000bdc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_I2C1_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <MX_I2C1_Init+0x7c>)
 8000bea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c18:	f003 ff12 	bl	8004a40 <HAL_I2C_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000c22:	f000 fb48 	bl	80012b6 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c2a:	f004 fcb9 	bl	80055a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000c34:	f000 fb3f 	bl	80012b6 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c3c:	f004 fcfb 	bl	8005636 <HAL_I2CEx_ConfigDigitalFilter>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000c46:	f000 fb36 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000244 	.word	0x20000244
 8000c54:	40005400 	.word	0x40005400
 8000c58:	10909cec 	.word	0x10909cec

08000c5c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_I2C2_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00000E14;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c68:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c6c:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c9a:	f003 fed1 	bl	8004a40 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000ca4:	f000 fb07 	bl	80012b6 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cac:	f004 fc78 	bl	80055a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 8000cb6:	f000 fafe 	bl	80012b6 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cbe:	f004 fcba 	bl	8005636 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 8000cc8:	f000 faf5 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000298 	.word	0x20000298
 8000cd4:	40005800 	.word	0x40005800

08000cd8 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <MX_QUADSPI_Init+0x48>)
 8000ce0:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_QUADSPI_Init+0x44>)
 8000d08:	f004 fd56 	bl	80057b8 <HAL_QSPI_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_QUADSPI_Init+0x3e>
	{
		Error_Handler();
 8000d12:	f000 fad0 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200002ec 	.word	0x200002ec
 8000d20:	a0001000 	.word	0xa0001000

08000d24 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_USART1_UART_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART1_UART_Init+0x58>)
 8000d68:	f007 f920 	bl	8007fac <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000d72:	f000 faa0 	bl	80012b6 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000330 	.word	0x20000330
 8000d80:	40013800 	.word	0x40013800

08000d84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6493      	str	r3, [r2, #72]	; 0x48
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	200e      	movs	r0, #14
 8000da8:	f002 fb83 	bl	80034b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dac:	200e      	movs	r0, #14
 8000dae:	f002 fb9c 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4bbd      	ldr	r3, [pc, #756]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4abc      	ldr	r2, [pc, #752]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4bba      	ldr	r3, [pc, #744]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4bb7      	ldr	r3, [pc, #732]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4ab6      	ldr	r2, [pc, #728]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4bb4      	ldr	r3, [pc, #720]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4bb1      	ldr	r3, [pc, #708]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4ab0      	ldr	r2, [pc, #704]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4bae      	ldr	r3, [pc, #696]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4bab      	ldr	r3, [pc, #684]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4aaa      	ldr	r2, [pc, #680]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4ba8      	ldr	r3, [pc, #672]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4ba5      	ldr	r3, [pc, #660]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4aa4      	ldr	r2, [pc, #656]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4ba2      	ldr	r3, [pc, #648]	; (80010cc <MX_GPIO_Init+0x30c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e54:	489e      	ldr	r0, [pc, #632]	; (80010d0 <MX_GPIO_Init+0x310>)
 8000e56:	f003 fda9 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f003 fda2 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|myLED_Pin
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e6e:	4899      	ldr	r0, [pc, #612]	; (80010d4 <MX_GPIO_Init+0x314>)
 8000e70:	f003 fd9c 	bl	80049ac <HAL_GPIO_WritePin>
			|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e7a:	4897      	ldr	r0, [pc, #604]	; (80010d8 <MX_GPIO_Init+0x318>)
 8000e7c:	f003 fd96 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	4894      	ldr	r0, [pc, #592]	; (80010d8 <MX_GPIO_Init+0x318>)
 8000e88:	f003 fd90 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e92:	4892      	ldr	r0, [pc, #584]	; (80010dc <MX_GPIO_Init+0x31c>)
 8000e94:	f003 fd8a 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	488d      	ldr	r0, [pc, #564]	; (80010d4 <MX_GPIO_Init+0x314>)
 8000e9e:	f003 fd85 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	488a      	ldr	r0, [pc, #552]	; (80010d0 <MX_GPIO_Init+0x310>)
 8000ea8:	f003 fd80 	bl	80049ac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000eac:	f240 1315 	movw	r3, #277	; 0x115
 8000eb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4882      	ldr	r0, [pc, #520]	; (80010d0 <MX_GPIO_Init+0x310>)
 8000ec6:	f003 fabb 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000eca:	236a      	movs	r3, #106	; 0x6a
 8000ecc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	487c      	ldr	r0, [pc, #496]	; (80010d0 <MX_GPIO_Init+0x310>)
 8000ee0:	f003 faae 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : myButton_Pin */
	GPIO_InitStruct.Pin = myButton_Pin;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4878      	ldr	r0, [pc, #480]	; (80010dc <MX_GPIO_Init+0x31c>)
 8000efc:	f003 faa0 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f00:	233f      	movs	r3, #63	; 0x3f
 8000f02:	617b      	str	r3, [r7, #20]
			|ARD_A1_Pin|ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f04:	230b      	movs	r3, #11
 8000f06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4872      	ldr	r0, [pc, #456]	; (80010dc <MX_GPIO_Init+0x31c>)
 8000f14:	f003 fa94 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
	GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f003 fa83 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f3a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f003 fa73 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f003 fa62 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D7_Pin */
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f80:	230b      	movs	r3, #11
 8000f82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f003 fa55 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f96:	23e0      	movs	r3, #224	; 0xe0
 8000f98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f003 fa44 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4841      	ldr	r0, [pc, #260]	; (80010d4 <MX_GPIO_Init+0x314>)
 8000fce:	f003 fa37 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	483b      	ldr	r0, [pc, #236]	; (80010d4 <MX_GPIO_Init+0x314>)
 8000fe6:	f003 fa2b 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin myLED_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|myLED_Pin
 8000fea:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000fee:	617b      	str	r3, [r7, #20]
			|SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4834      	ldr	r0, [pc, #208]	; (80010d4 <MX_GPIO_Init+0x314>)
 8001004:	f003 fa1c 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <MX_GPIO_Init+0x318>)
 8001026:	f003 fa0b 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800102a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800102e:	617b      	str	r3, [r7, #20]
			|PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001030:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001034:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4825      	ldr	r0, [pc, #148]	; (80010d8 <MX_GPIO_Init+0x318>)
 8001042:	f003 f9fd 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001046:	f243 0381 	movw	r3, #12417	; 0x3081
 800104a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <MX_GPIO_Init+0x318>)
 8001060:	f003 f9ee 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001064:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001068:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <MX_GPIO_Init+0x31c>)
 800107e:	f003 f9df 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001082:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001086:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_GPIO_Init+0x31c>)
 800109a:	f003 f9d1 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800109e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f003 f9c3 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80010ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e009      	b.n	80010e0 <MX_GPIO_Init+0x320>
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48001000 	.word	0x48001000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48000800 	.word	0x48000800
 80010e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e2:	230a      	movs	r3, #10
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f003 f9a6 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001104:	2305      	movs	r3, #5
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_GPIO_Init+0x39c>)
 8001110:	f003 f996 	bl	8004440 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001114:	2378      	movs	r3, #120	; 0x78
 8001116:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001124:	2307      	movs	r3, #7
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_GPIO_Init+0x39c>)
 8001130:	f003 f986 	bl	8004440 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2017      	movs	r0, #23
 800113a:	f002 f9ba 	bl	80034b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800113e:	2017      	movs	r0, #23
 8001140:	f002 f9d3 	bl	80034ea <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f002 f9b2 	bl	80034b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f002 f9cb 	bl	80034ea <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	48000c00 	.word	0x48000c00

08001160 <readNumOfData_1>:

/**
 * Read the number of struct data in the first data block
 * */

uint16_t readNumOfData_1() {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
	uint16_t num = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]
	uint8_t data;
	for (int i = 0; i < single_block_data_size; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	e016      	b.n	800119e <readNumOfData_1+0x3e>
		// read a byte from the memory address
		if (  BSP_QSPI_Read(&data, BASE_ADDR_BITMAP_1 + i, 1) != QSPI_OK) {
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001176:	4619      	mov	r1, r3
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	2201      	movs	r2, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f001 f931 	bl	80023e4 <BSP_QSPI_Read>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <readNumOfData_1+0x2c>
			Error_Handler();
 8001188:	f000 f895 	bl	80012b6 <Error_Handler>
		}

		if (data == 0) { // if there is data in the location
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <readNumOfData_1+0x4c>
			num += 1;
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	3301      	adds	r3, #1
 8001196:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < single_block_data_size; i++) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3301      	adds	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <readNumOfData_1+0x58>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	dbe2      	blt.n	8001170 <readNumOfData_1+0x10>
 80011aa:	e000      	b.n	80011ae <readNumOfData_1+0x4e>
		} else {
			break;
 80011ac:	bf00      	nop
		}
	}
	return num;
 80011ae:	89fb      	ldrh	r3, [r7, #14]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20013c3c 	.word	0x20013c3c

080011bc <writeDataToFlash>:
/**
 * Write a Struct data into the flash
 * In this implementation, if the block max is reached, all memory is deleted
 * If not, add 1 to the memory
 * */
void writeDataToFlash(BLE_Update_Data flash_data_input, uint16_t block_data_length, uint8_t block_index) {
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	463c      	mov	r4, r7
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// first check the current data length
	uint16_t data_index = block_data_length;
 80011c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80011ca:	83fb      	strh	r3, [r7, #30]
	uint8_t zero = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	74fb      	strb	r3, [r7, #19]
	uint32_t data_addr = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
	uint32_t bitmap_addr = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
	if (block_data_length == single_block_data_size) { // in case the block is full
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <writeDataToFlash+0xb0>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80011de:	429a      	cmp	r2, r3
 80011e0:	d113      	bne.n	800120a <writeDataToFlash+0x4e>
		// delete all data
		if (BSP_QSPI_Erase_Block(BASE_ADDR_BITMAP_1) != QSPI_OK) {
 80011e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80011e6:	f001 f9c1 	bl	800256c <BSP_QSPI_Erase_Block>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <writeDataToFlash+0x38>
			Error_Handler();
 80011f0:	f000 f861 	bl	80012b6 <Error_Handler>
		}

		if (BSP_QSPI_Erase_Block(BASE_ADDR_DATA_1) != QSPI_OK) {
 80011f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011f8:	f001 f9b8 	bl	800256c <BSP_QSPI_Erase_Block>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <writeDataToFlash+0x4a>
			Error_Handler();
 8001202:	f000 f858 	bl	80012b6 <Error_Handler>
		}

		data_index = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	83fb      	strh	r3, [r7, #30]
	}

	if (block_index == 0) {
 800120a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <writeDataToFlash+0x64>
		data_addr = BASE_ADDR_DATA_1;
 8001212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001216:	61bb      	str	r3, [r7, #24]
		bitmap_addr = BASE_ADDR_BITMAP_1;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e005      	b.n	800122c <writeDataToFlash+0x70>
	} else {
		data_addr = BASE_ADDR_DATA_2;
 8001220:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001224:	61bb      	str	r3, [r7, #24]
		bitmap_addr = BASE_ADDR_BITMAP_2;
 8001226:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800122a:	617b      	str	r3, [r7, #20]
	}

	// write to flash memory first
	if ( BSP_QSPI_Write((uint8_t *) &flash_data_input, data_addr + (data_index * sizeof(BLE_Update_Data)), sizeof(BLE_Update_Data)) != QSPI_OK) {
 800122c:	8bfb      	ldrh	r3, [r7, #30]
 800122e:	011a      	lsls	r2, r3, #4
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	18d1      	adds	r1, r2, r3
 8001234:	463b      	mov	r3, r7
 8001236:	2210      	movs	r2, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f919 	bl	8002470 <BSP_QSPI_Write>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <writeDataToFlash+0x8c>
		Error_Handler();
 8001244:	f000 f837 	bl	80012b6 <Error_Handler>
	}
	// then write to bitmap
	if ( BSP_QSPI_Write((uint8_t *) &zero, bitmap_addr + data_index, 1) != QSPI_OK) {
 8001248:	8bfa      	ldrh	r2, [r7, #30]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	18d1      	adds	r1, r2, r3
 800124e:	f107 0313 	add.w	r3, r7, #19
 8001252:	2201      	movs	r2, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f90b 	bl	8002470 <BSP_QSPI_Write>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <writeDataToFlash+0xa8>
		Error_Handler();
 8001260:	f000 f829 	bl	80012b6 <Error_Handler>
	}

}
 8001264:	bf00      	nop
 8001266:	3724      	adds	r7, #36	; 0x24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}
 800126c:	20013c3c 	.word	0x20013c3c

08001270 <readDataBlock1>:

BLE_Update_Data readDataBlock1(uint16_t index) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
	BLE_Update_Data flash_data_read;
	uint32_t data_addr = BASE_ADDR_DATA_1;
 800127c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001280:	61fb      	str	r3, [r7, #28]
	if (  BSP_QSPI_Read((uint8_t *)&flash_data_read, data_addr + (index * sizeof(BLE_Update_Data)), sizeof(BLE_Update_Data)) != QSPI_OK) {
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	011a      	lsls	r2, r3, #4
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	18d1      	adds	r1, r2, r3
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2210      	movs	r2, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f8a7 	bl	80023e4 <BSP_QSPI_Read>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <readDataBlock1+0x30>
		Error_Handler();
 800129c:	f000 f80b 	bl	80012b6 <Error_Handler>
	}
	return flash_data_read;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	461c      	mov	r4, r3
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}

080012b6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ba:	b672      	cpsid	i
}
 80012bc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012be:	e7fe      	b.n	80012be <Error_Handler+0x8>

080012c0 <init_ble>:
Char_UUID_t char_uuid;

static void User_Init(void);
tBleStatus Add_SensorData_Service(void);

void init_ble(){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af04      	add	r7, sp, #16
	const char *name = "BlueNRG";
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <init_ble+0x118>)
 80012c8:	617b      	str	r3, [r7, #20]
	uint8_t  bdaddr_len_out;
	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 80012ca:	f000 f88f 	bl	80013ec <User_Init>

	hci_init(user_notify, NULL);
 80012ce:	2100      	movs	r1, #0
 80012d0:	4842      	ldr	r0, [pc, #264]	; (80013dc <init_ble+0x11c>)
 80012d2:	f008 f9f7 	bl	80096c4 <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80012d6:	1dba      	adds	r2, r7, #6
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 f865 	bl	80093ae <getBlueNRGVersion>
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
	 * command after reset otherwise it will fail.
	 */
	hci_reset();
 80012e4:	f008 f8a7 	bl	8009436 <hci_reset>
	HAL_Delay(100);
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f001 ffe3 	bl	80032b4 <HAL_Delay>

	PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80012ee:	7a3b      	ldrb	r3, [r7, #8]
 80012f0:	2b30      	cmp	r3, #48	; 0x30
 80012f2:	d902      	bls.n	80012fa <init_ble+0x3a>
		bnrg_expansion_board = IDB05A1;
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <init_ble+0x120>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	}

	ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80012fa:	f107 0209 	add.w	r2, r7, #9
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <init_ble+0x124>)
 8001300:	2106      	movs	r1, #6
 8001302:	2080      	movs	r0, #128	; 0x80
 8001304:	f007 ffcd 	bl	80092a2 <aci_hal_read_config_data>
 8001308:	4603      	mov	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

	if (ret) {
		PRINTF("Read Static Random address failed.\n");
	}

	if ((bdaddr[5] & 0xC0) != 0xC0) {
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <init_ble+0x124>)
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001314:	2bc0      	cmp	r3, #192	; 0xc0
 8001316:	d000      	beq.n	800131a <init_ble+0x5a>
		PRINTF("Static Random address not well formed.\n");
		while(1);
 8001318:	e7fe      	b.n	8001318 <init_ble+0x58>
	}

	/* GATT Init */
	ret = aci_gatt_init();
 800131a:	f007 fd8e 	bl	8008e3a <aci_gatt_init>
 800131e:	4603      	mov	r3, r0
 8001320:	613b      	str	r3, [r7, #16]
	if(ret){
		PRINTF("GATT_Init failed.\n");
	}

	/* GAP Init */
	if (bnrg_expansion_board == IDB05A1) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <init_ble+0x120>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d110      	bne.n	800134c <init_ble+0x8c>
		ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800132a:	f107 020e 	add.w	r2, r7, #14
 800132e:	f107 030a 	add.w	r3, r7, #10
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	2207      	movs	r2, #7
 800133e:	2100      	movs	r1, #0
 8001340:	2001      	movs	r0, #1
 8001342:	f007 fb4e 	bl	80089e2 <aci_gap_init_IDB05A1>
 8001346:	4603      	mov	r3, r0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	e00a      	b.n	8001362 <init_ble+0xa2>
	}
	else {
		ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800134c:	f107 030a 	add.w	r3, r7, #10
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	f107 010e 	add.w	r1, r7, #14
 8001358:	2001      	movs	r0, #1
 800135a:	f007 fb92 	bl	8008a82 <aci_gap_init_IDB04A1>
 800135e:	4603      	mov	r3, r0
 8001360:	613b      	str	r3, [r7, #16]
	if (ret != BLE_STATUS_SUCCESS) {
		PRINTF("GAP_Init failed.\n");
	}

	/* Update device name */
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001362:	89fc      	ldrh	r4, [r7, #14]
 8001364:	89bd      	ldrh	r5, [r7, #12]
			strlen(name), (uint8_t *)name);
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7fe ff2e 	bl	80001c8 <strlen>
 800136c:	4603      	mov	r3, r0
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800136e:	b2da      	uxtb	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4613      	mov	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	4629      	mov	r1, r5
 800137a:	4620      	mov	r0, r4
 800137c:	f007 fed4 	bl	8009128 <aci_gatt_update_char_value>
 8001380:	4603      	mov	r3, r0
 8001382:	613b      	str	r3, [r7, #16]
	if (ret) {
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d000      	beq.n	800138c <init_ble+0xcc>
		PRINTF("aci_gatt_update_char_value failed.\n");
		while(1);
 800138a:	e7fe      	b.n	800138a <init_ble+0xca>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800138c:	2301      	movs	r3, #1
 800138e:	9303      	str	r3, [sp, #12]
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <init_ble+0x128>)
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2300      	movs	r3, #0
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2310      	movs	r3, #16
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2307      	movs	r3, #7
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f007 fca1 	bl	8008cea <aci_gap_set_auth_requirement>
 80013a8:	4603      	mov	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]
			7,
			16,
			USE_FIXED_PIN_FOR_PAIRING,
			123456,
			BONDING);
	if (ret) {
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d000      	beq.n	80013b4 <init_ble+0xf4>
		PRINTF("aci_gap_set_authentication_requirement failed.\n");
		while(1);
 80013b2:	e7fe      	b.n	80013b2 <init_ble+0xf2>
	}

	PRINTF("BLE Stack Initialized\n");

	ret = (int) Add_SensorData_Service();
 80013b4:	f000 f822 	bl	80013fc <Add_SensorData_Service>
 80013b8:	4603      	mov	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]
	if(ret == BLE_STATUS_SUCCESS) {
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d000      	beq.n	80013c4 <init_ble+0x104>
		PRINTF("BlueMS HW service added successfully.\n");
	} else {
		PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
		while(1);
 80013c2:	e7fe      	b.n	80013c2 <init_ble+0x102>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 80013c4:	2104      	movs	r1, #4
 80013c6:	2001      	movs	r0, #1
 80013c8:	f007 ffc0 	bl	800934c <aci_hal_set_tx_power_level>
 80013cc:	4603      	mov	r3, r0
 80013ce:	613b      	str	r3, [r7, #16]
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	08009d74 	.word	0x08009d74
 80013dc:	08001775 	.word	0x08001775
 80013e0:	20013c3e 	.word	0x20013c3e
 80013e4:	20013c40 	.word	0x20013c40
 80013e8:	0001e240 	.word	0x0001e240

080013ec <User_Init>:
void User_Init(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
//	BSP_LED_Init(LED2);
//	BSP_COM_Init(COM1);
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <Add_SensorData_Service>:

tBleStatus Add_SensorData_Service(void)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b08d      	sub	sp, #52	; 0x34
 8001400:	af06      	add	r7, sp, #24
	tBleStatus ret;
	uint8_t uuid[16];

	/* Add_HWServW2ST_Service */
	COPY_SENSOR_DATA_SERVICE_UUID(uuid);
 8001402:	231b      	movs	r3, #27
 8001404:	713b      	strb	r3, [r7, #4]
 8001406:	23c5      	movs	r3, #197	; 0xc5
 8001408:	717b      	strb	r3, [r7, #5]
 800140a:	23d5      	movs	r3, #213	; 0xd5
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	23a5      	movs	r3, #165	; 0xa5
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	2302      	movs	r3, #2
 8001414:	723b      	strb	r3, [r7, #8]
 8001416:	2300      	movs	r3, #0
 8001418:	727b      	strb	r3, [r7, #9]
 800141a:	23b4      	movs	r3, #180	; 0xb4
 800141c:	72bb      	strb	r3, [r7, #10]
 800141e:	239a      	movs	r3, #154	; 0x9a
 8001420:	72fb      	strb	r3, [r7, #11]
 8001422:	23e1      	movs	r3, #225	; 0xe1
 8001424:	733b      	strb	r3, [r7, #12]
 8001426:	2311      	movs	r3, #17
 8001428:	737b      	strb	r3, [r7, #13]
 800142a:	2301      	movs	r3, #1
 800142c:	73bb      	strb	r3, [r7, #14]
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	2300      	movs	r3, #0
 8001434:	743b      	strb	r3, [r7, #16]
 8001436:	2300      	movs	r3, #0
 8001438:	747b      	strb	r3, [r7, #17]
 800143a:	2300      	movs	r3, #0
 800143c:	74bb      	strb	r3, [r7, #18]
 800143e:	2300      	movs	r3, #0
 8001440:	74fb      	strb	r3, [r7, #19]
	BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <Add_SensorData_Service+0x110>)
 8001444:	461c      	mov	r4, r3
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <Add_SensorData_Service+0x114>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2310      	movs	r3, #16
 8001454:	2201      	movs	r2, #1
 8001456:	492d      	ldr	r1, [pc, #180]	; (800150c <Add_SensorData_Service+0x110>)
 8001458:	2002      	movs	r0, #2
 800145a:	f007 fd11 	bl	8008e80 <aci_gatt_add_serv>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]
			1+3*5, &SDServHandle);
	if (ret != BLE_STATUS_SUCCESS)
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <Add_SensorData_Service+0x70>
		return BLE_STATUS_ERROR;
 8001468:	2347      	movs	r3, #71	; 0x47
 800146a:	e04a      	b.n	8001502 <Add_SensorData_Service+0x106>

	/* Fill the Environmental BLE Characteristc */
	COPY_SENSOR_DATA_CHAR_UUID(uuid);
 800146c:	231b      	movs	r3, #27
 800146e:	713b      	strb	r3, [r7, #4]
 8001470:	23c5      	movs	r3, #197	; 0xc5
 8001472:	717b      	strb	r3, [r7, #5]
 8001474:	23d5      	movs	r3, #213	; 0xd5
 8001476:	71bb      	strb	r3, [r7, #6]
 8001478:	23a5      	movs	r3, #165	; 0xa5
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	2302      	movs	r3, #2
 800147e:	723b      	strb	r3, [r7, #8]
 8001480:	2300      	movs	r3, #0
 8001482:	727b      	strb	r3, [r7, #9]
 8001484:	2336      	movs	r3, #54	; 0x36
 8001486:	72bb      	strb	r3, [r7, #10]
 8001488:	23ac      	movs	r3, #172	; 0xac
 800148a:	72fb      	strb	r3, [r7, #11]
 800148c:	23e1      	movs	r3, #225	; 0xe1
 800148e:	733b      	strb	r3, [r7, #12]
 8001490:	2311      	movs	r3, #17
 8001492:	737b      	strb	r3, [r7, #13]
 8001494:	2301      	movs	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	2300      	movs	r3, #0
 800149e:	743b      	strb	r3, [r7, #16]
 80014a0:	2300      	movs	r3, #0
 80014a2:	747b      	strb	r3, [r7, #17]
 80014a4:	2300      	movs	r3, #0
 80014a6:	74bb      	strb	r3, [r7, #18]
 80014a8:	2300      	movs	r3, #0
 80014aa:	74fb      	strb	r3, [r7, #19]
	uuid[14] |= 0x04; /* One Temperature value*/
 80014ac:	7cbb      	ldrb	r3, [r7, #18]
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	74bb      	strb	r3, [r7, #18]
	uuid[14] |= 0x10; /* Pressure value*/
 80014b6:	7cbb      	ldrb	r3, [r7, #18]
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	74bb      	strb	r3, [r7, #18]
	BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <Add_SensorData_Service+0x118>)
 80014c2:	461c      	mov	r4, r3
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret =  aci_gatt_add_char(SDServHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <Add_SensorData_Service+0x114>)
 80014ce:	8818      	ldrh	r0, [r3, #0]
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <Add_SensorData_Service+0x11c>)
 80014d2:	9305      	str	r3, [sp, #20]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9304      	str	r3, [sp, #16]
 80014d8:	2310      	movs	r3, #16
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	2304      	movs	r3, #4
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2312      	movs	r3, #18
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	230e      	movs	r3, #14
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <Add_SensorData_Service+0x118>)
 80014ec:	2102      	movs	r1, #2
 80014ee:	f007 fd50 	bl	8008f92 <aci_gatt_add_char>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]
			BLE_DATA_SIZE,
			CHAR_PROP_NOTIFY|CHAR_PROP_READ,
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
			16, 0, &SDCharHandle);
	if (ret != BLE_STATUS_SUCCESS)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <Add_SensorData_Service+0x104>
		return BLE_STATUS_ERROR;
 80014fc:	2347      	movs	r3, #71	; 0x47
 80014fe:	e000      	b.n	8001502 <Add_SensorData_Service+0x106>

	return BLE_STATUS_SUCCESS;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	20013c4c 	.word	0x20013c4c
 8001510:	20013c46 	.word	0x20013c46
 8001514:	20013c5c 	.word	0x20013c5c
 8001518:	20013c48 	.word	0x20013c48

0800151c <Sensor_Reading_Update>:


tBleStatus Sensor_Reading_Update(int32_t time, int16_t press, int16_t temp,int16_t humidity, int32_t noise)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	817b      	strh	r3, [r7, #10]
 800152e:	460b      	mov	r3, r1
 8001530:	813b      	strh	r3, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	uint8_t buff[BLE_DATA_SIZE];
	HOST_TO_LE_32(buff,time);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	74fb      	strb	r3, [r7, #19]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	121b      	asrs	r3, r3, #8
 8001540:	b2db      	uxtb	r3, r3
 8001542:	74bb      	strb	r3, [r7, #18]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	141b      	asrs	r3, r3, #16
 8001548:	b2db      	uxtb	r3, r3
 800154a:	747b      	strb	r3, [r7, #17]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	161b      	asrs	r3, r3, #24
 8001550:	b2db      	uxtb	r3, r3
 8001552:	743b      	strb	r3, [r7, #16]
	HOST_TO_LE_16(buff+4,press);
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	757b      	strb	r3, [r7, #21]
 800155a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155e:	121b      	asrs	r3, r3, #8
 8001560:	b21b      	sxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	753b      	strb	r3, [r7, #20]
	HOST_TO_LE_16(buff+6,temp);
 8001566:	893b      	ldrh	r3, [r7, #8]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	75fb      	strb	r3, [r7, #23]
 800156c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001570:	121b      	asrs	r3, r3, #8
 8001572:	b21b      	sxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	75bb      	strb	r3, [r7, #22]
	HOST_TO_LE_16(buff+8,humidity);
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	767b      	strb	r3, [r7, #25]
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	121b      	asrs	r3, r3, #8
 8001584:	b21b      	sxth	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	763b      	strb	r3, [r7, #24]
	HOST_TO_LE_32(buff+10,noise);
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	b2db      	uxtb	r3, r3
 800158e:	777b      	strb	r3, [r7, #29]
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	121b      	asrs	r3, r3, #8
 8001594:	b2db      	uxtb	r3, r3
 8001596:	773b      	strb	r3, [r7, #28]
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	141b      	asrs	r3, r3, #16
 800159c:	b2db      	uxtb	r3, r3
 800159e:	76fb      	strb	r3, [r7, #27]
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	161b      	asrs	r3, r3, #24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	76bb      	strb	r3, [r7, #26]

	ret = aci_gatt_update_char_value(SDServHandle, SDCharHandle,
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <Sensor_Reading_Update+0xbc>)
 80015aa:	8818      	ldrh	r0, [r3, #0]
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <Sensor_Reading_Update+0xc0>)
 80015ae:	8819      	ldrh	r1, [r3, #0]
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	230e      	movs	r3, #14
 80015b8:	2200      	movs	r2, #0
 80015ba:	f007 fdb5 	bl	8009128 <aci_gatt_update_char_value>
 80015be:	4603      	mov	r3, r0
 80015c0:	77fb      	strb	r3, [r7, #31]
			0, BLE_DATA_SIZE, buff);

	if (ret != BLE_STATUS_SUCCESS){
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <Sensor_Reading_Update+0xb0>
		PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
		return BLE_STATUS_ERROR ;
 80015c8:	2347      	movs	r3, #71	; 0x47
 80015ca:	e000      	b.n	80015ce <Sensor_Reading_Update+0xb2>
	}

	return BLE_STATUS_SUCCESS;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20013c46 	.word	0x20013c46
 80015dc:	20013c48 	.word	0x20013c48

080015e0 <Read_Request_CB>:


void Read_Request_CB(uint16_t handle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;

	if (handle == SDCharHandle + 1)
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <Read_Request_CB+0x44>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d107      	bne.n	8001606 <Read_Request_CB+0x26>
	{
		//for if the phone tries to "Read" the data, can maybe just disable this feature if we don't want it
		Sensor_Reading_Update(1,2,3,4,5);
 80015f6:	2305      	movs	r3, #5
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2304      	movs	r3, #4
 80015fc:	2203      	movs	r2, #3
 80015fe:	2102      	movs	r1, #2
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff ff8b 	bl	800151c <Sensor_Reading_Update>
	}

	if(connection_handle !=0)
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <Read_Request_CB+0x48>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <Read_Request_CB+0x3c>
	{
		ret = aci_gatt_allow_read(connection_handle);
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <Read_Request_CB+0x48>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f007 fe18 	bl	8009248 <aci_gatt_allow_read>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
		if (ret != BLE_STATUS_SUCCESS)
		{
			PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
		}
	}
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20013c48 	.word	0x20013c48
 8001628:	20013c6c 	.word	0x20013c6c

0800162c <run_ble>:

int getBLEConnected(){
	return connected;
}

void run_ble(BLE_Update_Data data, uint8_t send_update){
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b087      	sub	sp, #28
 8001630:	af02      	add	r7, sp, #8
 8001632:	463c      	mov	r4, r7
 8001634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (set_connectable)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <run_ble+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <run_ble+0x20>
	{
		Set_DeviceConnectable();
 8001642:	f000 f823 	bl	800168c <Set_DeviceConnectable>
		set_connectable = FALSE;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <run_ble+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	}
	if (connected && send_update)
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <run_ble+0x5c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d011      	beq.n	8001678 <run_ble+0x4c>
 8001654:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <run_ble+0x4c>
	{
		Sensor_Reading_Update(data.timestamp, data.temperature,data.pressure,data.humidity,data.noise);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	461c      	mov	r4, r3
 8001660:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001664:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001668:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff ff52 	bl	800151c <Sensor_Reading_Update>
	}
	hci_user_evt_proc();
 8001678:	f008 f99e 	bl	80099b8 <hci_user_evt_proc>
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	20013c70 	.word	0x20013c70

0800168c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b092      	sub	sp, #72	; 0x48
 8001690:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8001692:	4a36      	ldr	r2, [pc, #216]	; (800176c <Set_DeviceConnectable+0xe0>)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80016a0:	2302      	movs	r3, #2
 80016a2:	703b      	strb	r3, [r7, #0]
 80016a4:	230a      	movs	r3, #10
 80016a6:	707b      	strb	r3, [r7, #1]
 80016a8:	2300      	movs	r3, #0
 80016aa:	70bb      	strb	r3, [r7, #2]
 80016ac:	2308      	movs	r3, #8
 80016ae:	70fb      	strb	r3, [r7, #3]
 80016b0:	2309      	movs	r3, #9
 80016b2:	713b      	strb	r3, [r7, #4]
 80016b4:	2342      	movs	r3, #66	; 0x42
 80016b6:	717b      	strb	r3, [r7, #5]
 80016b8:	236c      	movs	r3, #108	; 0x6c
 80016ba:	71bb      	strb	r3, [r7, #6]
 80016bc:	2375      	movs	r3, #117	; 0x75
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	2365      	movs	r3, #101	; 0x65
 80016c2:	723b      	strb	r3, [r7, #8]
 80016c4:	234e      	movs	r3, #78	; 0x4e
 80016c6:	727b      	strb	r3, [r7, #9]
 80016c8:	2352      	movs	r3, #82	; 0x52
 80016ca:	72bb      	strb	r3, [r7, #10]
 80016cc:	2347      	movs	r3, #71	; 0x47
 80016ce:	72fb      	strb	r3, [r7, #11]
 80016d0:	230d      	movs	r3, #13
 80016d2:	733b      	strb	r3, [r7, #12]
 80016d4:	23ff      	movs	r3, #255	; 0xff
 80016d6:	737b      	strb	r3, [r7, #13]
 80016d8:	2301      	movs	r3, #1
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	2300      	movs	r3, #0
 80016e2:	743b      	strb	r3, [r7, #16]
 80016e4:	23f4      	movs	r3, #244	; 0xf4
 80016e6:	747b      	strb	r3, [r7, #17]
 80016e8:	2300      	movs	r3, #0
 80016ea:	74bb      	strb	r3, [r7, #18]
 80016ec:	2300      	movs	r3, #0
 80016ee:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <Set_DeviceConnectable+0xe4>)
 80016f2:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80016f4:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <Set_DeviceConnectable+0xe4>)
 80016f8:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80016fa:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <Set_DeviceConnectable+0xe4>)
 80016fe:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001700:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <Set_DeviceConnectable+0xe4>)
 8001704:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001706:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <Set_DeviceConnectable+0xe4>)
 800170a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 800170c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <Set_DeviceConnectable+0xe4>)
 8001710:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001712:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001714:	7cbb      	ldrb	r3, [r7, #18]
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 800171e:	2100      	movs	r1, #0
 8001720:	2000      	movs	r0, #0
 8001722:	f007 fef4 	bl	800950e <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001726:	2300      	movs	r3, #0
 8001728:	9306      	str	r3, [sp, #24]
 800172a:	2300      	movs	r3, #0
 800172c:	9305      	str	r3, [sp, #20]
 800172e:	2300      	movs	r3, #0
 8001730:	9304      	str	r3, [sp, #16]
 8001732:	2300      	movs	r3, #0
 8001734:	9303      	str	r3, [sp, #12]
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2308      	movs	r3, #8
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800174a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800174e:	2000      	movs	r0, #0
 8001750:	f007 f9e1 	bl	8008b16 <aci_gap_set_discoverable>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	201a      	movs	r0, #26
 8001760:	f007 fb1a 	bl	8008d98 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	08009d7c 	.word	0x08009d7c
 8001770:	20013c40 	.word	0x20013c40

08001774 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d139      	bne.n	8001802 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d01f      	beq.n	80017d6 <user_notify+0x62>
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	dc38      	bgt.n	800180c <user_notify+0x98>
 800179a:	2b05      	cmp	r3, #5
 800179c:	d002      	beq.n	80017a4 <user_notify+0x30>
 800179e:	2b3e      	cmp	r3, #62	; 0x3e
 80017a0:	d003      	beq.n	80017aa <user_notify+0x36>
 80017a2:	e033      	b.n	800180c <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80017a4:	f000 f836 	bl	8001814 <GAP_DisconnectionComplete_CB>
    }
    break;
 80017a8:	e030      	b.n	800180c <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	3302      	adds	r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d126      	bne.n	8001806 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1d5a      	adds	r2, r3, #5
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f000 f837 	bl	8001840 <GAP_ConnectionComplete_CB>
        }
        break;
 80017d2:	bf00      	nop
      }
    }
    break;
 80017d4:	e017      	b.n	8001806 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	3302      	adds	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	f640 4314 	movw	r3, #3092	; 0xc14
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10e      	bne.n	800180a <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3302      	adds	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	885b      	ldrh	r3, [r3, #2]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fef1 	bl	80015e0 <Read_Request_CB>
        }
        break;
 80017fe:	bf00      	nop
      }

    }
    break;
 8001800:	e003      	b.n	800180a <user_notify+0x96>
    return;
 8001802:	bf00      	nop
 8001804:	e002      	b.n	800180c <user_notify+0x98>
    break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <user_notify+0x98>
    break;
 800180a:	bf00      	nop
  }
}
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <GAP_DisconnectionComplete_CB+0x20>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <GAP_DisconnectionComplete_CB+0x24>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <GAP_DisconnectionComplete_CB+0x28>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	20013c70 	.word	0x20013c70
 8001838:	20000000 	.word	0x20000000
 800183c:	20013c6e 	.word	0x20013c6e

08001840 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <GAP_ConnectionComplete_CB+0x38>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <GAP_ConnectionComplete_CB+0x3c>)
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001858:	2305      	movs	r3, #5
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e002      	b.n	8001864 <GAP_ConnectionComplete_CB+0x24>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20013c70 	.word	0x20013c70
 800187c:	20013c6c 	.word	0x20013c6c

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x44>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	; 0x60
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_DAC_MspInit+0x38>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10b      	bne.n	80018f2 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_DAC_MspInit+0x3c>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_DAC_MspInit+0x3c>)
 80018e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_DAC_MspInit+0x3c>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007400 	.word	0x40007400
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0ac      	sub	sp, #176	; 0xb0
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2288      	movs	r2, #136	; 0x88
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f008 f9d4 	bl	8009cd6 <memset>
  if(DFSDM1_Init == 0)
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d14b      	bne.n	80019ce <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fa22 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001952:	f7ff fcb0 	bl	80012b6 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_DFSDM_FilterMspInit+0x140>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <HAL_DFSDM_FilterMspInit+0x140>)
 800195e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_DFSDM_FilterMspInit+0x140>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10b      	bne.n	8001980 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6613      	str	r3, [r2, #96]	; 0x60
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_DFSDM_FilterMspInit+0x144>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001998:	f44f 7320 	mov.w	r3, #640	; 0x280
 800199c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019b2:	2306      	movs	r3, #6
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019bc:	4619      	mov	r1, r3
 80019be:	4824      	ldr	r0, [pc, #144]	; (8001a50 <HAL_DFSDM_FilterMspInit+0x148>)
 80019c0:	f002 fd3e 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_DFSDM_FilterMspInit+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <HAL_DFSDM_FilterMspInit+0x13c>)
 80019cc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <HAL_DFSDM_FilterMspInit+0x14c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d130      	bne.n	8001a3a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_DFSDM_FilterMspInit+0x154>)
 80019dc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a04:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001a12:	4811      	ldr	r0, [pc, #68]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a14:	f002 fa80 	bl	8003f18 <HAL_DMA_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001a1e:	f7ff fc4a 	bl	80012b6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_DFSDM_FilterMspInit+0x150>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	37b0      	adds	r7, #176	; 0xb0
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20013c78 	.word	0x20013c78
 8001a48:	20013c74 	.word	0x20013c74
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48001000 	.word	0x48001000
 8001a54:	40016100 	.word	0x40016100
 8001a58:	200001fc 	.word	0x200001fc
 8001a5c:	40020044 	.word	0x40020044

08001a60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ac      	sub	sp, #176	; 0xb0
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2288      	movs	r2, #136	; 0x88
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 f928 	bl	8009cd6 <memset>
  if(DFSDM1_Init == 0)
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d14b      	bne.n	8001b26 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 f976 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001aaa:	f7ff fc04 	bl	80012b6 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001ab6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10b      	bne.n	8001ad8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6613      	str	r3, [r2, #96]	; 0x60
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001af0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b14:	4619      	mov	r1, r3
 8001b16:	4809      	ldr	r0, [pc, #36]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001b18:	f002 fc92 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001b24:	6013      	str	r3, [r2, #0]
  }

}
 8001b26:	bf00      	nop
 8001b28:	37b0      	adds	r7, #176	; 0xb0
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20013c78 	.word	0x20013c78
 8001b34:	20013c74 	.word	0x20013c74
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48001000 	.word	0x48001000

08001b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0ae      	sub	sp, #184	; 0xb8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2288      	movs	r2, #136	; 0x88
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f008 f8b8 	bl	8009cd6 <memset>
  if(hi2c->Instance==I2C1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_I2C_MspInit+0x134>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d13c      	bne.n	8001bea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 f907 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b88:	f7ff fb95 	bl	80012b6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a39      	ldr	r2, [pc, #228]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	482c      	ldr	r0, [pc, #176]	; (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001bcc:	f002 fc38 	bl	8004440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001be8:	e040      	b.n	8001c6c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_I2C_MspInit+0x140>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d13b      	bne.n	8001c6c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 f8c5 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001c0c:	f7ff fb53 	bl	80012b6 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c42:	2304      	movs	r3, #4
 8001c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_I2C_MspInit+0x13c>)
 8001c50:	f002 fbf6 	bl	8004440 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_I2C_MspInit+0x138>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	37b8      	adds	r7, #184	; 0xb8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40005400 	.word	0x40005400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000400 	.word	0x48000400
 8001c80:	40005800 	.word	0x40005800

08001c84 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_I2C_MspDeInit+0x68>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d110      	bne.n	8001cb8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_I2C_MspDeInit+0x6c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_I2C_MspDeInit+0x6c>)
 8001c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <HAL_I2C_MspDeInit+0x70>)
 8001ca8:	f002 fd74 	bl	8004794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb0:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <HAL_I2C_MspDeInit+0x70>)
 8001cb2:	f002 fd6f 	bl	8004794 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001cb6:	e014      	b.n	8001ce2 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_I2C_MspDeInit+0x74>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_I2C_MspDeInit+0x6c>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_I2C_MspDeInit+0x6c>)
 8001cc8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <HAL_I2C_MspDeInit+0x70>)
 8001cd4:	f002 fd5e 	bl	8004794 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_I2C_MspDeInit+0x70>)
 8001cde:	f002 fd59 	bl	8004794 <HAL_GPIO_DeInit>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	40005800 	.word	0x40005800

08001cfc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_QSPI_MspInit+0x7c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d128      	bne.n	8001d70 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6513      	str	r3, [r2, #80]	; 0x50
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_QSPI_MspInit+0x80>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d4e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d52:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d60:	230a      	movs	r3, #10
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_QSPI_MspInit+0x84>)
 8001d6c:	f002 fb68 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	a0001000 	.word	0xa0001000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48001000 	.word	0x48001000

08001d84 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_QSPI_MspDeInit+0x30>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10a      	bne.n	8001dac <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_QSPI_MspDeInit+0x34>)
 8001d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_QSPI_MspDeInit+0x34>)
 8001d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001da0:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001da2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_QSPI_MspDeInit+0x38>)
 8001da8:	f002 fcf4 	bl	8004794 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	a0001000 	.word	0xa0001000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48001000 	.word	0x48001000

08001dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0ac      	sub	sp, #176	; 0xb0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2288      	movs	r2, #136	; 0x88
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f007 ff78 	bl	8009cd6 <memset>
  if(huart->Instance==USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <HAL_UART_MspInit+0xb0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d13a      	bne.n	8001e66 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001df4:	2300      	movs	r3, #0
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 ffc7 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e08:	f7ff fa55 	bl	80012b6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e16:	6613      	str	r3, [r2, #96]	; 0x60
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_UART_MspInit+0xb4>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e3c:	23c0      	movs	r3, #192	; 0xc0
 8001e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e54:	2307      	movs	r3, #7
 8001e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_UART_MspInit+0xb8>)
 8001e62:	f002 faed 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	37b0      	adds	r7, #176	; 0xb0
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40021000 	.word	0x40021000
 8001e78:	48000400 	.word	0x48000400

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f001 f9d4 	bl	8003274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ed6:	f002 f975 	bl	80041c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001fc 	.word	0x200001fc

08001ee4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001ee8:	2020      	movs	r0, #32
 8001eea:	f002 fd91 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <EXTI9_5_IRQHandler+0x24>)
 8001ef0:	f002 fa76 	bl	80043e0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001ef4:	2080      	movs	r0, #128	; 0x80
 8001ef6:	f002 fd8b 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001efe:	f002 fd87 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000054 	.word	0x20000054

08001f0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001f10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f14:	f002 fd7c 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001f18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f1c:	f002 fd78 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
 8001f20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f24:	f002 fd74 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001f28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f2c:	f002 fd70 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f34:	f002 fd6c 	bl	8004a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff ffea 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f007 feab 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7fe fcd1 	bl	8000938 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001fa4:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 8001fa8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001fac:	2001409c 	.word	0x2001409c

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <I2Cx_MspInit+0xa8>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <I2Cx_MspInit+0xa8>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <I2Cx_MspInit+0xa8>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001fd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fda:	2312      	movs	r3, #18
 8001fdc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481b      	ldr	r0, [pc, #108]	; (8002060 <I2Cx_MspInit+0xac>)
 8001ff2:	f002 fa25 	bl	8004440 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4818      	ldr	r0, [pc, #96]	; (8002060 <I2Cx_MspInit+0xac>)
 8001ffe:	f002 fa1f 	bl	8004440 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <I2Cx_MspInit+0xa8>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <I2Cx_MspInit+0xa8>)
 8002008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <I2Cx_MspInit+0xa8>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <I2Cx_MspInit+0xa8>)
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <I2Cx_MspInit+0xa8>)
 8002020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002024:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <I2Cx_MspInit+0xa8>)
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <I2Cx_MspInit+0xa8>)
 800202c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002030:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	210f      	movs	r1, #15
 8002036:	2021      	movs	r0, #33	; 0x21
 8002038:	f001 fa3b 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800203c:	2021      	movs	r0, #33	; 0x21
 800203e:	f001 fa54 	bl	80034ea <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	210f      	movs	r1, #15
 8002046:	2022      	movs	r0, #34	; 0x22
 8002048:	f001 fa33 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800204c:	2022      	movs	r0, #34	; 0x22
 800204e:	f001 fa4c 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <I2Cx_Init+0x54>)
 8002070:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <I2Cx_Init+0x58>)
 8002076:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff89 	bl	8001fb4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f002 fccc 	bl	8004a40 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f003 fa78 	bl	80055a0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005800 	.word	0x40005800
 80020bc:	00702681 	.word	0x00702681

080020c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af04      	add	r7, sp, #16
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	72fb      	strb	r3, [r7, #11]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	b299      	uxth	r1, r3
 80020e2:	88f8      	ldrh	r0, [r7, #6]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4603      	mov	r3, r0
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f002 fe80 	bl	8004dfc <HAL_I2C_Mem_Read>
 80020fc:	4603      	mov	r3, r0
 80020fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	4619      	mov	r1, r3
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f832 	bl	8002174 <I2Cx_Error>
  }
  return status;
 8002110:	7dfb      	ldrb	r3, [r7, #23]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b08a      	sub	sp, #40	; 0x28
 800211e:	af04      	add	r7, sp, #16
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	4608      	mov	r0, r1
 8002124:	4611      	mov	r1, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	72fb      	strb	r3, [r7, #11]
 800212c:	460b      	mov	r3, r1
 800212e:	813b      	strh	r3, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	b299      	uxth	r1, r3
 800213c:	88f8      	ldrh	r0, [r7, #6]
 800213e:	893a      	ldrh	r2, [r7, #8]
 8002140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4603      	mov	r3, r0
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f002 fd3f 	bl	8004bd4 <HAL_I2C_Mem_Write>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	4619      	mov	r1, r3
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f805 	bl	8002174 <I2Cx_Error>
  }
  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f002 fcf8 	bl	8004b76 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff6c 	bl	8002064 <I2Cx_Init>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <SENSOR_IO_Init+0x10>)
 800219a:	f7ff ff63 	bl	8002064 <I2Cx_Init>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20013c7c 	.word	0x20013c7c

080021a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
 80021b2:	460b      	mov	r3, r1
 80021b4:	71bb      	strb	r3, [r7, #6]
 80021b6:	4613      	mov	r3, r2
 80021b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	79f9      	ldrb	r1, [r7, #7]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	1d7b      	adds	r3, r7, #5
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <SENSOR_IO_Write+0x30>)
 80021cc:	f7ff ffa5 	bl	800211a <I2Cx_WriteMultiple>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20013c7c 	.word	0x20013c7c

080021dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	4603      	mov	r3, r0
 80021e4:	460a      	mov	r2, r1
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	4613      	mov	r3, r2
 80021ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	79f9      	ldrb	r1, [r7, #7]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	f107 030f 	add.w	r3, r7, #15
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <SENSOR_IO_Read+0x38>)
 8002204:	f7ff ff5c 	bl	80020c0 <I2Cx_ReadMultiple>

  return read_value;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20013c7c 	.word	0x20013c7c

08002218 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af02      	add	r7, sp, #8
 800221e:	603a      	str	r2, [r7, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	460b      	mov	r3, r1
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	4613      	mov	r3, r2
 800222c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	b29a      	uxth	r2, r3
 8002232:	79f9      	ldrb	r1, [r7, #7]
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2301      	movs	r3, #1
 800223e:	4804      	ldr	r0, [pc, #16]	; (8002250 <SENSOR_IO_ReadMultiple+0x38>)
 8002240:	f7ff ff3e 	bl	80020c0 <I2Cx_ReadMultiple>
 8002244:	4603      	mov	r3, r0
 8002246:	b29b      	uxth	r3, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20013c7c 	.word	0x20013c7c

08002254 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <BSP_HSENSOR_Init+0x38>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	20be      	movs	r0, #190	; 0xbe
 8002260:	4798      	blx	r3
 8002262:	4603      	mov	r3, r0
 8002264:	2bbc      	cmp	r3, #188	; 0xbc
 8002266:	d002      	beq.n	800226e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	e009      	b.n	8002282 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <BSP_HSENSOR_Init+0x3c>)
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <BSP_HSENSOR_Init+0x38>)
 8002272:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <BSP_HSENSOR_Init+0x3c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	20be      	movs	r0, #190	; 0xbe
 800227c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000008 	.word	0x20000008
 8002290:	20013cd0 	.word	0x20013cd0

08002294 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <BSP_HSENSOR_ReadHumidity+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	20be      	movs	r0, #190	; 0xbe
 80022a0:	4798      	blx	r3
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80022a6:	eeb0 0a67 	vmov.f32	s0, s15
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20013cd0 	.word	0x20013cd0

080022b0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <BSP_PSENSOR_Init+0x38>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	20ba      	movs	r0, #186	; 0xba
 80022bc:	4798      	blx	r3
 80022be:	4603      	mov	r3, r0
 80022c0:	2bb1      	cmp	r3, #177	; 0xb1
 80022c2:	d002      	beq.n	80022ca <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	e009      	b.n	80022de <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <BSP_PSENSOR_Init+0x3c>)
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <BSP_PSENSOR_Init+0x38>)
 80022ce:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <BSP_PSENSOR_Init+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	20ba      	movs	r0, #186	; 0xba
 80022d8:	4798      	blx	r3
    ret = PSENSOR_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000024 	.word	0x20000024
 80022ec:	20013cd4 	.word	0x20013cd4

080022f0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <BSP_PSENSOR_ReadPressure+0x18>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	20ba      	movs	r0, #186	; 0xba
 80022fc:	4798      	blx	r3
 80022fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20013cd4 	.word	0x20013cd4

0800230c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002314:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <BSP_QSPI_Init+0xd4>)
 8002316:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002318:	4830      	ldr	r0, [pc, #192]	; (80023dc <BSP_QSPI_Init+0xd0>)
 800231a:	f003 fac3 	bl	80058a4 <HAL_QSPI_DeInit>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e054      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8002328:	f000 f964 	bl	80025f4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <BSP_QSPI_Init+0xd0>)
 800232e:	2202      	movs	r2, #2
 8002330:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002334:	2204      	movs	r2, #4
 8002336:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <BSP_QSPI_Init+0xd0>)
 800233a:	2210      	movs	r2, #16
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002342:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8002362:	3b01      	subs	r3, #1
 8002364:	461a      	mov	r2, r3
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002368:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <BSP_QSPI_Init+0xd0>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002376:	4819      	ldr	r0, [pc, #100]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002378:	f003 fa1e 	bl	80057b8 <HAL_QSPI_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e025      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002386:	4815      	ldr	r0, [pc, #84]	; (80023dc <BSP_QSPI_Init+0xd0>)
 8002388:	f000 f974 	bl	8002674 <QSPI_ResetMemory>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8002392:	2304      	movs	r3, #4
 8002394:	e01d      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002396:	2101      	movs	r1, #1
 8002398:	4810      	ldr	r0, [pc, #64]	; (80023dc <BSP_QSPI_Init+0xd0>)
 800239a:	f000 fa35 	bl	8002808 <QSPI_QuadMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e014      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80023a8:	2101      	movs	r1, #1
 80023aa:	480c      	ldr	r0, [pc, #48]	; (80023dc <BSP_QSPI_Init+0xd0>)
 80023ac:	f000 fad4 	bl	8002958 <QSPI_HighPerfMode>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00b      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <BSP_QSPI_Init+0xd0>)
 80023bc:	2201      	movs	r2, #1
 80023be:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80023c0:	4806      	ldr	r0, [pc, #24]	; (80023dc <BSP_QSPI_Init+0xd0>)
 80023c2:	f003 f9f9 	bl	80057b8 <HAL_QSPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20013cd8 	.word	0x20013cd8
 80023e0:	a0001000 	.word	0xa0001000

080023e4 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b092      	sub	sp, #72	; 0x48
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80023f6:	23eb      	movs	r3, #235	; 0xeb
 80023f8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80023fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8002400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002404:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800240a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002414:	23aa      	movs	r3, #170	; 0xaa
 8002416:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8002418:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800241e:	2304      	movs	r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800242a:	2300      	movs	r3, #0
 800242c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800242e:	2300      	movs	r3, #0
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4619      	mov	r1, r3
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <BSP_QSPI_Read+0x88>)
 800243e:	f003 fa55 	bl	80058ec <HAL_QSPI_Command>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e00b      	b.n	8002464 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <BSP_QSPI_Read+0x88>)
 8002454:	f003 fb3f 	bl	8005ad6 <HAL_QSPI_Receive>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3748      	adds	r7, #72	; 0x48
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20013cd8 	.word	0x20013cd8

08002470 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b096      	sub	sp, #88	; 0x58
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002484:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d901      	bls.n	8002492 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800249e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80024a4:	2338      	movs	r3, #56	; 0x38
 80024a6:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80024a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80024ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b2:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80024b8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80024c6:	2300      	movs	r3, #0
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80024ca:	2300      	movs	r3, #0
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80024ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d0:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80024d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80024d6:	4824      	ldr	r0, [pc, #144]	; (8002568 <BSP_QSPI_Write+0xf8>)
 80024d8:	f000 f910 	bl	80026fc <QSPI_WriteEnable>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e03b      	b.n	800255e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4619      	mov	r1, r3
 80024f0:	481d      	ldr	r0, [pc, #116]	; (8002568 <BSP_QSPI_Write+0xf8>)
 80024f2:	f003 f9fb 	bl	80058ec <HAL_QSPI_Command>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e02e      	b.n	800255e <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4818      	ldr	r0, [pc, #96]	; (8002568 <BSP_QSPI_Write+0xf8>)
 8002508:	f003 fa4e 	bl	80059a8 <HAL_QSPI_Transmit>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e023      	b.n	800255e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002516:	f241 3188 	movw	r1, #5000	; 0x1388
 800251a:	4813      	ldr	r0, [pc, #76]	; (8002568 <BSP_QSPI_Write+0xf8>)
 800251c:	f000 f93a 	bl	8002794 <QSPI_AutoPollingMemReady>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e019      	b.n	800255e <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800252a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800252c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252e:	4413      	add	r3, r2
 8002530:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002542:	429a      	cmp	r2, r3
 8002544:	d203      	bcs.n	800254e <BSP_QSPI_Write+0xde>
 8002546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	e001      	b.n	8002552 <BSP_QSPI_Write+0xe2>
 800254e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002552:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002554:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	429a      	cmp	r2, r3
 800255a:	d3b8      	bcc.n	80024ce <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3758      	adds	r7, #88	; 0x58
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20013cd8 	.word	0x20013cd8

0800256c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b090      	sub	sp, #64	; 0x40
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800257a:	23d8      	movs	r3, #216	; 0xd8
 800257c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002588:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800259e:	2300      	movs	r3, #0
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025a2:	2300      	movs	r3, #0
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80025a6:	4812      	ldr	r0, [pc, #72]	; (80025f0 <BSP_QSPI_Erase_Block+0x84>)
 80025a8:	f000 f8a8 	bl	80026fc <QSPI_WriteEnable>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e017      	b.n	80025e6 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4619      	mov	r1, r3
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <BSP_QSPI_Erase_Block+0x84>)
 80025c2:	f003 f993 	bl	80058ec <HAL_QSPI_Command>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00a      	b.n	80025e6 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80025d0:	f640 51ac 	movw	r1, #3500	; 0xdac
 80025d4:	4806      	ldr	r0, [pc, #24]	; (80025f0 <BSP_QSPI_Erase_Block+0x84>)
 80025d6:	f000 f8dd 	bl	8002794 <QSPI_AutoPollingMemReady>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3740      	adds	r7, #64	; 0x40
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20013cd8 	.word	0x20013cd8

080025f4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <BSP_QSPI_MspInit+0x78>)
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	4a1b      	ldr	r2, [pc, #108]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6513      	str	r3, [r2, #80]	; 0x50
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <BSP_QSPI_MspInit+0x78>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a0f      	ldr	r2, [pc, #60]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002630:	f043 0310 	orr.w	r3, r3, #16
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <BSP_QSPI_MspInit+0x78>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8002642:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002646:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002654:	230a      	movs	r3, #10
 8002656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	4804      	ldr	r0, [pc, #16]	; (8002670 <BSP_QSPI_MspInit+0x7c>)
 8002660:	f001 feee 	bl	8004440 <HAL_GPIO_Init>
}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	48001000 	.word	0x48001000

08002674 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b090      	sub	sp, #64	; 0x40
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800267c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002680:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8002682:	2366      	movs	r3, #102	; 0x66
 8002684:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800269a:	2300      	movs	r3, #0
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800269e:	2300      	movs	r3, #0
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4619      	mov	r1, r3
 80026ac:	4812      	ldr	r0, [pc, #72]	; (80026f8 <QSPI_ResetMemory+0x84>)
 80026ae:	f003 f91d 	bl	80058ec <HAL_QSPI_Command>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e019      	b.n	80026f0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80026bc:	2399      	movs	r3, #153	; 0x99
 80026be:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4619      	mov	r1, r3
 80026ca:	480b      	ldr	r0, [pc, #44]	; (80026f8 <QSPI_ResetMemory+0x84>)
 80026cc:	f003 f90e 	bl	80058ec <HAL_QSPI_Command>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00a      	b.n	80026f0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80026da:	f241 3188 	movw	r1, #5000	; 0x1388
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <QSPI_ResetMemory+0x84>)
 80026e0:	f000 f858 	bl	8002794 <QSPI_AutoPollingMemReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3740      	adds	r7, #64	; 0x40
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20013cd8 	.word	0x20013cd8

080026fc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b096      	sub	sp, #88	; 0x58
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800270a:	2306      	movs	r3, #6
 800270c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800270e:	2300      	movs	r3, #0
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002722:	2300      	movs	r3, #0
 8002724:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002726:	2300      	movs	r3, #0
 8002728:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800272a:	f107 0320 	add.w	r3, r7, #32
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4619      	mov	r1, r3
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <QSPI_WriteEnable+0x94>)
 8002736:	f003 f8d9 	bl	80058ec <HAL_QSPI_Command>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e020      	b.n	8002786 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8002744:	2302      	movs	r3, #2
 8002746:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8002748:	2302      	movs	r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002754:	2310      	movs	r3, #16
 8002756:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800275c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800275e:	2305      	movs	r3, #5
 8002760:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8002762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002766:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002768:	f107 0208 	add.w	r2, r7, #8
 800276c:	f107 0120 	add.w	r1, r7, #32
 8002770:	f241 3388 	movw	r3, #5000	; 0x1388
 8002774:	4806      	ldr	r0, [pc, #24]	; (8002790 <QSPI_WriteEnable+0x94>)
 8002776:	f003 fa50 	bl	8005c1a <HAL_QSPI_AutoPolling>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3758      	adds	r7, #88	; 0x58
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20013cd8 	.word	0x20013cd8

08002794 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b096      	sub	sp, #88	; 0x58
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800279e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80027a4:	2305      	movs	r3, #5
 80027a6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80027b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80027be:	2300      	movs	r3, #0
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80027c2:	2300      	movs	r3, #0
 80027c4:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80027d6:	2310      	movs	r3, #16
 80027d8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80027da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027de:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80027e0:	f107 0208 	add.w	r2, r7, #8
 80027e4:	f107 0120 	add.w	r1, r7, #32
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4806      	ldr	r0, [pc, #24]	; (8002804 <QSPI_AutoPollingMemReady+0x70>)
 80027ec:	f003 fa15 	bl	8005c1a <HAL_QSPI_AutoPolling>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3758      	adds	r7, #88	; 0x58
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20013cd8 	.word	0x20013cd8

08002808 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b092      	sub	sp, #72	; 0x48
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800281a:	2305      	movs	r3, #5
 800281c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002822:	2300      	movs	r3, #0
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002838:	2300      	movs	r3, #0
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800283c:	2300      	movs	r3, #0
 800283e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4619      	mov	r1, r3
 800284a:	4842      	ldr	r0, [pc, #264]	; (8002954 <QSPI_QuadMode+0x14c>)
 800284c:	f003 f84e 	bl	80058ec <HAL_QSPI_Command>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e077      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800285a:	f107 030f 	add.w	r3, r7, #15
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4619      	mov	r1, r3
 8002864:	483b      	ldr	r0, [pc, #236]	; (8002954 <QSPI_QuadMode+0x14c>)
 8002866:	f003 f936 	bl	8005ad6 <HAL_QSPI_Receive>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e06a      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002874:	4837      	ldr	r0, [pc, #220]	; (8002954 <QSPI_QuadMode+0x14c>)
 8002876:	f7ff ff41 	bl	80026fc <QSPI_WriteEnable>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e062      	b.n	800294a <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	b2db      	uxtb	r3, r3
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e004      	b.n	80028a0 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800289c:	b2db      	uxtb	r3, r3
 800289e:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80028a0:	2301      	movs	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4619      	mov	r1, r3
 80028ae:	4829      	ldr	r0, [pc, #164]	; (8002954 <QSPI_QuadMode+0x14c>)
 80028b0:	f003 f81c 	bl	80058ec <HAL_QSPI_Command>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e045      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028be:	f107 030f 	add.w	r3, r7, #15
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4619      	mov	r1, r3
 80028c8:	4822      	ldr	r0, [pc, #136]	; (8002954 <QSPI_QuadMode+0x14c>)
 80028ca:	f003 f86d 	bl	80059a8 <HAL_QSPI_Transmit>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80028d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80028dc:	481d      	ldr	r0, [pc, #116]	; (8002954 <QSPI_QuadMode+0x14c>)
 80028de:	f7ff ff59 	bl	8002794 <QSPI_AutoPollingMemReady>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e02e      	b.n	800294a <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80028ec:	2305      	movs	r3, #5
 80028ee:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4619      	mov	r1, r3
 80028fa:	4816      	ldr	r0, [pc, #88]	; (8002954 <QSPI_QuadMode+0x14c>)
 80028fc:	f002 fff6 	bl	80058ec <HAL_QSPI_Command>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01f      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800290a:	f107 030f 	add.w	r3, r7, #15
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4619      	mov	r1, r3
 8002914:	480f      	ldr	r0, [pc, #60]	; (8002954 <QSPI_QuadMode+0x14c>)
 8002916:	f003 f8de 	bl	8005ad6 <HAL_QSPI_Receive>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e012      	b.n	800294a <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <QSPI_QuadMode+0x12c>
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d007      	beq.n	8002944 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3748      	adds	r7, #72	; 0x48
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20013cd8 	.word	0x20013cd8

08002958 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b092      	sub	sp, #72	; 0x48
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800296a:	2305      	movs	r3, #5
 800296c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002980:	2301      	movs	r3, #1
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002988:	2300      	movs	r3, #0
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800298c:	2300      	movs	r3, #0
 800298e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4619      	mov	r1, r3
 800299a:	4853      	ldr	r0, [pc, #332]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 800299c:	f002 ffa6 	bl	80058ec <HAL_QSPI_Command>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e09a      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4619      	mov	r1, r3
 80029b4:	484c      	ldr	r0, [pc, #304]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 80029b6:	f003 f88e 	bl	8005ad6 <HAL_QSPI_Receive>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e08d      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80029c4:	2315      	movs	r3, #21
 80029c6:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80029c8:	2302      	movs	r3, #2
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4619      	mov	r1, r3
 80029d6:	4844      	ldr	r0, [pc, #272]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 80029d8:	f002 ff88 	bl	80058ec <HAL_QSPI_Command>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07c      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	3301      	adds	r3, #1
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4619      	mov	r1, r3
 80029f2:	483d      	ldr	r0, [pc, #244]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 80029f4:	f003 f86f 	bl	8005ad6 <HAL_QSPI_Receive>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06e      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002a02:	4839      	ldr	r0, [pc, #228]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002a04:	f7ff fe7a 	bl	80026fc <QSPI_WriteEnable>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e066      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a18:	7bbb      	ldrb	r3, [r7, #14]
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	73bb      	strb	r3, [r7, #14]
 8002a22:	e004      	b.n	8002a2e <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	f023 0302 	bic.w	r3, r3, #2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8002a32:	2303      	movs	r3, #3
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4829      	ldr	r0, [pc, #164]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002a42:	f002 ff53 	bl	80058ec <HAL_QSPI_Command>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e047      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002a5c:	f002 ffa4 	bl	80059a8 <HAL_QSPI_Transmit>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e03a      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002a6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002a6e:	481e      	ldr	r0, [pc, #120]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002a70:	f7ff fe90 	bl	8002794 <QSPI_AutoPollingMemReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e030      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002a7e:	2315      	movs	r3, #21
 8002a80:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8002a82:	2302      	movs	r3, #2
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002a92:	f002 ff2b 	bl	80058ec <HAL_QSPI_Command>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e01f      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480f      	ldr	r0, [pc, #60]	; (8002ae8 <QSPI_HighPerfMode+0x190>)
 8002aac:	f003 f813 	bl	8005ad6 <HAL_QSPI_Receive>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e012      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002aba:	7b7b      	ldrb	r3, [r7, #13]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <QSPI_HighPerfMode+0x172>
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002aca:	7b7b      	ldrb	r3, [r7, #13]
 8002acc:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3748      	adds	r7, #72	; 0x48
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20013cd8 	.word	0x20013cd8

08002aec <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <BSP_TSENSOR_Init+0x30>)
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <BSP_TSENSOR_Init+0x34>)
 8002afa:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002afc:	f7ff fb4a 	bl	8002194 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <BSP_TSENSOR_Init+0x30>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2100      	movs	r1, #0
 8002b08:	20be      	movs	r0, #190	; 0xbe
 8002b0a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20013d1c 	.word	0x20013d1c
 8002b20:	20000014 	.word	0x20000014

08002b24 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <BSP_TSENSOR_ReadTemp+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	20be      	movs	r0, #190	; 0xbe
 8002b30:	4798      	blx	r3
 8002b32:	eef0 7a40 	vmov.f32	s15, s0
}
 8002b36:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20013d1c 	.word	0x20013d1c

08002b40 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <BSP_SPI3_Init+0x54>)
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <BSP_SPI3_Init+0x58>)
 8002b4e:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <BSP_SPI3_Init+0x5c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	4911      	ldr	r1, [pc, #68]	; (8002b9c <BSP_SPI3_Init+0x5c>)
 8002b58:	600a      	str	r2, [r1, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d114      	bne.n	8002b88 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8002b5e:	480d      	ldr	r0, [pc, #52]	; (8002b94 <BSP_SPI3_Init+0x54>)
 8002b60:	f005 f8b1 	bl	8007cc6 <HAL_SPI_GetState>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10e      	bne.n	8002b88 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8002b6a:	480a      	ldr	r0, [pc, #40]	; (8002b94 <BSP_SPI3_Init+0x54>)
 8002b6c:	f000 f882 	bl	8002c74 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002b76:	4807      	ldr	r0, [pc, #28]	; (8002b94 <BSP_SPI3_Init+0x54>)
 8002b78:	f000 f83a 	bl	8002bf0 <MX_SPI3_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002b82:	f06f 0307 	mvn.w	r3, #7
 8002b86:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20013d20 	.word	0x20013d20
 8002b98:	40003c00 	.word	0x40003c00
 8002b9c:	20013d84 	.word	0x20013d84

08002ba0 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	4807      	ldr	r0, [pc, #28]	; (8002bdc <BSP_SPI3_SendRecv+0x3c>)
 8002bc0:	f004 fe5f 	bl	8007882 <HAL_SPI_TransmitReceive>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002bca:	f06f 0305 	mvn.w	r3, #5
 8002bce:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002bd0:	697b      	ldr	r3, [r7, #20]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20013d20 	.word	0x20013d20

08002be0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002be4:	f000 fb5a 	bl	800329c <HAL_GetTick>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <MX_SPI3_Init+0x80>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c16:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2218      	movs	r2, #24
 8002c30:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2207      	movs	r2, #7
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2208      	movs	r2, #8
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f004 fd66 	bl	8007728 <HAL_SPI_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40003c00 	.word	0x40003c00

08002c74 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c86:	6593      	str	r3, [r2, #88]	; 0x58
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <SPI3_MspInit+0xa8>)
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4815      	ldr	r0, [pc, #84]	; (8002d20 <SPI3_MspInit+0xac>)
 8002cca:	f001 fbb9 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8002cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8002ce0:	2306      	movs	r3, #6
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480d      	ldr	r0, [pc, #52]	; (8002d20 <SPI3_MspInit+0xac>)
 8002cec:	f001 fba8 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8002cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002d02:	2306      	movs	r3, #6
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <SPI3_MspInit+0xac>)
 8002d0e:	f001 fb97 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002d12:	bf00      	nop
 8002d14:	3728      	adds	r7, #40	; 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	48000800 	.word	0x48000800

08002d24 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2120      	movs	r1, #32
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fa51 	bl	80021dc <SENSOR_IO_Read>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d64:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fa1a 	bl	80021a8 <SENSOR_IO_Write>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002d8a:	f7ff fa03 	bl	8002194 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	210f      	movs	r1, #15
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa21 	bl	80021dc <SENSOR_IO_Read>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	f107 020c 	add.w	r2, r7, #12
 8002dba:	2302      	movs	r3, #2
 8002dbc:	21b0      	movs	r1, #176	; 0xb0
 8002dbe:	f7ff fa2b 	bl	8002218 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002dc2:	7b3b      	ldrb	r3, [r7, #12]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	b2d8      	uxtb	r0, r3
 8002dd6:	f107 020c 	add.w	r2, r7, #12
 8002dda:	2302      	movs	r3, #2
 8002ddc:	21b6      	movs	r1, #182	; 0xb6
 8002dde:	f7ff fa1b 	bl	8002218 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002de2:	7b7b      	ldrb	r3, [r7, #13]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	7b3b      	ldrb	r3, [r7, #12]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	b2d8      	uxtb	r0, r3
 8002df4:	f107 020c 	add.w	r2, r7, #12
 8002df8:	2302      	movs	r3, #2
 8002dfa:	21ba      	movs	r1, #186	; 0xba
 8002dfc:	f7ff fa0c 	bl	8002218 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e00:	7b7b      	ldrb	r3, [r7, #13]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	7b3b      	ldrb	r3, [r7, #12]
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	f107 020c 	add.w	r2, r7, #12
 8002e16:	2302      	movs	r3, #2
 8002e18:	21a8      	movs	r1, #168	; 0xa8
 8002e1a:	f7ff f9fd 	bl	8002218 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e1e:	7b7b      	ldrb	r3, [r7, #13]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	7b3b      	ldrb	r3, [r7, #12]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002e2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002e42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e50:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e54:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ed8 <HTS221_H_ReadHumidity+0x130>
 8002e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	dd01      	ble.n	8002ea4 <HTS221_H_ReadHumidity+0xfc>
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HTS221_H_ReadHumidity+0x134>)
 8002ea2:	e00a      	b.n	8002eba <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d502      	bpl.n	8002eb8 <HTS221_H_ReadHumidity+0x110>
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e000      	b.n	8002eba <HTS221_H_ReadHumidity+0x112>
 8002eb8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002eba:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ec0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ec4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ec8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	447a0000 	.word	0x447a0000
 8002edc:	447a0000 	.word	0x447a0000

08002ee0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f972 	bl	80021dc <SENSOR_IO_Read>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f93b 	bl	80021a8 <SENSOR_IO_Write>
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b088      	sub	sp, #32
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	b2d8      	uxtb	r0, r3
 8002f48:	f107 0208 	add.w	r2, r7, #8
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	21b2      	movs	r1, #178	; 0xb2
 8002f50:	f7ff f962 	bl	8002218 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2135      	movs	r1, #53	; 0x35
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f93e 	bl	80021dc <SENSOR_IO_Read>
 8002f60:	4603      	mov	r3, r0
 8002f62:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	7a3b      	ldrb	r3, [r7, #8]
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002f78:	7ffb      	ldrb	r3, [r7, #31]
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	7a7b      	ldrb	r3, [r7, #9]
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002f8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f90:	10db      	asrs	r3, r3, #3
 8002f92:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002f94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f98:	10db      	asrs	r3, r3, #3
 8002f9a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	b2d8      	uxtb	r0, r3
 8002fa0:	f107 0208 	add.w	r2, r7, #8
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	21bc      	movs	r1, #188	; 0xbc
 8002fa8:	f7ff f936 	bl	8002218 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fac:	7a7b      	ldrb	r3, [r7, #9]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	7a3b      	ldrb	r3, [r7, #8]
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	b21a      	sxth	r2, r3
 8002fc0:	7abb      	ldrb	r3, [r7, #10]
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	f107 0208 	add.w	r2, r7, #8
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	21aa      	movs	r1, #170	; 0xaa
 8002fd4:	f7ff f920 	bl	8002218 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002fd8:	7a7b      	ldrb	r3, [r7, #9]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	7a3b      	ldrb	r3, [r7, #8]
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002fe6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002fea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ffc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800300e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003012:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003024:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	ee07 3a90 	vmov	s15, r3
}
 800303e:	eeb0 0a67 	vmov.f32	s0, s15
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f879 	bl	800314c <LPS22HB_Init>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003070:	f7ff f890 	bl	8002194 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	210f      	movs	r1, #15
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f8ae 	bl	80021dc <SENSOR_IO_Read>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	74fb      	strb	r3, [r7, #19]
 80030a2:	e013      	b.n	80030cc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	3328      	adds	r3, #40	; 0x28
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	7cfc      	ldrb	r4, [r7, #19]
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f7ff f892 	bl	80021dc <SENSOR_IO_Read>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	f104 0318 	add.w	r3, r4, #24
 80030c0:	443b      	add	r3, r7
 80030c2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	3301      	adds	r3, #1
 80030ca:	74fb      	strb	r3, [r7, #19]
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d9e8      	bls.n	80030a4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	74fb      	strb	r3, [r7, #19]
 80030d6:	e00f      	b.n	80030f8 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	3318      	adds	r3, #24
 80030dc:	443b      	add	r3, r7
 80030de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030e2:	461a      	mov	r2, r3
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	3301      	adds	r3, #1
 80030f6:	74fb      	strb	r3, [r7, #19]
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d9ec      	bls.n	80030d8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2264      	movs	r2, #100	; 0x64
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	da01      	bge.n	8003124 <LPS22HB_P_ReadPressure+0x94>
 8003120:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003124:	131b      	asrs	r3, r3, #12
 8003126:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003132:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003148 <LPS22HB_P_ReadPressure+0xb8>
 8003136:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800313a:	eef0 7a66 	vmov.f32	s15, s13
}
 800313e:	eeb0 0a67 	vmov.f32	s0, s15
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}
 8003148:	42c80000 	.word	0x42c80000

0800314c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	211a      	movs	r1, #26
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff f83d 	bl	80021dc <SENSOR_IO_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	211a      	movs	r1, #26
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f812 	bl	80021a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2110      	movs	r1, #16
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f826 	bl	80021dc <SENSOR_IO_Read>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031a2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	f023 0302 	bic.w	r3, r3, #2
 80031aa:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	2110      	movs	r1, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fff3 	bl	80021a8 <SENSOR_IO_Write>
}  
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f000 f961 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031da:	2000      	movs	r0, #0
 80031dc:	f000 f80e 	bl	80031fc <HAL_InitTick>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	71fb      	strb	r3, [r7, #7]
 80031ea:	e001      	b.n	80031f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031ec:	f7fe fb48 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031f0:	79fb      	ldrb	r3, [r7, #7]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_InitTick+0x6c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_InitTick+0x70>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_InitTick+0x6c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f96d 	bl	8003506 <HAL_SYSTICK_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d809      	bhi.n	800324c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003240:	f000 f937 	bl	80034b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_InitTick+0x74>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e007      	b.n	800325c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e004      	b.n	800325c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e001      	b.n	800325c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000034 	.word	0x20000034
 800326c:	20000004 	.word	0x20000004
 8003270:	20000030 	.word	0x20000030

08003274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_IncTick+0x20>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_IncTick+0x24>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4413      	add	r3, r2
 8003284:	4a04      	ldr	r2, [pc, #16]	; (8003298 <HAL_IncTick+0x24>)
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000034 	.word	0x20000034
 8003298:	20013d88 	.word	0x20013d88

0800329c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return uwTick;
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_GetTick+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20013d88 	.word	0x20013d88

080032b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff ffee 	bl	800329c <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032cc:	d005      	beq.n	80032da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_Delay+0x44>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032da:	bf00      	nop
 80032dc:	f7ff ffde 	bl	800329c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d8f7      	bhi.n	80032dc <HAL_Delay+0x28>
  {
  }
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000034 	.word	0x20000034

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e014      	b.n	800355a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fe f9c1 	bl	80018c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b088      	sub	sp, #32
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	795b      	ldrb	r3, [r3, #5]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_DAC_ConfigChannel+0x1c>
 800357a:	2302      	movs	r3, #2
 800357c:	e114      	b.n	80037a8 <HAL_DAC_ConfigChannel+0x246>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b04      	cmp	r3, #4
 8003590:	f040 8081 	bne.w	8003696 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003594:	f7ff fe82 	bl	800329c <HAL_GetTick>
 8003598:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d140      	bne.n	8003622 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035a0:	e018      	b.n	80035d4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035a2:	f7ff fe7b 	bl	800329c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d911      	bls.n	80035d4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2203      	movs	r2, #3
 80035ce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0e9      	b.n	80037a8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1df      	bne.n	80035a2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fe66 	bl	80032b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	6992      	ldr	r2, [r2, #24]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
 80035f2:	e023      	b.n	800363c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035f4:	f7ff fe52 	bl	800329c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d90f      	bls.n	8003622 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0a      	bge.n	8003622 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f043 0208 	orr.w	r2, r3, #8
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2203      	movs	r2, #3
 800361c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0c2      	b.n	80037a8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	dbe3      	blt.n	80035f4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800362c:	2001      	movs	r0, #1
 800362e:	f7ff fe41 	bl	80032b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	6992      	ldr	r2, [r2, #24]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	ea02 0103 	and.w	r1, r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	409a      	lsls	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	21ff      	movs	r1, #255	; 0xff
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	ea02 0103 	and.w	r1, r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	409a      	lsls	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d11d      	bne.n	80036da <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2207      	movs	r2, #7
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	400a      	ands	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	22c0      	movs	r2, #192	; 0xc0
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43da      	mvns	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	400a      	ands	r2, r1
 8003798:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0ac      	b.n	800391c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fab6 	bl	8003d38 <DFSDM_GetChannelFromInstance>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a55      	ldr	r2, [pc, #340]	; (8003924 <HAL_DFSDM_ChannelInit+0x174>)
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e09f      	b.n	800391c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fe f93f 	bl	8001a60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_DFSDM_ChannelInit+0x178>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <HAL_DFSDM_ChannelInit+0x178>)
 80037ea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80037ec:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <HAL_DFSDM_ChannelInit+0x178>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d125      	bne.n	8003840 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80037f4:	4b4d      	ldr	r3, [pc, #308]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a4c      	ldr	r2, [pc, #304]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 80037fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037fe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003800:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4948      	ldr	r1, [pc, #288]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a46      	ldr	r2, [pc, #280]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003814:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003818:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003822:	4b42      	ldr	r3, [pc, #264]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	3b01      	subs	r3, #1
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	493f      	ldr	r1, [pc, #252]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003834:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3c      	ldr	r2, [pc, #240]	; (800392c <HAL_DFSDM_ChannelInit+0x17c>)
 800383a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800384e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800385e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003864:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020f 	bic.w	r2, r2, #15
 800387c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80038a4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f002 0207 	and.w	r2, r2, #7
 80038d0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa14 	bl	8003d38 <DFSDM_GetChannelFromInstance>
 8003910:	4602      	mov	r2, r0
 8003912:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_DFSDM_ChannelInit+0x174>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20013d90 	.word	0x20013d90
 8003928:	20013d8c 	.word	0x20013d8c
 800392c:	40016000 	.word	0x40016000

08003930 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0ca      	b.n	8003ad8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a66      	ldr	r2, [pc, #408]	; (8003ae0 <HAL_DFSDM_FilterInit+0x1b0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d109      	bne.n	8003960 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003950:	2b01      	cmp	r3, #1
 8003952:	d003      	beq.n	800395c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0bb      	b.n	8003ad8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd ffc5 	bl	8001908 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800398c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7a1b      	ldrb	r3, [r3, #8]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80039b6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7a5b      	ldrb	r3, [r3, #9]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d108      	bne.n	80039d2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80039f0:	f023 0308 	bic.w	r3, r3, #8
 80039f4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d108      	bne.n	8003a10 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7c1b      	ldrb	r3, [r3, #16]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0210 	orr.w	r2, r2, #16
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7c5b      	ldrb	r3, [r3, #17]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0220 	orr.w	r2, r2, #32
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0220 	bic.w	r2, r2, #32
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003a72:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003a76:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6959      	ldr	r1, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a8a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003a92:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7c1a      	ldrb	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40016100 	.word	0x40016100

08003ae4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02e      	beq.n	8003b5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003b04:	2bff      	cmp	r3, #255	; 0xff
 8003b06:	d029      	beq.n	8003b5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e00a      	b.n	8003b54 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5a:	e001      	b.n	8003b60 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
 8003b90:	e064      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba0:	d002      	beq.n	8003ba8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
 8003ba6:	e059      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10e      	bne.n	8003bce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
 8003bcc:	e046      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d102      	bne.n	8003bee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
 8003bec:	e036      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d004      	beq.n	8003c02 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d12a      	bne.n	8003c58 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d101      	bne.n	8003c20 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003c1e:	e000      	b.n	8003c22 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003c20:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	331c      	adds	r3, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f000 fa26 	bl	8004088 <HAL_DMA_Start_IT>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003c4e:	e005      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8bd 	bl	8003dd0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003c56:	e001      	b.n	8003c5c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	08003cf9 	.word	0x08003cf9
 8003c6c:	08003d15 	.word	0x08003d15
 8003c70:	08003cdd 	.word	0x08003cdd

08003c74 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d007      	beq.n	8003c9a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d002      	beq.n	8003c9a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	e007      	b.n	8003caa <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fa52 	bl	8004148 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8e9 	bl	8003e7c <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ffe2 	bl	8003cb4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7fc fd98 	bl	800083c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2203      	movs	r2, #3
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff ffcd 	bl	8003cc8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d102      	bne.n	8003d4e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e02b      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <DFSDM_GetChannelFromInstance+0x80>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d102      	bne.n	8003d5c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e024      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <DFSDM_GetChannelFromInstance+0x84>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d64:	2302      	movs	r3, #2
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e01d      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <DFSDM_GetChannelFromInstance+0x88>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d102      	bne.n	8003d78 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d72:	2304      	movs	r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e016      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <DFSDM_GetChannelFromInstance+0x8c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d80:	2305      	movs	r3, #5
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e00f      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <DFSDM_GetChannelFromInstance+0x90>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d8e:	2306      	movs	r3, #6
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e008      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <DFSDM_GetChannelFromInstance+0x94>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d102      	bne.n	8003da2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e001      	b.n	8003da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003da2:	2303      	movs	r3, #3
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40016000 	.word	0x40016000
 8003db8:	40016020 	.word	0x40016020
 8003dbc:	40016040 	.word	0x40016040
 8003dc0:	40016080 	.word	0x40016080
 8003dc4:	400160a0 	.word	0x400160a0
 8003dc8:	400160c0 	.word	0x400160c0
 8003dcc:	400160e0 	.word	0x400160e0

08003dd0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d108      	bne.n	8003df2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e033      	b.n	8003e5a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e10:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d116      	bne.n	8003e5a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0202 	orr.w	r2, r2, #2
 8003e42:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <DFSDM_RegConvStart+0x84>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	e000      	b.n	8003e56 <DFSDM_RegConvStart+0x86>
 8003e54:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <DFSDM_RegConvStart+0x98>
 8003e64:	2202      	movs	r2, #2
 8003e66:	e000      	b.n	8003e6a <DFSDM_RegConvStart+0x9a>
 8003e68:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d116      	bne.n	8003ef4 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0202 	orr.w	r2, r2, #2
 8003edc:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d102      	bne.n	8003eee <DFSDM_RegConvStop+0x72>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	e000      	b.n	8003ef0 <DFSDM_RegConvStop+0x74>
 8003eee:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d101      	bne.n	8003f02 <DFSDM_RegConvStop+0x86>
 8003efe:	2201      	movs	r2, #1
 8003f00:	e000      	b.n	8003f04 <DFSDM_RegConvStop+0x88>
 8003f02:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e098      	b.n	800405c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b4d      	ldr	r3, [pc, #308]	; (8004068 <HAL_DMA_Init+0x150>)
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d80f      	bhi.n	8003f56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	; (800406c <HAL_DMA_Init+0x154>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	009a      	lsls	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_DMA_Init+0x15c>)
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
 8003f54:	e00e      	b.n	8003f74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_DMA_Init+0x160>)
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a43      	ldr	r2, [pc, #268]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	009a      	lsls	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_DMA_Init+0x164>)
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fce:	d039      	beq.n	8004044 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_DMA_Init+0x15c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d11a      	bne.n	8004010 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_DMA_Init+0x168>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f003 031c 	and.w	r3, r3, #28
 8003fe6:	210f      	movs	r1, #15
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	4924      	ldr	r1, [pc, #144]	; (8004080 <HAL_DMA_Init+0x168>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_DMA_Init+0x168>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f003 031c 	and.w	r3, r3, #28
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	491d      	ldr	r1, [pc, #116]	; (8004080 <HAL_DMA_Init+0x168>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
 800400e:	e019      	b.n	8004044 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f003 031c 	and.w	r3, r3, #28
 800401c:	210f      	movs	r1, #15
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	4917      	ldr	r1, [pc, #92]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004026:	4013      	ands	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <HAL_DMA_Init+0x16c>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f003 031c 	and.w	r3, r3, #28
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	4911      	ldr	r1, [pc, #68]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40020407 	.word	0x40020407
 800406c:	bffdfff8 	.word	0xbffdfff8
 8004070:	cccccccd 	.word	0xcccccccd
 8004074:	40020000 	.word	0x40020000
 8004078:	bffdfbf8 	.word	0xbffdfbf8
 800407c:	40020400 	.word	0x40020400
 8004080:	400200a8 	.word	0x400200a8
 8004084:	400204a8 	.word	0x400204a8

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_DMA_Start_IT+0x20>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e04b      	b.n	8004140 <HAL_DMA_Start_IT+0xb8>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13a      	bne.n	8004132 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f91e 	bl	8004322 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 020e 	orr.w	r2, r2, #14
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00f      	b.n	8004120 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 020a 	orr.w	r2, r2, #10
 800411e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d008      	beq.n	8004172 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e022      	b.n	80041b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 020e 	bic.w	r2, r2, #14
 8004180:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021c 	and.w	r2, r3, #28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	f003 031c 	and.w	r3, r3, #28
 80041e4:	2204      	movs	r2, #4
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d026      	beq.n	800423e <HAL_DMA_IRQHandler+0x7a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d021      	beq.n	800423e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 021c 	and.w	r2, r3, #28
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2104      	movs	r1, #4
 8004226:	fa01 f202 	lsl.w	r2, r1, r2
 800422a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d071      	beq.n	8004318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800423c:	e06c      	b.n	8004318 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f003 031c 	and.w	r3, r3, #28
 8004246:	2202      	movs	r2, #2
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02e      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xec>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d029      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 020a 	bic.w	r2, r2, #10
 8004278:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 021c 	and.w	r2, r3, #28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2102      	movs	r1, #2
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d038      	beq.n	8004318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042ae:	e033      	b.n	8004318 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	f003 031c 	and.w	r3, r3, #28
 80042b8:	2208      	movs	r2, #8
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02a      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d025      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 020e 	bic.w	r2, r2, #14
 80042dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f003 021c 	and.w	r2, r3, #28
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004318:	bf00      	nop
 800431a:	bf00      	nop
}
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f003 021c 	and.w	r2, r3, #28
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b10      	cmp	r3, #16
 8004352:	d108      	bne.n	8004366 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004364:	e007      	b.n	8004376 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	460b      	mov	r3, r1
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]
      break;
 80043a0:	e002      	b.n	80043a8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
      break;
 80043a6:	bf00      	nop
  }

  return status;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e003      	b.n	80043d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2201      	movs	r2, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_EXTI_IRQHandler+0x5c>)
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4798      	blx	r3
    }
  }
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40010414 	.word	0x40010414

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800444e:	e17f      	b.n	8004750 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8171 	beq.w	800474a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d005      	beq.n	8004480 <HAL_GPIO_Init+0x40>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d130      	bne.n	80044e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044b6:	2201      	movs	r2, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0201 	and.w	r2, r3, #1
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d118      	bne.n	8004520 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044f4:	2201      	movs	r2, #1
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0201 	and.w	r2, r3, #1
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b03      	cmp	r3, #3
 800452a:	d017      	beq.n	800455c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d123      	bne.n	80045b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	08da      	lsrs	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3208      	adds	r2, #8
 8004570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	220f      	movs	r2, #15
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	08da      	lsrs	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3208      	adds	r2, #8
 80045aa:	6939      	ldr	r1, [r7, #16]
 80045ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0203 	and.w	r2, r3, #3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ac 	beq.w	800474a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_GPIO_Init+0x330>)
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	4a5e      	ldr	r2, [pc, #376]	; (8004770 <HAL_GPIO_Init+0x330>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6613      	str	r3, [r2, #96]	; 0x60
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_GPIO_Init+0x330>)
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800460a:	4a5a      	ldr	r2, [pc, #360]	; (8004774 <HAL_GPIO_Init+0x334>)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004634:	d025      	beq.n	8004682 <HAL_GPIO_Init+0x242>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <HAL_GPIO_Init+0x338>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01f      	beq.n	800467e <HAL_GPIO_Init+0x23e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_GPIO_Init+0x33c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d019      	beq.n	800467a <HAL_GPIO_Init+0x23a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a4d      	ldr	r2, [pc, #308]	; (8004780 <HAL_GPIO_Init+0x340>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_GPIO_Init+0x236>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4c      	ldr	r2, [pc, #304]	; (8004784 <HAL_GPIO_Init+0x344>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_GPIO_Init+0x232>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_GPIO_Init+0x348>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_GPIO_Init+0x22e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a4a      	ldr	r2, [pc, #296]	; (800478c <HAL_GPIO_Init+0x34c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_GPIO_Init+0x22a>
 8004666:	2306      	movs	r3, #6
 8004668:	e00c      	b.n	8004684 <HAL_GPIO_Init+0x244>
 800466a:	2307      	movs	r3, #7
 800466c:	e00a      	b.n	8004684 <HAL_GPIO_Init+0x244>
 800466e:	2305      	movs	r3, #5
 8004670:	e008      	b.n	8004684 <HAL_GPIO_Init+0x244>
 8004672:	2304      	movs	r3, #4
 8004674:	e006      	b.n	8004684 <HAL_GPIO_Init+0x244>
 8004676:	2303      	movs	r3, #3
 8004678:	e004      	b.n	8004684 <HAL_GPIO_Init+0x244>
 800467a:	2302      	movs	r3, #2
 800467c:	e002      	b.n	8004684 <HAL_GPIO_Init+0x244>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_GPIO_Init+0x244>
 8004682:	2300      	movs	r3, #0
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	f002 0203 	and.w	r2, r2, #3
 800468a:	0092      	lsls	r2, r2, #2
 800468c:	4093      	lsls	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004694:	4937      	ldr	r1, [pc, #220]	; (8004774 <HAL_GPIO_Init+0x334>)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	3302      	adds	r3, #2
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a2:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <HAL_GPIO_Init+0x350>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046c6:	4a32      	ldr	r2, [pc, #200]	; (8004790 <HAL_GPIO_Init+0x350>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046cc:	4b30      	ldr	r3, [pc, #192]	; (8004790 <HAL_GPIO_Init+0x350>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046f0:	4a27      	ldr	r2, [pc, #156]	; (8004790 <HAL_GPIO_Init+0x350>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046f6:	4b26      	ldr	r3, [pc, #152]	; (8004790 <HAL_GPIO_Init+0x350>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800471a:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <HAL_GPIO_Init+0x350>)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_GPIO_Init+0x350>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004744:	4a12      	ldr	r2, [pc, #72]	; (8004790 <HAL_GPIO_Init+0x350>)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	3301      	adds	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	f47f ae78 	bne.w	8004450 <HAL_GPIO_Init+0x10>
  }
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40010000 	.word	0x40010000
 8004778:	48000400 	.word	0x48000400
 800477c:	48000800 	.word	0x48000800
 8004780:	48000c00 	.word	0x48000c00
 8004784:	48001000 	.word	0x48001000
 8004788:	48001400 	.word	0x48001400
 800478c:	48001800 	.word	0x48001800
 8004790:	40010400 	.word	0x40010400

08004794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047a2:	e0cd      	b.n	8004940 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047a4:	2201      	movs	r2, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80c0 	beq.w	800493a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047ba:	4a68      	ldr	r2, [pc, #416]	; (800495c <HAL_GPIO_DeInit+0x1c8>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047e2:	d025      	beq.n	8004830 <HAL_GPIO_DeInit+0x9c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a5e      	ldr	r2, [pc, #376]	; (8004960 <HAL_GPIO_DeInit+0x1cc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d01f      	beq.n	800482c <HAL_GPIO_DeInit+0x98>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a5d      	ldr	r2, [pc, #372]	; (8004964 <HAL_GPIO_DeInit+0x1d0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d019      	beq.n	8004828 <HAL_GPIO_DeInit+0x94>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a5c      	ldr	r2, [pc, #368]	; (8004968 <HAL_GPIO_DeInit+0x1d4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <HAL_GPIO_DeInit+0x90>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a5b      	ldr	r2, [pc, #364]	; (800496c <HAL_GPIO_DeInit+0x1d8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00d      	beq.n	8004820 <HAL_GPIO_DeInit+0x8c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a5a      	ldr	r2, [pc, #360]	; (8004970 <HAL_GPIO_DeInit+0x1dc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <HAL_GPIO_DeInit+0x88>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a59      	ldr	r2, [pc, #356]	; (8004974 <HAL_GPIO_DeInit+0x1e0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_GPIO_DeInit+0x84>
 8004814:	2306      	movs	r3, #6
 8004816:	e00c      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 8004818:	2307      	movs	r3, #7
 800481a:	e00a      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 800481c:	2305      	movs	r3, #5
 800481e:	e008      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 8004820:	2304      	movs	r3, #4
 8004822:	e006      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 8004824:	2303      	movs	r3, #3
 8004826:	e004      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 8004828:	2302      	movs	r3, #2
 800482a:	e002      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_GPIO_DeInit+0x9e>
 8004830:	2300      	movs	r3, #0
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	f002 0203 	and.w	r2, r2, #3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4093      	lsls	r3, r2
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	429a      	cmp	r2, r3
 8004840:	d132      	bne.n	80048a8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004842:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	43db      	mvns	r3, r3
 800484a:	494b      	ldr	r1, [pc, #300]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 800484c:	4013      	ands	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	4947      	ldr	r1, [pc, #284]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 800485a:	4013      	ands	r3, r2
 800485c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	4944      	ldr	r1, [pc, #272]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 8004868:	4013      	ands	r3, r2
 800486a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800486c:	4b42      	ldr	r3, [pc, #264]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	43db      	mvns	r3, r3
 8004874:	4940      	ldr	r1, [pc, #256]	; (8004978 <HAL_GPIO_DeInit+0x1e4>)
 8004876:	4013      	ands	r3, r2
 8004878:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800488a:	4a34      	ldr	r2, [pc, #208]	; (800495c <HAL_GPIO_DeInit+0x1c8>)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3302      	adds	r3, #2
 8004892:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	43da      	mvns	r2, r3
 800489a:	4830      	ldr	r0, [pc, #192]	; (800495c <HAL_GPIO_DeInit+0x1c8>)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	400a      	ands	r2, r1
 80048a2:	3302      	adds	r3, #2
 80048a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	2103      	movs	r1, #3
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	08d2      	lsrs	r2, r2, #3
 80048dc:	4019      	ands	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3208      	adds	r2, #8
 80048e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	2103      	movs	r1, #3
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	2101      	movs	r1, #1
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2103      	movs	r1, #3
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	401a      	ands	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	2101      	movs	r1, #1
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	401a      	ands	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f af2b 	bne.w	80047a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40010000 	.word	0x40010000
 8004960:	48000400 	.word	0x48000400
 8004964:	48000800 	.word	0x48000800
 8004968:	48000c00 	.word	0x48000c00
 800496c:	48001000 	.word	0x48001000
 8004970:	48001400 	.word	0x48001400
 8004974:	48001800 	.word	0x48001800
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
 8004998:	e001      	b.n	800499e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049bc:	787b      	ldrb	r3, [r7, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4013      	ands	r3, r2
 80049f4:	041a      	lsls	r2, r3, #16
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	43d9      	mvns	r1, r3
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	400b      	ands	r3, r1
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fee2 	bl	80007f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010400 	.word	0x40010400

08004a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e08d      	b.n	8004b6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd f86a 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d107      	bne.n	8004aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	e006      	b.n	8004ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d108      	bne.n	8004ae2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	e007      	b.n	8004af2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e021      	b.n	8004bcc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2224      	movs	r2, #36	; 0x24
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fd f86f 	bl	8001c84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 80f9 	bne.w	8004dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x34>
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0ed      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Mem_Write+0x4e>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0e6      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fe fb37 	bl	800329c <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2319      	movs	r3, #25
 8004c36:	2201      	movs	r2, #1
 8004c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fac3 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0d1      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2221      	movs	r2, #33	; 0x21
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c74:	88f8      	ldrh	r0, [r7, #6]
 8004c76:	893a      	ldrh	r2, [r7, #8]
 8004c78:	8979      	ldrh	r1, [r7, #10]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4603      	mov	r3, r0
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f9d3 	bl	8005030 <I2C_RequestMemoryWrite>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a9      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2bff      	cmp	r3, #255	; 0xff
 8004ca4:	d90e      	bls.n	8004cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	8979      	ldrh	r1, [r7, #10]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fc3d 	bl	800553c <I2C_TransferConfig>
 8004cc2:	e00f      	b.n	8004ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	8979      	ldrh	r1, [r7, #10]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fc2c 	bl	800553c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fabc 	bl	8005266 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e07b      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d034      	beq.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d130      	bne.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fa3f 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04d      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d90e      	bls.n	8004d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fbe1 	bl	800553c <I2C_TransferConfig>
 8004d7a:	e00f      	b.n	8004d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fbd0 	bl	800553c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d19e      	bne.n	8004ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 faa2 	bl	80052f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e01a      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_I2C_Mem_Write+0x224>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	fe00e800 	.word	0xfe00e800

08004dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	f040 80fd 	bne.w	800501e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_I2C_Mem_Read+0x34>
 8004e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0f1      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x4e>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0ea      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e52:	f7fe fa23 	bl	800329c <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2319      	movs	r3, #25
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f9af 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d5      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2222      	movs	r2, #34	; 0x22
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e9c:	88f8      	ldrh	r0, [r7, #6]
 8004e9e:	893a      	ldrh	r2, [r7, #8]
 8004ea0:	8979      	ldrh	r1, [r7, #10]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f913 	bl	80050d8 <I2C_RequestMemoryRead>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0ad      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2bff      	cmp	r3, #255	; 0xff
 8004ecc:	d90e      	bls.n	8004eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	8979      	ldrh	r1, [r7, #10]
 8004edc:	4b52      	ldr	r3, [pc, #328]	; (8005028 <HAL_I2C_Mem_Read+0x22c>)
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fb29 	bl	800553c <I2C_TransferConfig>
 8004eea:	e00f      	b.n	8004f0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_I2C_Mem_Read+0x22c>)
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fb18 	bl	800553c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2200      	movs	r2, #0
 8004f14:	2104      	movs	r1, #4
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f956 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07c      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d034      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d130      	bne.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	2200      	movs	r2, #0
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f927 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e04d      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2bff      	cmp	r3, #255	; 0xff
 8004f8c:	d90e      	bls.n	8004fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fac9 	bl	800553c <I2C_TransferConfig>
 8004faa:	e00f      	b.n	8004fcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fab8 	bl	800553c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d19a      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f98a 	bl	80052f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01a      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_I2C_Mem_Read+0x230>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	80002400 	.word	0x80002400
 800502c:	fe00e800 	.word	0xfe00e800

08005030 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4603      	mov	r3, r0
 8005040:	817b      	strh	r3, [r7, #10]
 8005042:	460b      	mov	r3, r1
 8005044:	813b      	strh	r3, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <I2C_RequestMemoryWrite+0xa4>)
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fa6f 	bl	800553c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8ff 	bl	8005266 <I2C_WaitOnTXISFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e02c      	b.n	80050cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005078:	893b      	ldrh	r3, [r7, #8]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	629a      	str	r2, [r3, #40]	; 0x28
 8005082:	e015      	b.n	80050b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005084:	893b      	ldrh	r3, [r7, #8]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f8e5 	bl	8005266 <I2C_WaitOnTXISFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e012      	b.n	80050cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a6:	893b      	ldrh	r3, [r7, #8]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f884 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	80002000 	.word	0x80002000

080050d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	4608      	mov	r0, r1
 80050e2:	4611      	mov	r1, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	817b      	strh	r3, [r7, #10]
 80050ea:	460b      	mov	r3, r1
 80050ec:	813b      	strh	r3, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	8979      	ldrh	r1, [r7, #10]
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <I2C_RequestMemoryRead+0xa4>)
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fa1c 	bl	800553c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f8ac 	bl	8005266 <I2C_WaitOnTXISFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02c      	b.n	8005172 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800511e:	893b      	ldrh	r3, [r7, #8]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
 8005128:	e015      	b.n	8005156 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800512a:	893b      	ldrh	r3, [r7, #8]
 800512c:	0a1b      	lsrs	r3, r3, #8
 800512e:	b29b      	uxth	r3, r3
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	69b9      	ldr	r1, [r7, #24]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f892 	bl	8005266 <I2C_WaitOnTXISFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e012      	b.n	8005172 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800514c:	893b      	ldrh	r3, [r7, #8]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2200      	movs	r2, #0
 800515e:	2140      	movs	r1, #64	; 0x40
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f831 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	80002000 	.word	0x80002000

08005180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d103      	bne.n	800519e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d007      	beq.n	80051bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	619a      	str	r2, [r3, #24]
  }
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d8:	e031      	b.n	800523e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e0:	d02d      	beq.n	800523e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fe f85b 	bl	800329c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d122      	bne.n	800523e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	429a      	cmp	r2, r3
 8005214:	d113      	bne.n	800523e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e00f      	b.n	800525e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d0be      	beq.n	80051da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005272:	e033      	b.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f87f 	bl	800537c <I2C_IsErrorOccurred>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e031      	b.n	80052ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528e:	d025      	beq.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fe f804 	bl	800329c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11a      	bne.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d013      	beq.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e007      	b.n	80052ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d1c4      	bne.n	8005274 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005300:	e02f      	b.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f838 	bl	800537c <I2C_IsErrorOccurred>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e02d      	b.n	8005372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fd ffc1 	bl	800329c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11a      	bne.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b20      	cmp	r3, #32
 8005338:	d013      	beq.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e007      	b.n	8005372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d1c8      	bne.n	8005302 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d068      	beq.n	800547a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2210      	movs	r2, #16
 80053ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053b0:	e049      	b.n	8005446 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b8:	d045      	beq.n	8005446 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fd ff6f 	bl	800329c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <I2C_IsErrorOccurred+0x54>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d13a      	bne.n	8005446 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f2:	d121      	bne.n	8005438 <I2C_IsErrorOccurred+0xbc>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fa:	d01d      	beq.n	8005438 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d01a      	beq.n	8005438 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005410:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005412:	f7fd ff43 	bl	800329c <HAL_GetTick>
 8005416:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005418:	e00e      	b.n	8005438 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800541a:	f7fd ff3f 	bl	800329c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b19      	cmp	r3, #25
 8005426:	d907      	bls.n	8005438 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f043 0320 	orr.w	r3, r3, #32
 800542e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005436:	e006      	b.n	8005446 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b20      	cmp	r3, #32
 8005444:	d1e9      	bne.n	800541a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b20      	cmp	r3, #32
 8005452:	d003      	beq.n	800545c <I2C_IsErrorOccurred+0xe0>
 8005454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0aa      	beq.n	80053b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800545c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2220      	movs	r2, #32
 800546a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800549c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f043 0302 	orr.w	r3, r3, #2
 80054d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80054e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01c      	beq.n	800552a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe45 	bl	8005180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <I2C_IsErrorOccurred+0x1bc>)
 8005502:	400b      	ands	r3, r1
 8005504:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800552a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	fe00e800 	.word	0xfe00e800

0800553c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	4613      	mov	r3, r2
 800554c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554e:	897b      	ldrh	r3, [r7, #10]
 8005550:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005554:	7a7b      	ldrb	r3, [r7, #9]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800555c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	4313      	orrs	r3, r2
 8005566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800556a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	0d5b      	lsrs	r3, r3, #21
 8005576:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <I2C_TransferConfig+0x60>)
 800557c:	430b      	orrs	r3, r1
 800557e:	43db      	mvns	r3, r3
 8005580:	ea02 0103 	and.w	r1, r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	03ff63ff 	.word	0x03ff63ff

080055a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d138      	bne.n	8005628 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e032      	b.n	800562a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b20      	cmp	r3, #32
 800564a:	d139      	bne.n	80056c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005656:	2302      	movs	r3, #2
 8005658:	e033      	b.n	80056c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2224      	movs	r2, #36	; 0x24
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005688:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40007000 	.word	0x40007000

080056f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <HAL_PWREx_GetVoltageRange+0x18>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40007000 	.word	0x40007000

0800570c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571a:	d130      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800571c:	4b23      	ldr	r3, [pc, #140]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005728:	d038      	beq.n	800579c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800572a:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2232      	movs	r2, #50	; 0x32
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0c9b      	lsrs	r3, r3, #18
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005750:	e002      	b.n	8005758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b01      	subs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d102      	bne.n	800576c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f2      	bne.n	8005752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d110      	bne.n	800579c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d007      	beq.n	800579c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005794:	4a05      	ldr	r2, [pc, #20]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40007000 	.word	0x40007000
 80057b0:	20000004 	.word	0x20000004
 80057b4:	431bde83 	.word	0x431bde83

080057b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af02      	add	r7, sp, #8
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80057c0:	f7fd fd6c 	bl	800329c <HAL_GetTick>
 80057c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e063      	b.n	8005898 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fc fa89 	bl	8001cfc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80057ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fb03 	bl	8005dfa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	3b01      	subs	r3, #1
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	2120      	movs	r1, #32
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fafb 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d131      	bne.n	800588e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f023 0310 	bic.w	r3, r3, #16
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	0611      	lsls	r1, r2, #24
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68d2      	ldr	r2, [r2, #12]
 8005842:	4311      	orrs	r1, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	430b      	orrs	r3, r1
 800584a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_QSPI_Init+0xe8>)
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6912      	ldr	r2, [r2, #16]
 800585a:	0411      	lsls	r1, r2, #16
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6952      	ldr	r2, [r2, #20]
 8005860:	4311      	orrs	r1, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6992      	ldr	r2, [r2, #24]
 8005866:	4311      	orrs	r1, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	430b      	orrs	r3, r1
 800586e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005896:	7afb      	ldrb	r3, [r7, #11]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	ffe0f8fe 	.word	0xffe0f8fe

080058a4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e016      	b.n	80058e4 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fc fa5c 	bl	8001d84 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80058f8:	f7fd fcd0 	bl	800329c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_QSPI_Command+0x22>
 800590a:	2302      	movs	r3, #2
 800590c:	e048      	b.n	80059a0 <HAL_QSPI_Command+0xb4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d137      	bne.n	8005992 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2200      	movs	r2, #0
 8005938:	2120      	movs	r1, #32
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa6b 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d125      	bne.n	8005996 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800594a:	2200      	movs	r2, #0
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa98 	bl	8005e84 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d115      	bne.n	8005988 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2201      	movs	r2, #1
 8005964:	2102      	movs	r1, #2
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa55 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2202      	movs	r2, #2
 800597c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005986:	e006      	b.n	8005996 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005990:	e001      	b.n	8005996 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005992:	2302      	movs	r3, #2
 8005994:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80059b8:	f7fd fc70 	bl	800329c <HAL_GetTick>
 80059bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3320      	adds	r3, #32
 80059c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_QSPI_Transmit+0x2e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e07b      	b.n	8005ace <HAL_QSPI_Transmit+0x126>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d16a      	bne.n	8005ac0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d05b      	beq.n	8005aae <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2212      	movs	r2, #18
 80059fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a2a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005a2c:	e01b      	b.n	8005a66 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2201      	movs	r2, #1
 8005a36:	2104      	movs	r1, #4
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f9ec 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d113      	bne.n	8005a70 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	1e5a      	subs	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1df      	bne.n	8005a2e <HAL_QSPI_Transmit+0x86>
 8005a6e:	e000      	b.n	8005a72 <HAL_QSPI_Transmit+0xca>
          break;
 8005a70:	bf00      	nop
      }

      if (status == HAL_OK)
 8005a72:	7ffb      	ldrb	r3, [r7, #31]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d115      	bne.n	8005aa4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	2102      	movs	r1, #2
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f9c7 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005a8c:	7ffb      	ldrb	r3, [r7, #31]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2202      	movs	r2, #2
 8005a98:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f934 	bl	8005d08 <HAL_QSPI_Abort>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005aac:	e00a      	b.n	8005ac4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	f043 0208 	orr.w	r2, r3, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e001      	b.n	8005ac4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005ae6:	f7fd fbd9 	bl	800329c <HAL_GetTick>
 8005aea:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3320      	adds	r3, #32
 8005afa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_QSPI_Receive+0x36>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e082      	b.n	8005c12 <HAL_QSPI_Receive+0x13c>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d171      	bne.n	8005c04 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d062      	beq.n	8005bf2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2222      	movs	r2, #34	; 0x22
 8005b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005b64:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005b6e:	e01c      	b.n	8005baa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2201      	movs	r2, #1
 8005b78:	2106      	movs	r1, #6
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f94b 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d114      	bne.n	8005bb4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1de      	bne.n	8005b70 <HAL_QSPI_Receive+0x9a>
 8005bb2:	e000      	b.n	8005bb6 <HAL_QSPI_Receive+0xe0>
          break;
 8005bb4:	bf00      	nop
      }

      if (status == HAL_OK)
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d115      	bne.n	8005be8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f925 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f892 	bl	8005d08 <HAL_QSPI_Abort>
 8005be4:	4603      	mov	r3, r0
 8005be6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005bf0:	e00a      	b.n	8005c08 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	f043 0208 	orr.w	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e001      	b.n	8005c08 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
 8005c06:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b088      	sub	sp, #32
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c28:	f7fd fb38 	bl	800329c <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_QSPI_AutoPolling+0x24>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e060      	b.n	8005d00 <HAL_QSPI_AutoPolling+0xe6>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d14f      	bne.n	8005cf2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2242      	movs	r2, #66	; 0x42
 8005c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2120      	movs	r1, #32
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f8d3 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d13d      	bne.n	8005cf6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6852      	ldr	r2, [r2, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6892      	ldr	r2, [r2, #8]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005cb0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f8df 	bl	8005e84 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	2108      	movs	r1, #8
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f8a0 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005cf0:	e001      	b.n	8005cf6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7fd fac2 	bl	800329c <HAL_GetTick>
 8005d18:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d062      	beq.n	8005df0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0204 	bic.w	r2, r2, #4
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe f9f7 	bl	8004148 <HAL_DMA_Abort>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	f043 0204 	orr.w	r2, r3, #4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d034      	beq.n	8005de8 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0202 	orr.w	r2, r2, #2
 8005d8c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2201      	movs	r2, #1
 8005d98:	2102      	movs	r1, #2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f83b 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10e      	bne.n	8005dc8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2202      	movs	r2, #2
 8005db0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2120      	movs	r1, #32
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f829 	bl	8005e16 <QSPI_WaitFlagStateUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d110      	bne.n	8005df0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ddc:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005de6:	e003      	b.n	8005df0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e26:	e01a      	b.n	8005e5e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2e:	d016      	beq.n	8005e5e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e30:	f7fd fa34 	bl	800329c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10b      	bne.n	8005e5e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00e      	b.n	8005e7c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d1d6      	bne.n	8005e28 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <QSPI_Config+0x28>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e9e:	d005      	beq.n	8005eac <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80b9 	beq.w	8006028 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d05f      	beq.n	8005f7e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	6892      	ldr	r2, [r2, #8]
 8005ec6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d031      	beq.n	8005f34 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	049b      	lsls	r3, r3, #18
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	ea42 0103 	orr.w	r1, r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f24:	f000 812e 	beq.w	8006184 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	6852      	ldr	r2, [r2, #4]
 8005f30:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005f32:	e127      	b.n	8006184 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	049b      	lsls	r3, r3, #18
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	ea42 0103 	orr.w	r1, r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	615a      	str	r2, [r3, #20]
}
 8005f7c:	e102      	b.n	8006184 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d02e      	beq.n	8005fe4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	049b      	lsls	r3, r3, #18
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	ea42 0103 	orr.w	r1, r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fd4:	f000 80d6 	beq.w	8006184 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	619a      	str	r2, [r3, #24]
}
 8005fe2:	e0cf      	b.n	8006184 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	431a      	orrs	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	049b      	lsls	r3, r3, #18
 8006000:	431a      	orrs	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	431a      	orrs	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	431a      	orrs	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	ea42 0103 	orr.w	r1, r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	430a      	orrs	r2, r1
 8006024:	615a      	str	r2, [r3, #20]
}
 8006026:	e0ad      	b.n	8006184 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d058      	beq.n	80060e2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	6892      	ldr	r2, [r2, #8]
 8006038:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02d      	beq.n	800609e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	431a      	orrs	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	431a      	orrs	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	049b      	lsls	r3, r3, #18
 800605e:	431a      	orrs	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	431a      	orrs	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	431a      	orrs	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	431a      	orrs	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	ea42 0103 	orr.w	r1, r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	430a      	orrs	r2, r1
 8006088:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006090:	d078      	beq.n	8006184 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	619a      	str	r2, [r3, #24]
}
 800609c:	e072      	b.n	8006184 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	431a      	orrs	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	049b      	lsls	r3, r3, #18
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	ea42 0103 	orr.w	r1, r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	430a      	orrs	r2, r1
 80060de:	615a      	str	r2, [r3, #20]
}
 80060e0:	e050      	b.n	8006184 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02a      	beq.n	8006140 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	049b      	lsls	r3, r3, #18
 8006106:	431a      	orrs	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	431a      	orrs	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	431a      	orrs	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	431a      	orrs	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	ea42 0103 	orr.w	r1, r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	430a      	orrs	r2, r1
 800612a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006132:	d027      	beq.n	8006184 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	619a      	str	r2, [r3, #24]
}
 800613e:	e021      	b.n	8006184 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01d      	beq.n	8006184 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	431a      	orrs	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	431a      	orrs	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	049b      	lsls	r3, r3, #18
 8006164:	431a      	orrs	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	431a      	orrs	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	431a      	orrs	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	ea42 0103 	orr.w	r1, r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	430a      	orrs	r2, r1
 8006182:	615a      	str	r2, [r3, #20]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e3ca      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a2:	4b97      	ldr	r3, [pc, #604]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ac:	4b94      	ldr	r3, [pc, #592]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80e4 	beq.w	800638c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <HAL_RCC_OscConfig+0x4a>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	f040 808b 	bne.w	80062e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f040 8087 	bne.w	80062e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061da:	4b89      	ldr	r3, [pc, #548]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_RCC_OscConfig+0x62>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e3a2      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	4b82      	ldr	r3, [pc, #520]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <HAL_RCC_OscConfig+0x7c>
 8006202:	4b7f      	ldr	r3, [pc, #508]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800620a:	e005      	b.n	8006218 <HAL_RCC_OscConfig+0x88>
 800620c:	4b7c      	ldr	r3, [pc, #496]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800620e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006218:	4293      	cmp	r3, r2
 800621a:	d223      	bcs.n	8006264 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fd55 	bl	8006cd0 <RCC_SetFlashLatencyFromMSIRange>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e383      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006230:	4b73      	ldr	r3, [pc, #460]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a72      	ldr	r2, [pc, #456]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006236:	f043 0308 	orr.w	r3, r3, #8
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b70      	ldr	r3, [pc, #448]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	496d      	ldr	r1, [pc, #436]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800624e:	4b6c      	ldr	r3, [pc, #432]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	4968      	ldr	r1, [pc, #416]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]
 8006262:	e025      	b.n	80062b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006264:	4b66      	ldr	r3, [pc, #408]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a65      	ldr	r2, [pc, #404]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b63      	ldr	r3, [pc, #396]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	4960      	ldr	r1, [pc, #384]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006282:	4b5f      	ldr	r3, [pc, #380]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	495b      	ldr	r1, [pc, #364]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fd15 	bl	8006cd0 <RCC_SetFlashLatencyFromMSIRange>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e343      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062b0:	f000 fc4a 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b52      	ldr	r3, [pc, #328]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	4950      	ldr	r1, [pc, #320]	; (8006404 <HAL_RCC_OscConfig+0x274>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	4a4e      	ldr	r2, [pc, #312]	; (8006408 <HAL_RCC_OscConfig+0x278>)
 80062ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062d0:	4b4e      	ldr	r3, [pc, #312]	; (800640c <HAL_RCC_OscConfig+0x27c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fc ff91 	bl	80031fc <HAL_InitTick>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d052      	beq.n	800638a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	e327      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d032      	beq.n	8006356 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062f0:	4b43      	ldr	r3, [pc, #268]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a42      	ldr	r2, [pc, #264]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062fc:	f7fc ffce 	bl	800329c <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006304:	f7fc ffca 	bl	800329c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e310      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006316:	4b3a      	ldr	r3, [pc, #232]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a36      	ldr	r2, [pc, #216]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006328:	f043 0308 	orr.w	r3, r3, #8
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b34      	ldr	r3, [pc, #208]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	4931      	ldr	r1, [pc, #196]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006340:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	492c      	ldr	r1, [pc, #176]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	e01a      	b.n	800638c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006356:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a29      	ldr	r2, [pc, #164]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006362:	f7fc ff9b 	bl	800329c <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800636a:	f7fc ff97 	bl	800329c <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e2dd      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800637c:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f0      	bne.n	800636a <HAL_RCC_OscConfig+0x1da>
 8006388:	e000      	b.n	800638c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800638a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d074      	beq.n	8006482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b08      	cmp	r3, #8
 800639c:	d005      	beq.n	80063aa <HAL_RCC_OscConfig+0x21a>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	d10e      	bne.n	80063c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d10b      	bne.n	80063c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063aa:	4b15      	ldr	r3, [pc, #84]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d064      	beq.n	8006480 <HAL_RCC_OscConfig+0x2f0>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d160      	bne.n	8006480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e2ba      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ca:	d106      	bne.n	80063da <HAL_RCC_OscConfig+0x24a>
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e026      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e2:	d115      	bne.n	8006410 <HAL_RCC_OscConfig+0x280>
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a05      	ldr	r2, [pc, #20]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b03      	ldr	r3, [pc, #12]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a02      	ldr	r2, [pc, #8]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e014      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	08009d84 	.word	0x08009d84
 8006408:	20000004 	.word	0x20000004
 800640c:	20000030 	.word	0x20000030
 8006410:	4ba0      	ldr	r3, [pc, #640]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a9f      	ldr	r2, [pc, #636]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b9d      	ldr	r3, [pc, #628]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a9c      	ldr	r2, [pc, #624]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fc ff34 	bl	800329c <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006438:	f7fc ff30 	bl	800329c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	; 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e276      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800644a:	4b92      	ldr	r3, [pc, #584]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x2a8>
 8006456:	e014      	b.n	8006482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fc ff20 	bl	800329c <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7fc ff1c 	bl	800329c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e262      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006472:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x2d0>
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d060      	beq.n	8006550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d005      	beq.n	80064a0 <HAL_RCC_OscConfig+0x310>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b0c      	cmp	r3, #12
 8006498:	d119      	bne.n	80064ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d116      	bne.n	80064ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a0:	4b7c      	ldr	r3, [pc, #496]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_OscConfig+0x328>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e23f      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b8:	4b76      	ldr	r3, [pc, #472]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	061b      	lsls	r3, r3, #24
 80064c6:	4973      	ldr	r1, [pc, #460]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064cc:	e040      	b.n	8006550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d023      	beq.n	800651e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d6:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a6e      	ldr	r2, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fc fedb 	bl	800329c <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ea:	f7fc fed7 	bl	800329c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e21d      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064fc:	4b65      	ldr	r3, [pc, #404]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006508:	4b62      	ldr	r3, [pc, #392]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	495f      	ldr	r1, [pc, #380]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006518:	4313      	orrs	r3, r2
 800651a:	604b      	str	r3, [r1, #4]
 800651c:	e018      	b.n	8006550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651e:	4b5d      	ldr	r3, [pc, #372]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5c      	ldr	r2, [pc, #368]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc feb7 	bl	800329c <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006532:	f7fc feb3 	bl	800329c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1f9      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d03c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01c      	beq.n	800659e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800656a:	4a4a      	ldr	r2, [pc, #296]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006574:	f7fc fe92 	bl	800329c <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657c:	f7fc fe8e 	bl	800329c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e1d4      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800658e:	4b41      	ldr	r3, [pc, #260]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ef      	beq.n	800657c <HAL_RCC_OscConfig+0x3ec>
 800659c:	e01b      	b.n	80065d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065a4:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ae:	f7fc fe75 	bl	800329c <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fc fe71 	bl	800329c <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e1b7      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065c8:	4b32      	ldr	r3, [pc, #200]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ef      	bne.n	80065b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80a6 	beq.w	8006730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065e4:	2300      	movs	r3, #0
 80065e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	4a26      	ldr	r2, [pc, #152]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006600:	4b24      	ldr	r3, [pc, #144]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006610:	4b21      	ldr	r3, [pc, #132]	; (8006698 <HAL_RCC_OscConfig+0x508>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d118      	bne.n	800664e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800661c:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <HAL_RCC_OscConfig+0x508>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <HAL_RCC_OscConfig+0x508>)
 8006622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006628:	f7fc fe38 	bl	800329c <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006630:	f7fc fe34 	bl	800329c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e17a      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <HAL_RCC_OscConfig+0x508>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d108      	bne.n	8006668 <HAL_RCC_OscConfig+0x4d8>
 8006656:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	4a0d      	ldr	r2, [pc, #52]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006666:	e029      	b.n	80066bc <HAL_RCC_OscConfig+0x52c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b05      	cmp	r3, #5
 800666e:	d115      	bne.n	800669c <HAL_RCC_OscConfig+0x50c>
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006678:	f043 0304 	orr.w	r3, r3, #4
 800667c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006686:	4a03      	ldr	r2, [pc, #12]	; (8006694 <HAL_RCC_OscConfig+0x504>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006690:	e014      	b.n	80066bc <HAL_RCC_OscConfig+0x52c>
 8006692:	bf00      	nop
 8006694:	40021000 	.word	0x40021000
 8006698:	40007000 	.word	0x40007000
 800669c:	4b9c      	ldr	r3, [pc, #624]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a2:	4a9b      	ldr	r2, [pc, #620]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066ac:	4b98      	ldr	r3, [pc, #608]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	4a97      	ldr	r2, [pc, #604]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c4:	f7fc fdea 	bl	800329c <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066cc:	f7fc fde6 	bl	800329c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e12a      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e2:	4b8b      	ldr	r3, [pc, #556]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ed      	beq.n	80066cc <HAL_RCC_OscConfig+0x53c>
 80066f0:	e015      	b.n	800671e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fc fdd3 	bl	800329c <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fc fdcf 	bl	800329c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e113      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006710:	4b7f      	ldr	r3, [pc, #508]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ed      	bne.n	80066fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800671e:	7ffb      	ldrb	r3, [r7, #31]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006724:	4b7a      	ldr	r3, [pc, #488]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	4a79      	ldr	r2, [pc, #484]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 800672a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80fe 	beq.w	8006936 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	2b02      	cmp	r3, #2
 8006740:	f040 80d0 	bne.w	80068e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006744:	4b72      	ldr	r3, [pc, #456]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f003 0203 	and.w	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	429a      	cmp	r2, r3
 8006756:	d130      	bne.n	80067ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	3b01      	subs	r3, #1
 8006764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d127      	bne.n	80067ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006776:	429a      	cmp	r2, r3
 8006778:	d11f      	bne.n	80067ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006784:	2a07      	cmp	r2, #7
 8006786:	bf14      	ite	ne
 8006788:	2201      	movne	r2, #1
 800678a:	2200      	moveq	r2, #0
 800678c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800678e:	4293      	cmp	r3, r2
 8006790:	d113      	bne.n	80067ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	3b01      	subs	r3, #1
 80067a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d109      	bne.n	80067ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	3b01      	subs	r3, #1
 80067b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d06e      	beq.n	8006898 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b0c      	cmp	r3, #12
 80067be:	d069      	beq.n	8006894 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067c0:	4b53      	ldr	r3, [pc, #332]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80067cc:	4b50      	ldr	r3, [pc, #320]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0ad      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067dc:	4b4c      	ldr	r3, [pc, #304]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80067e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067e8:	f7fc fd58 	bl	800329c <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f0:	f7fc fd54 	bl	800329c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e09a      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006802:	4b43      	ldr	r3, [pc, #268]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800680e:	4b40      	ldr	r3, [pc, #256]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	4b40      	ldr	r3, [pc, #256]	; (8006914 <HAL_RCC_OscConfig+0x784>)
 8006814:	4013      	ands	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800681e:	3a01      	subs	r2, #1
 8006820:	0112      	lsls	r2, r2, #4
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006828:	0212      	lsls	r2, r2, #8
 800682a:	4311      	orrs	r1, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006830:	0852      	lsrs	r2, r2, #1
 8006832:	3a01      	subs	r2, #1
 8006834:	0552      	lsls	r2, r2, #21
 8006836:	4311      	orrs	r1, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800683c:	0852      	lsrs	r2, r2, #1
 800683e:	3a01      	subs	r2, #1
 8006840:	0652      	lsls	r2, r2, #25
 8006842:	4311      	orrs	r1, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006848:	0912      	lsrs	r2, r2, #4
 800684a:	0452      	lsls	r2, r2, #17
 800684c:	430a      	orrs	r2, r1
 800684e:	4930      	ldr	r1, [pc, #192]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006850:	4313      	orrs	r3, r2
 8006852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006854:	4b2e      	ldr	r3, [pc, #184]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2d      	ldr	r2, [pc, #180]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 800685a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800685e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006860:	4b2b      	ldr	r3, [pc, #172]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800686a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800686c:	f7fc fd16 	bl	800329c <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006874:	f7fc fd12 	bl	800329c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e058      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006892:	e050      	b.n	8006936 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e04f      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d148      	bne.n	8006936 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068bc:	f7fc fcee 	bl	800329c <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fc fcea 	bl	800329c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e030      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0x734>
 80068e2:	e028      	b.n	8006936 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b0c      	cmp	r3, #12
 80068e8:	d023      	beq.n	8006932 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a08      	ldr	r2, [pc, #32]	; (8006910 <HAL_RCC_OscConfig+0x780>)
 80068f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fc fcd1 	bl	800329c <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068fc:	e00c      	b.n	8006918 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fe:	f7fc fccd 	bl	800329c <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d905      	bls.n	8006918 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e013      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
 8006910:	40021000 	.word	0x40021000
 8006914:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_RCC_OscConfig+0x7b0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ec      	bne.n	80068fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <HAL_RCC_OscConfig+0x7b0>)
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	4905      	ldr	r1, [pc, #20]	; (8006940 <HAL_RCC_OscConfig+0x7b0>)
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCC_OscConfig+0x7b4>)
 800692c:	4013      	ands	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e001      	b.n	8006936 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40021000 	.word	0x40021000
 8006944:	feeefffc 	.word	0xfeeefffc

08006948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0e7      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800695c:	4b75      	ldr	r3, [pc, #468]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d910      	bls.n	800698c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b72      	ldr	r3, [pc, #456]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 0207 	bic.w	r2, r3, #7
 8006972:	4970      	ldr	r1, [pc, #448]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b6e      	ldr	r3, [pc, #440]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0cf      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	4b66      	ldr	r3, [pc, #408]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d908      	bls.n	80069ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b63      	ldr	r3, [pc, #396]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4960      	ldr	r1, [pc, #384]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d04c      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ce:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d121      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e0a6      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069e6:	4b54      	ldr	r3, [pc, #336]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d115      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e09a      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069fe:	4b4e      	ldr	r3, [pc, #312]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e08e      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a0e:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e086      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a1e:	4b46      	ldr	r3, [pc, #280]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f023 0203 	bic.w	r2, r3, #3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4943      	ldr	r1, [pc, #268]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a30:	f7fc fc34 	bl	800329c <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a38:	f7fc fc30 	bl	800329c <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e06e      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4e:	4b3a      	ldr	r3, [pc, #232]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 020c 	and.w	r2, r3, #12
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1eb      	bne.n	8006a38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d010      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d208      	bcs.n	8006a8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a7c:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	492b      	ldr	r1, [pc, #172]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a8e:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d210      	bcs.n	8006abe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9c:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f023 0207 	bic.w	r2, r3, #7
 8006aa4:	4923      	ldr	r1, [pc, #140]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aac:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <HAL_RCC_ClockConfig+0x1ec>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d001      	beq.n	8006abe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e036      	b.n	8006b2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4918      	ldr	r1, [pc, #96]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ae8:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4910      	ldr	r1, [pc, #64]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006afc:	f000 f824 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	490b      	ldr	r1, [pc, #44]	; (8006b3c <HAL_RCC_ClockConfig+0x1f4>)
 8006b0e:	5ccb      	ldrb	r3, [r1, r3]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <HAL_RCC_ClockConfig+0x1f8>)
 8006b1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <HAL_RCC_ClockConfig+0x1fc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fc fb6b 	bl	80031fc <HAL_InitTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40022000 	.word	0x40022000
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	08009d84 	.word	0x08009d84
 8006b40:	20000004 	.word	0x20000004
 8006b44:	20000030 	.word	0x20000030

08006b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b089      	sub	sp, #36	; 0x24
 8006b4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b60:	4b3b      	ldr	r3, [pc, #236]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCC_GetSysClockFreq+0x34>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d121      	bne.n	8006bba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d11e      	bne.n	8006bba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b7c:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b88:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	e005      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b98:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	091b      	lsrs	r3, r3, #4
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ba4:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d102      	bne.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bc0:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e004      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d101      	bne.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bcc:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006bce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d134      	bne.n	8006c40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d003      	beq.n	8006bee <HAL_RCC_GetSysClockFreq+0xa6>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCC_GetSysClockFreq+0xac>
 8006bec:	e005      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006bee:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bf0:	617b      	str	r3, [r7, #20]
      break;
 8006bf2:	e005      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006bf4:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006bf6:	617b      	str	r3, [r7, #20]
      break;
 8006bf8:	e002      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	617b      	str	r3, [r7, #20]
      break;
 8006bfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c00:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	fb03 f202 	mul.w	r2, r3, r2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c26:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	0e5b      	lsrs	r3, r3, #25
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	3301      	adds	r3, #1
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c40:	69bb      	ldr	r3, [r7, #24]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3724      	adds	r7, #36	; 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40021000 	.word	0x40021000
 8006c54:	08009d9c 	.word	0x08009d9c
 8006c58:	00f42400 	.word	0x00f42400
 8006c5c:	007a1200 	.word	0x007a1200

08006c60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c64:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c66:	681b      	ldr	r3, [r3, #0]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000004 	.word	0x20000004

08006c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c7c:	f7ff fff0 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006c80:	4602      	mov	r2, r0
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	4904      	ldr	r1, [pc, #16]	; (8006ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c8e:	5ccb      	ldrb	r3, [r1, r3]
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	08009d94 	.word	0x08009d94

08006ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ca8:	f7ff ffda 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	0adb      	lsrs	r3, r3, #11
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4904      	ldr	r1, [pc, #16]	; (8006ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	08009d94 	.word	0x08009d94

08006cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006cdc:	4b2a      	ldr	r3, [pc, #168]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ce8:	f7fe fd02 	bl	80056f0 <HAL_PWREx_GetVoltageRange>
 8006cec:	6178      	str	r0, [r7, #20]
 8006cee:	e014      	b.n	8006d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf4:	4a24      	ldr	r2, [pc, #144]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfc:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d08:	f7fe fcf2 	bl	80056f0 <HAL_PWREx_GetVoltageRange>
 8006d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	4a1d      	ldr	r2, [pc, #116]	; (8006d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d20:	d10b      	bne.n	8006d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d919      	bls.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2ba0      	cmp	r3, #160	; 0xa0
 8006d2c:	d902      	bls.n	8006d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d2e:	2302      	movs	r3, #2
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e013      	b.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d34:	2301      	movs	r3, #1
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e010      	b.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d902      	bls.n	8006d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d40:	2303      	movs	r3, #3
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	e00a      	b.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b80      	cmp	r3, #128	; 0x80
 8006d4a:	d102      	bne.n	8006d52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	e004      	b.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b70      	cmp	r3, #112	; 0x70
 8006d56:	d101      	bne.n	8006d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d58:	2301      	movs	r3, #1
 8006d5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f023 0207 	bic.w	r2, r3, #7
 8006d64:	4909      	ldr	r1, [pc, #36]	; (8006d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d6c:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d001      	beq.n	8006d7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40022000 	.word	0x40022000

08006d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d98:	2300      	movs	r3, #0
 8006d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d041      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006db4:	d02a      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006db6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006dba:	d824      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc0:	d008      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006dc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc6:	d81e      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd0:	d010      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006dd2:	e018      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006dd4:	4b86      	ldr	r3, [pc, #536]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4a85      	ldr	r2, [pc, #532]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006de0:	e015      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 facb 	bl	8007384 <RCCEx_PLLSAI1_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006df2:	e00c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3320      	adds	r3, #32
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fbb6 	bl	800756c <RCCEx_PLLSAI2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e04:	e003      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	74fb      	strb	r3, [r7, #19]
      break;
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0e:	7cfb      	ldrb	r3, [r7, #19]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e14:	4b76      	ldr	r3, [pc, #472]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e22:	4973      	ldr	r1, [pc, #460]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006e2a:	e001      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2c:	7cfb      	ldrb	r3, [r7, #19]
 8006e2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d041      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e44:	d02a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006e46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e4a:	d824      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e50:	d008      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e56:	d81e      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e60:	d010      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e62:	e018      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e64:	4b62      	ldr	r3, [pc, #392]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4a61      	ldr	r2, [pc, #388]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e70:	e015      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3304      	adds	r3, #4
 8006e76:	2100      	movs	r1, #0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fa83 	bl	8007384 <RCCEx_PLLSAI1_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e82:	e00c      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3320      	adds	r3, #32
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb6e 	bl	800756c <RCCEx_PLLSAI2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e94:	e003      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	74fb      	strb	r3, [r7, #19]
      break;
 8006e9a:	e000      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ea4:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eaa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb2:	494f      	ldr	r1, [pc, #316]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a0 	beq.w	800700e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ed2:	4b47      	ldr	r3, [pc, #284]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee8:	4b41      	ldr	r3, [pc, #260]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	4a40      	ldr	r2, [pc, #256]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef4:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f00:	2301      	movs	r3, #1
 8006f02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f04:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a3a      	ldr	r2, [pc, #232]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f10:	f7fc f9c4 	bl	800329c <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f16:	e009      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f18:	f7fc f9c0 	bl	800329c <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d902      	bls.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	74fb      	strb	r3, [r7, #19]
        break;
 8006f2a:	e005      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f2c:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ef      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006f38:	7cfb      	ldrb	r3, [r7, #19]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d15c      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f3e:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01f      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d019      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f5c:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f68:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6e:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9a:	f7fc f97f 	bl	800329c <HAL_GetTick>
 8006f9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa0:	e00b      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fa2:	f7fc f97b 	bl	800329c <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d902      	bls.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	74fb      	strb	r3, [r7, #19]
            break;
 8006fb8:	e006      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ec      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006fc8:	7cfb      	ldrb	r3, [r7, #19]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fde:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fe6:	e009      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fe8:	7cfb      	ldrb	r3, [r7, #19]
 8006fea:	74bb      	strb	r3, [r7, #18]
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006fee:	bf00      	nop
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	7cfb      	ldrb	r3, [r7, #19]
 8006ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ffc:	7c7b      	ldrb	r3, [r7, #17]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d105      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007002:	4b9e      	ldr	r3, [pc, #632]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007006:	4a9d      	ldr	r2, [pc, #628]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800700c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800701a:	4b98      	ldr	r3, [pc, #608]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f023 0203 	bic.w	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	4994      	ldr	r1, [pc, #592]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800703c:	4b8f      	ldr	r3, [pc, #572]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f023 020c 	bic.w	r2, r3, #12
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	498c      	ldr	r1, [pc, #560]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800705e:	4b87      	ldr	r3, [pc, #540]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	4983      	ldr	r1, [pc, #524]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007080:	4b7e      	ldr	r3, [pc, #504]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	497b      	ldr	r1, [pc, #492]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070a2:	4b76      	ldr	r3, [pc, #472]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	4972      	ldr	r1, [pc, #456]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070c4:	4b6d      	ldr	r3, [pc, #436]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	496a      	ldr	r1, [pc, #424]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070e6:	4b65      	ldr	r3, [pc, #404]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f4:	4961      	ldr	r1, [pc, #388]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007108:	4b5c      	ldr	r3, [pc, #368]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007116:	4959      	ldr	r1, [pc, #356]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800712a:	4b54      	ldr	r3, [pc, #336]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800712c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007130:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007138:	4950      	ldr	r1, [pc, #320]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800714c:	4b4b      	ldr	r3, [pc, #300]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007152:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	4948      	ldr	r1, [pc, #288]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800716e:	4b43      	ldr	r3, [pc, #268]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	493f      	ldr	r1, [pc, #252]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d028      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007190:	4b3a      	ldr	r3, [pc, #232]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719e:	4937      	ldr	r1, [pc, #220]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071b0:	4b32      	ldr	r3, [pc, #200]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	4a31      	ldr	r2, [pc, #196]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ba:	60d3      	str	r3, [r2, #12]
 80071bc:	e011      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c6:	d10c      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	2101      	movs	r1, #1
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f8d8 	bl	8007384 <RCCEx_PLLSAI1_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071d8:	7cfb      	ldrb	r3, [r7, #19]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80071de:	7cfb      	ldrb	r3, [r7, #19]
 80071e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d028      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071ee:	4b23      	ldr	r3, [pc, #140]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fc:	491f      	ldr	r1, [pc, #124]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800720c:	d106      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800720e:	4b1b      	ldr	r3, [pc, #108]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	4a1a      	ldr	r2, [pc, #104]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007218:	60d3      	str	r3, [r2, #12]
 800721a:	e011      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007224:	d10c      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f8a9 	bl	8007384 <RCCEx_PLLSAI1_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007236:	7cfb      	ldrb	r3, [r7, #19]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02b      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725a:	4908      	ldr	r1, [pc, #32]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a02      	ldr	r2, [pc, #8]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007276:	60d3      	str	r3, [r2, #12]
 8007278:	e014      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	2101      	movs	r1, #1
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f877 	bl	8007384 <RCCEx_PLLSAI1_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800729a:	7cfb      	ldrb	r3, [r7, #19]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80072a0:	7cfb      	ldrb	r3, [r7, #19]
 80072a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d02f      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072b0:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072be:	4928      	ldr	r1, [pc, #160]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ce:	d10d      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2102      	movs	r1, #2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f854 	bl	8007384 <RCCEx_PLLSAI1_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072e0:	7cfb      	ldrb	r3, [r7, #19]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80072e6:	7cfb      	ldrb	r3, [r7, #19]
 80072e8:	74bb      	strb	r3, [r7, #18]
 80072ea:	e011      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f4:	d10c      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3320      	adds	r3, #32
 80072fa:	2102      	movs	r1, #2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f935 	bl	800756c <RCCEx_PLLSAI2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800730c:	7cfb      	ldrb	r3, [r7, #19]
 800730e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007322:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800732a:	490d      	ldr	r1, [pc, #52]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800733e:	4b08      	ldr	r3, [pc, #32]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734e:	4904      	ldr	r1, [pc, #16]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007356:	7cbb      	ldrb	r3, [r7, #18]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40021000 	.word	0x40021000

08007364 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a04      	ldr	r2, [pc, #16]	; (8007380 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800736e:	f043 0304 	orr.w	r3, r3, #4
 8007372:	6013      	str	r3, [r2, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000

08007384 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007392:	4b75      	ldr	r3, [pc, #468]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d018      	beq.n	80073d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800739e:	4b72      	ldr	r3, [pc, #456]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0203 	and.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d10d      	bne.n	80073ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
       ||
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80073b6:	4b6c      	ldr	r3, [pc, #432]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
       ||
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d047      	beq.n	800745a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	73fb      	strb	r3, [r7, #15]
 80073ce:	e044      	b.n	800745a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d018      	beq.n	800740a <RCCEx_PLLSAI1_Config+0x86>
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d825      	bhi.n	8007428 <RCCEx_PLLSAI1_Config+0xa4>
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d002      	beq.n	80073e6 <RCCEx_PLLSAI1_Config+0x62>
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d009      	beq.n	80073f8 <RCCEx_PLLSAI1_Config+0x74>
 80073e4:	e020      	b.n	8007428 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073e6:	4b60      	ldr	r3, [pc, #384]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11d      	bne.n	800742e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f6:	e01a      	b.n	800742e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073f8:	4b5b      	ldr	r3, [pc, #364]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007400:	2b00      	cmp	r3, #0
 8007402:	d116      	bne.n	8007432 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007408:	e013      	b.n	8007432 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800740a:	4b57      	ldr	r3, [pc, #348]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10f      	bne.n	8007436 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007416:	4b54      	ldr	r3, [pc, #336]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007426:	e006      	b.n	8007436 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e004      	b.n	8007438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007436:	bf00      	nop
    }

    if(status == HAL_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10d      	bne.n	800745a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800743e:	4b4a      	ldr	r3, [pc, #296]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6819      	ldr	r1, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	3b01      	subs	r3, #1
 8007450:	011b      	lsls	r3, r3, #4
 8007452:	430b      	orrs	r3, r1
 8007454:	4944      	ldr	r1, [pc, #272]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007456:	4313      	orrs	r3, r2
 8007458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d17d      	bne.n	800755c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007460:	4b41      	ldr	r3, [pc, #260]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a40      	ldr	r2, [pc, #256]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800746a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746c:	f7fb ff16 	bl	800329c <HAL_GetTick>
 8007470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007472:	e009      	b.n	8007488 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007474:	f7fb ff12 	bl	800329c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d902      	bls.n	8007488 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	73fb      	strb	r3, [r7, #15]
        break;
 8007486:	e005      	b.n	8007494 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007488:	4b37      	ldr	r3, [pc, #220]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1ef      	bne.n	8007474 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d160      	bne.n	800755c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074a0:	4b31      	ldr	r3, [pc, #196]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80074a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6892      	ldr	r2, [r2, #8]
 80074b0:	0211      	lsls	r1, r2, #8
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	68d2      	ldr	r2, [r2, #12]
 80074b6:	0912      	lsrs	r2, r2, #4
 80074b8:	0452      	lsls	r2, r2, #17
 80074ba:	430a      	orrs	r2, r1
 80074bc:	492a      	ldr	r1, [pc, #168]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	610b      	str	r3, [r1, #16]
 80074c2:	e027      	b.n	8007514 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d112      	bne.n	80074f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ca:	4b27      	ldr	r3, [pc, #156]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80074d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	0211      	lsls	r1, r2, #8
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6912      	ldr	r2, [r2, #16]
 80074e0:	0852      	lsrs	r2, r2, #1
 80074e2:	3a01      	subs	r2, #1
 80074e4:	0552      	lsls	r2, r2, #21
 80074e6:	430a      	orrs	r2, r1
 80074e8:	491f      	ldr	r1, [pc, #124]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	610b      	str	r3, [r1, #16]
 80074ee:	e011      	b.n	8007514 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074f0:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80074f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6892      	ldr	r2, [r2, #8]
 8007500:	0211      	lsls	r1, r2, #8
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6952      	ldr	r2, [r2, #20]
 8007506:	0852      	lsrs	r2, r2, #1
 8007508:	3a01      	subs	r2, #1
 800750a:	0652      	lsls	r2, r2, #25
 800750c:	430a      	orrs	r2, r1
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007510:	4313      	orrs	r3, r2
 8007512:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007514:	4b14      	ldr	r3, [pc, #80]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a13      	ldr	r2, [pc, #76]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800751a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800751e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007520:	f7fb febc 	bl	800329c <HAL_GetTick>
 8007524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007526:	e009      	b.n	800753c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007528:	f7fb feb8 	bl	800329c <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d902      	bls.n	800753c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
          break;
 800753a:	e005      	b.n	8007548 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0ef      	beq.n	8007528 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000

0800756c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800757a:	4b6a      	ldr	r3, [pc, #424]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007586:	4b67      	ldr	r3, [pc, #412]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0203 	and.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d10d      	bne.n	80075b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
       ||
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800759e:	4b61      	ldr	r3, [pc, #388]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
       ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d047      	beq.n	8007642 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e044      	b.n	8007642 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d018      	beq.n	80075f2 <RCCEx_PLLSAI2_Config+0x86>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d825      	bhi.n	8007610 <RCCEx_PLLSAI2_Config+0xa4>
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d002      	beq.n	80075ce <RCCEx_PLLSAI2_Config+0x62>
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d009      	beq.n	80075e0 <RCCEx_PLLSAI2_Config+0x74>
 80075cc:	e020      	b.n	8007610 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075ce:	4b55      	ldr	r3, [pc, #340]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11d      	bne.n	8007616 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075de:	e01a      	b.n	8007616 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075e0:	4b50      	ldr	r3, [pc, #320]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d116      	bne.n	800761a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075f0:	e013      	b.n	800761a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075f2:	4b4c      	ldr	r3, [pc, #304]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10f      	bne.n	800761e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075fe:	4b49      	ldr	r3, [pc, #292]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800760e:	e006      	b.n	800761e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e004      	b.n	8007620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800761e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007626:	4b3f      	ldr	r3, [pc, #252]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	3b01      	subs	r3, #1
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	430b      	orrs	r3, r1
 800763c:	4939      	ldr	r1, [pc, #228]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d167      	bne.n	8007718 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007648:	4b36      	ldr	r3, [pc, #216]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a35      	ldr	r2, [pc, #212]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007654:	f7fb fe22 	bl	800329c <HAL_GetTick>
 8007658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800765a:	e009      	b.n	8007670 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800765c:	f7fb fe1e 	bl	800329c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d902      	bls.n	8007670 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
        break;
 800766e:	e005      	b.n	800767c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007670:	4b2c      	ldr	r3, [pc, #176]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1ef      	bne.n	800765c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d14a      	bne.n	8007718 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d111      	bne.n	80076ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007688:	4b26      	ldr	r3, [pc, #152]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6892      	ldr	r2, [r2, #8]
 8007698:	0211      	lsls	r1, r2, #8
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68d2      	ldr	r2, [r2, #12]
 800769e:	0912      	lsrs	r2, r2, #4
 80076a0:	0452      	lsls	r2, r2, #17
 80076a2:	430a      	orrs	r2, r1
 80076a4:	491f      	ldr	r1, [pc, #124]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	614b      	str	r3, [r1, #20]
 80076aa:	e011      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076ac:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6892      	ldr	r2, [r2, #8]
 80076bc:	0211      	lsls	r1, r2, #8
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6912      	ldr	r2, [r2, #16]
 80076c2:	0852      	lsrs	r2, r2, #1
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0652      	lsls	r2, r2, #25
 80076c8:	430a      	orrs	r2, r1
 80076ca:	4916      	ldr	r1, [pc, #88]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80076d0:	4b14      	ldr	r3, [pc, #80]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a13      	ldr	r2, [pc, #76]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076dc:	f7fb fdde 	bl	800329c <HAL_GetTick>
 80076e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076e2:	e009      	b.n	80076f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076e4:	f7fb fdda 	bl	800329c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d902      	bls.n	80076f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	73fb      	strb	r3, [r7, #15]
          break;
 80076f6:	e005      	b.n	8007704 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0ef      	beq.n	80076e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 800770c:	695a      	ldr	r2, [r3, #20]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	4904      	ldr	r1, [pc, #16]	; (8007724 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007714:	4313      	orrs	r3, r2
 8007716:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40021000 	.word	0x40021000

08007728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e095      	b.n	8007866 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d108      	bne.n	8007754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774a:	d009      	beq.n	8007760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	61da      	str	r2, [r3, #28]
 8007752:	e005      	b.n	8007760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f877 	bl	800786e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077a0:	d902      	bls.n	80077a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e002      	b.n	80077ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80077b6:	d007      	beq.n	80077c8 <HAL_SPI_Init+0xa0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077c0:	d002      	beq.n	80077c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	ea42 0103 	orr.w	r1, r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f003 0204 	and.w	r2, r3, #4
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007844:	ea42 0103 	orr.w	r1, r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b08a      	sub	sp, #40	; 0x28
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007890:	2301      	movs	r3, #1
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x26>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e20a      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x43c>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b0:	f7fb fcf4 	bl	800329c <HAL_GetTick>
 80078b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80078c4:	887b      	ldrh	r3, [r7, #2]
 80078c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80078c8:	887b      	ldrh	r3, [r7, #2]
 80078ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078cc:	7efb      	ldrb	r3, [r7, #27]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d00e      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0x6e>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d8:	d106      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x66>
 80078e2:	7efb      	ldrb	r3, [r7, #27]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d003      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80078ee:	e1e0      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_SPI_TransmitReceive+0x80>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_SPI_TransmitReceive+0x80>
 80078fc:	887b      	ldrh	r3, [r7, #2]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007908:	e1d3      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b04      	cmp	r3, #4
 8007914:	d003      	beq.n	800791e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2205      	movs	r2, #5
 800791a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	887a      	ldrh	r2, [r7, #2]
 800792e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	887a      	ldrh	r2, [r7, #2]
 8007936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	887a      	ldrh	r2, [r7, #2]
 8007944:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	887a      	ldrh	r2, [r7, #2]
 800794a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007960:	d802      	bhi.n	8007968 <HAL_SPI_TransmitReceive+0xe6>
 8007962:	8a3b      	ldrh	r3, [r7, #16]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d908      	bls.n	800797a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	e007      	b.n	800798a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007988:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b40      	cmp	r3, #64	; 0x40
 8007996:	d007      	beq.n	80079a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079b0:	f240 8081 	bls.w	8007ab6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x140>
 80079bc:	8a7b      	ldrh	r3, [r7, #18]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d16d      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	881a      	ldrh	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	1c9a      	adds	r2, r3, #2
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e6:	e05a      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d11b      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x1ac>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x1ac>
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d113      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	881a      	ldrh	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	1c9a      	adds	r2, r3, #2
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d11c      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x1f4>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d016      	beq.n	8007a76 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	b292      	uxth	r2, r2
 8007a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	1c9a      	adds	r2, r3, #2
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a72:	2301      	movs	r3, #1
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a76:	f7fb fc11 	bl	800329c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d80b      	bhi.n	8007a9e <HAL_SPI_TransmitReceive+0x21c>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a8c:	d007      	beq.n	8007a9e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007a9c:	e109      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d19f      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x166>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d199      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x166>
 8007ab4:	e0e3      	b.n	8007c7e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x244>
 8007abe:	8a7b      	ldrh	r3, [r7, #18]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 80cf 	bne.w	8007c64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d912      	bls.n	8007af6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	1c9a      	adds	r2, r3, #2
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b02      	subs	r3, #2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007af4:	e0b6      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1c:	e0a2      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d134      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x314>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d02f      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x314>
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d12c      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d912      	bls.n	8007b6c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	881a      	ldrh	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b02      	subs	r3, #2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b6a:	e012      	b.n	8007b92 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d148      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x3b4>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d042      	beq.n	8007c36 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d923      	bls.n	8007c04 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	b292      	uxth	r2, r2
 8007bc8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	1c9a      	adds	r2, r3, #2
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	3b02      	subs	r3, #2
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d81f      	bhi.n	8007c32 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c00:	605a      	str	r2, [r3, #4]
 8007c02:	e016      	b.n	8007c32 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f103 020c 	add.w	r2, r3, #12
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c32:	2301      	movs	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c36:	f7fb fb31 	bl	800329c <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d803      	bhi.n	8007c4e <HAL_SPI_TransmitReceive+0x3cc>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4c:	d102      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x3d2>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d107      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007c62:	e026      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f47f af57 	bne.w	8007b1e <HAL_SPI_TransmitReceive+0x29c>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f af50 	bne.w	8007b1e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f94c 	bl	8007f20 <SPI_EndRxTxTransaction>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca8:	e003      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3728      	adds	r7, #40	; 0x28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd4:	b2db      	uxtb	r3, r3
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cf4:	f7fb fad2 	bl	800329c <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d04:	f7fb faca 	bl	800329c <HAL_GetTick>
 8007d08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d0a:	4b39      	ldr	r3, [pc, #228]	; (8007df0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	015b      	lsls	r3, r3, #5
 8007d10:	0d1b      	lsrs	r3, r3, #20
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d1a:	e054      	b.n	8007dc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d22:	d050      	beq.n	8007dc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d24:	f7fb faba 	bl	800329c <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d902      	bls.n	8007d3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d13d      	bne.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d52:	d111      	bne.n	8007d78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5c:	d004      	beq.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d107      	bne.n	8007d78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d10f      	bne.n	8007da2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e017      	b.n	8007de6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2301      	moveq	r3, #1
 8007dd8:	2300      	movne	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d19b      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000004 	.word	0x20000004

08007df4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e06:	f7fb fa49 	bl	800329c <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	4413      	add	r3, r2
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007e16:	f7fb fa41 	bl	800329c <HAL_GetTick>
 8007e1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e24:	4b3d      	ldr	r3, [pc, #244]	; (8007f1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	00da      	lsls	r2, r3, #3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	0d1b      	lsrs	r3, r3, #20
 8007e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e3c:	e060      	b.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e44:	d107      	bne.n	8007e56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5c:	d050      	beq.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e5e:	f7fb fa1d 	bl	800329c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d902      	bls.n	8007e74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d13d      	bne.n	8007ef0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e8c:	d111      	bne.n	8007eb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e96:	d004      	beq.n	8007ea2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea0:	d107      	bne.n	8007eb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eba:	d10f      	bne.n	8007edc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e010      	b.n	8007f12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d196      	bne.n	8007e3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3728      	adds	r7, #40	; 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000004 	.word	0x20000004

08007f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff ff5b 	bl	8007df4 <SPI_WaitFifoStateUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e027      	b.n	8007fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff fec0 	bl	8007ce4 <SPI_WaitFlagStateUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6e:	f043 0220 	orr.w	r2, r3, #32
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e014      	b.n	8007fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff ff34 	bl	8007df4 <SPI_WaitFifoStateUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f96:	f043 0220 	orr.w	r2, r3, #32
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e000      	b.n	8007fa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e040      	b.n	8008040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7f9 fef6 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	; 0x24
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fae0 	bl	80085b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f825 	bl	8008048 <UART_SetConfig>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e01b      	b.n	8008040 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fb5f 	bl	80086fc <UART_CheckIdleState>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800804c:	b08a      	sub	sp, #40	; 0x28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	431a      	orrs	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	431a      	orrs	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	4313      	orrs	r3, r2
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4ba4      	ldr	r3, [pc, #656]	; (8008308 <UART_SetConfig+0x2c0>)
 8008078:	4013      	ands	r3, r2
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008080:	430b      	orrs	r3, r1
 8008082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a99      	ldr	r2, [pc, #612]	; (800830c <UART_SetConfig+0x2c4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b0:	4313      	orrs	r3, r2
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c4:	430a      	orrs	r2, r1
 80080c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a90      	ldr	r2, [pc, #576]	; (8008310 <UART_SetConfig+0x2c8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d126      	bne.n	8008120 <UART_SetConfig+0xd8>
 80080d2:	4b90      	ldr	r3, [pc, #576]	; (8008314 <UART_SetConfig+0x2cc>)
 80080d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d81b      	bhi.n	8008118 <UART_SetConfig+0xd0>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <UART_SetConfig+0xa0>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	08008109 	.word	0x08008109
 80080f0:	08008101 	.word	0x08008101
 80080f4:	08008111 	.word	0x08008111
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080fe:	e116      	b.n	800832e <UART_SetConfig+0x2e6>
 8008100:	2302      	movs	r3, #2
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008106:	e112      	b.n	800832e <UART_SetConfig+0x2e6>
 8008108:	2304      	movs	r3, #4
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810e:	e10e      	b.n	800832e <UART_SetConfig+0x2e6>
 8008110:	2308      	movs	r3, #8
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008116:	e10a      	b.n	800832e <UART_SetConfig+0x2e6>
 8008118:	2310      	movs	r3, #16
 800811a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811e:	e106      	b.n	800832e <UART_SetConfig+0x2e6>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a7c      	ldr	r2, [pc, #496]	; (8008318 <UART_SetConfig+0x2d0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d138      	bne.n	800819c <UART_SetConfig+0x154>
 800812a:	4b7a      	ldr	r3, [pc, #488]	; (8008314 <UART_SetConfig+0x2cc>)
 800812c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008130:	f003 030c 	and.w	r3, r3, #12
 8008134:	2b0c      	cmp	r3, #12
 8008136:	d82d      	bhi.n	8008194 <UART_SetConfig+0x14c>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0xf8>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008175 	.word	0x08008175
 8008144:	08008195 	.word	0x08008195
 8008148:	08008195 	.word	0x08008195
 800814c:	08008195 	.word	0x08008195
 8008150:	08008185 	.word	0x08008185
 8008154:	08008195 	.word	0x08008195
 8008158:	08008195 	.word	0x08008195
 800815c:	08008195 	.word	0x08008195
 8008160:	0800817d 	.word	0x0800817d
 8008164:	08008195 	.word	0x08008195
 8008168:	08008195 	.word	0x08008195
 800816c:	08008195 	.word	0x08008195
 8008170:	0800818d 	.word	0x0800818d
 8008174:	2300      	movs	r3, #0
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817a:	e0d8      	b.n	800832e <UART_SetConfig+0x2e6>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008182:	e0d4      	b.n	800832e <UART_SetConfig+0x2e6>
 8008184:	2304      	movs	r3, #4
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818a:	e0d0      	b.n	800832e <UART_SetConfig+0x2e6>
 800818c:	2308      	movs	r3, #8
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008192:	e0cc      	b.n	800832e <UART_SetConfig+0x2e6>
 8008194:	2310      	movs	r3, #16
 8008196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819a:	e0c8      	b.n	800832e <UART_SetConfig+0x2e6>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a5e      	ldr	r2, [pc, #376]	; (800831c <UART_SetConfig+0x2d4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d125      	bne.n	80081f2 <UART_SetConfig+0x1aa>
 80081a6:	4b5b      	ldr	r3, [pc, #364]	; (8008314 <UART_SetConfig+0x2cc>)
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081b0:	2b30      	cmp	r3, #48	; 0x30
 80081b2:	d016      	beq.n	80081e2 <UART_SetConfig+0x19a>
 80081b4:	2b30      	cmp	r3, #48	; 0x30
 80081b6:	d818      	bhi.n	80081ea <UART_SetConfig+0x1a2>
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d00a      	beq.n	80081d2 <UART_SetConfig+0x18a>
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d814      	bhi.n	80081ea <UART_SetConfig+0x1a2>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <UART_SetConfig+0x182>
 80081c4:	2b10      	cmp	r3, #16
 80081c6:	d008      	beq.n	80081da <UART_SetConfig+0x192>
 80081c8:	e00f      	b.n	80081ea <UART_SetConfig+0x1a2>
 80081ca:	2300      	movs	r3, #0
 80081cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081d0:	e0ad      	b.n	800832e <UART_SetConfig+0x2e6>
 80081d2:	2302      	movs	r3, #2
 80081d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081d8:	e0a9      	b.n	800832e <UART_SetConfig+0x2e6>
 80081da:	2304      	movs	r3, #4
 80081dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081e0:	e0a5      	b.n	800832e <UART_SetConfig+0x2e6>
 80081e2:	2308      	movs	r3, #8
 80081e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081e8:	e0a1      	b.n	800832e <UART_SetConfig+0x2e6>
 80081ea:	2310      	movs	r3, #16
 80081ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f0:	e09d      	b.n	800832e <UART_SetConfig+0x2e6>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a4a      	ldr	r2, [pc, #296]	; (8008320 <UART_SetConfig+0x2d8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d125      	bne.n	8008248 <UART_SetConfig+0x200>
 80081fc:	4b45      	ldr	r3, [pc, #276]	; (8008314 <UART_SetConfig+0x2cc>)
 80081fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008206:	2bc0      	cmp	r3, #192	; 0xc0
 8008208:	d016      	beq.n	8008238 <UART_SetConfig+0x1f0>
 800820a:	2bc0      	cmp	r3, #192	; 0xc0
 800820c:	d818      	bhi.n	8008240 <UART_SetConfig+0x1f8>
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d00a      	beq.n	8008228 <UART_SetConfig+0x1e0>
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d814      	bhi.n	8008240 <UART_SetConfig+0x1f8>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <UART_SetConfig+0x1d8>
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d008      	beq.n	8008230 <UART_SetConfig+0x1e8>
 800821e:	e00f      	b.n	8008240 <UART_SetConfig+0x1f8>
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008226:	e082      	b.n	800832e <UART_SetConfig+0x2e6>
 8008228:	2302      	movs	r3, #2
 800822a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800822e:	e07e      	b.n	800832e <UART_SetConfig+0x2e6>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008236:	e07a      	b.n	800832e <UART_SetConfig+0x2e6>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800823e:	e076      	b.n	800832e <UART_SetConfig+0x2e6>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008246:	e072      	b.n	800832e <UART_SetConfig+0x2e6>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a35      	ldr	r2, [pc, #212]	; (8008324 <UART_SetConfig+0x2dc>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d12a      	bne.n	80082a8 <UART_SetConfig+0x260>
 8008252:	4b30      	ldr	r3, [pc, #192]	; (8008314 <UART_SetConfig+0x2cc>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008260:	d01a      	beq.n	8008298 <UART_SetConfig+0x250>
 8008262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008266:	d81b      	bhi.n	80082a0 <UART_SetConfig+0x258>
 8008268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826c:	d00c      	beq.n	8008288 <UART_SetConfig+0x240>
 800826e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008272:	d815      	bhi.n	80082a0 <UART_SetConfig+0x258>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <UART_SetConfig+0x238>
 8008278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827c:	d008      	beq.n	8008290 <UART_SetConfig+0x248>
 800827e:	e00f      	b.n	80082a0 <UART_SetConfig+0x258>
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008286:	e052      	b.n	800832e <UART_SetConfig+0x2e6>
 8008288:	2302      	movs	r3, #2
 800828a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800828e:	e04e      	b.n	800832e <UART_SetConfig+0x2e6>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008296:	e04a      	b.n	800832e <UART_SetConfig+0x2e6>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800829e:	e046      	b.n	800832e <UART_SetConfig+0x2e6>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082a6:	e042      	b.n	800832e <UART_SetConfig+0x2e6>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a17      	ldr	r2, [pc, #92]	; (800830c <UART_SetConfig+0x2c4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d13a      	bne.n	8008328 <UART_SetConfig+0x2e0>
 80082b2:	4b18      	ldr	r3, [pc, #96]	; (8008314 <UART_SetConfig+0x2cc>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082c0:	d01a      	beq.n	80082f8 <UART_SetConfig+0x2b0>
 80082c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082c6:	d81b      	bhi.n	8008300 <UART_SetConfig+0x2b8>
 80082c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082cc:	d00c      	beq.n	80082e8 <UART_SetConfig+0x2a0>
 80082ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d2:	d815      	bhi.n	8008300 <UART_SetConfig+0x2b8>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <UART_SetConfig+0x298>
 80082d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082dc:	d008      	beq.n	80082f0 <UART_SetConfig+0x2a8>
 80082de:	e00f      	b.n	8008300 <UART_SetConfig+0x2b8>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e6:	e022      	b.n	800832e <UART_SetConfig+0x2e6>
 80082e8:	2302      	movs	r3, #2
 80082ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ee:	e01e      	b.n	800832e <UART_SetConfig+0x2e6>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082f6:	e01a      	b.n	800832e <UART_SetConfig+0x2e6>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082fe:	e016      	b.n	800832e <UART_SetConfig+0x2e6>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008306:	e012      	b.n	800832e <UART_SetConfig+0x2e6>
 8008308:	efff69f3 	.word	0xefff69f3
 800830c:	40008000 	.word	0x40008000
 8008310:	40013800 	.word	0x40013800
 8008314:	40021000 	.word	0x40021000
 8008318:	40004400 	.word	0x40004400
 800831c:	40004800 	.word	0x40004800
 8008320:	40004c00 	.word	0x40004c00
 8008324:	40005000 	.word	0x40005000
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a9f      	ldr	r2, [pc, #636]	; (80085b0 <UART_SetConfig+0x568>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d17a      	bne.n	800842e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800833c:	2b08      	cmp	r3, #8
 800833e:	d824      	bhi.n	800838a <UART_SetConfig+0x342>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <UART_SetConfig+0x300>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	0800836d 	.word	0x0800836d
 800834c:	0800838b 	.word	0x0800838b
 8008350:	08008375 	.word	0x08008375
 8008354:	0800838b 	.word	0x0800838b
 8008358:	0800837b 	.word	0x0800837b
 800835c:	0800838b 	.word	0x0800838b
 8008360:	0800838b 	.word	0x0800838b
 8008364:	0800838b 	.word	0x0800838b
 8008368:	08008383 	.word	0x08008383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800836c:	f7fe fc84 	bl	8006c78 <HAL_RCC_GetPCLK1Freq>
 8008370:	61f8      	str	r0, [r7, #28]
        break;
 8008372:	e010      	b.n	8008396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008374:	4b8f      	ldr	r3, [pc, #572]	; (80085b4 <UART_SetConfig+0x56c>)
 8008376:	61fb      	str	r3, [r7, #28]
        break;
 8008378:	e00d      	b.n	8008396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837a:	f7fe fbe5 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 800837e:	61f8      	str	r0, [r7, #28]
        break;
 8008380:	e009      	b.n	8008396 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008386:	61fb      	str	r3, [r7, #28]
        break;
 8008388:	e005      	b.n	8008396 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80fb 	beq.w	8008594 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4413      	add	r3, r2
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d305      	bcc.n	80083ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d903      	bls.n	80083c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083c0:	e0e8      	b.n	8008594 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	2200      	movs	r2, #0
 80083c6:	461c      	mov	r4, r3
 80083c8:	4615      	mov	r5, r2
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	022b      	lsls	r3, r5, #8
 80083d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80083d8:	0222      	lsls	r2, r4, #8
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	6849      	ldr	r1, [r1, #4]
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	2000      	movs	r0, #0
 80083e2:	4688      	mov	r8, r1
 80083e4:	4681      	mov	r9, r0
 80083e6:	eb12 0a08 	adds.w	sl, r2, r8
 80083ea:	eb43 0b09 	adc.w	fp, r3, r9
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fc:	4650      	mov	r0, sl
 80083fe:	4659      	mov	r1, fp
 8008400:	f7f7 feea 	bl	80001d8 <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4613      	mov	r3, r2
 800840a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008412:	d308      	bcc.n	8008426 <UART_SetConfig+0x3de>
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841a:	d204      	bcs.n	8008426 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	e0b6      	b.n	8008594 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800842c:	e0b2      	b.n	8008594 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008436:	d15e      	bne.n	80084f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800843c:	2b08      	cmp	r3, #8
 800843e:	d828      	bhi.n	8008492 <UART_SetConfig+0x44a>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x400>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	08008493 	.word	0x08008493
 8008458:	08008483 	.word	0x08008483
 800845c:	08008493 	.word	0x08008493
 8008460:	08008493 	.word	0x08008493
 8008464:	08008493 	.word	0x08008493
 8008468:	0800848b 	.word	0x0800848b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fe fc04 	bl	8006c78 <HAL_RCC_GetPCLK1Freq>
 8008470:	61f8      	str	r0, [r7, #28]
        break;
 8008472:	e014      	b.n	800849e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008474:	f7fe fc16 	bl	8006ca4 <HAL_RCC_GetPCLK2Freq>
 8008478:	61f8      	str	r0, [r7, #28]
        break;
 800847a:	e010      	b.n	800849e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800847c:	4b4d      	ldr	r3, [pc, #308]	; (80085b4 <UART_SetConfig+0x56c>)
 800847e:	61fb      	str	r3, [r7, #28]
        break;
 8008480:	e00d      	b.n	800849e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008482:	f7fe fb61 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 8008486:	61f8      	str	r0, [r7, #28]
        break;
 8008488:	e009      	b.n	800849e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848e:	61fb      	str	r3, [r7, #28]
        break;
 8008490:	e005      	b.n	800849e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800849c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d077      	beq.n	8008594 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	005a      	lsls	r2, r3, #1
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	085b      	lsrs	r3, r3, #1
 80084ae:	441a      	add	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b0f      	cmp	r3, #15
 80084be:	d916      	bls.n	80084ee <UART_SetConfig+0x4a6>
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c6:	d212      	bcs.n	80084ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f023 030f 	bic.w	r3, r3, #15
 80084d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	b29a      	uxth	r2, r3
 80084de:	8afb      	ldrh	r3, [r7, #22]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	8afa      	ldrh	r2, [r7, #22]
 80084ea:	60da      	str	r2, [r3, #12]
 80084ec:	e052      	b.n	8008594 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084f4:	e04e      	b.n	8008594 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	d827      	bhi.n	800854e <UART_SetConfig+0x506>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x4bc>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008529 	.word	0x08008529
 8008508:	08008531 	.word	0x08008531
 800850c:	08008539 	.word	0x08008539
 8008510:	0800854f 	.word	0x0800854f
 8008514:	0800853f 	.word	0x0800853f
 8008518:	0800854f 	.word	0x0800854f
 800851c:	0800854f 	.word	0x0800854f
 8008520:	0800854f 	.word	0x0800854f
 8008524:	08008547 	.word	0x08008547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008528:	f7fe fba6 	bl	8006c78 <HAL_RCC_GetPCLK1Freq>
 800852c:	61f8      	str	r0, [r7, #28]
        break;
 800852e:	e014      	b.n	800855a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008530:	f7fe fbb8 	bl	8006ca4 <HAL_RCC_GetPCLK2Freq>
 8008534:	61f8      	str	r0, [r7, #28]
        break;
 8008536:	e010      	b.n	800855a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <UART_SetConfig+0x56c>)
 800853a:	61fb      	str	r3, [r7, #28]
        break;
 800853c:	e00d      	b.n	800855a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800853e:	f7fe fb03 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 8008542:	61f8      	str	r0, [r7, #28]
        break;
 8008544:	e009      	b.n	800855a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800854a:	61fb      	str	r3, [r7, #28]
        break;
 800854c:	e005      	b.n	800855a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008558:	bf00      	nop
    }

    if (pclk != 0U)
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	085a      	lsrs	r2, r3, #1
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	441a      	add	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d909      	bls.n	800858e <UART_SetConfig+0x546>
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008580:	d205      	bcs.n	800858e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60da      	str	r2, [r3, #12]
 800858c:	e002      	b.n	8008594 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80085a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ae:	bf00      	nop
 80085b0:	40008000 	.word	0x40008000
 80085b4:	00f42400 	.word	0x00f42400

080085b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01a      	beq.n	80086ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b6:	d10a      	bne.n	80086ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b098      	sub	sp, #96	; 0x60
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800870c:	f7fa fdc6 	bl	800329c <HAL_GetTick>
 8008710:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b08      	cmp	r3, #8
 800871e:	d12e      	bne.n	800877e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f88c 	bl	800884c <UART_WaitOnFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d021      	beq.n	800877e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874e:	653b      	str	r3, [r7, #80]	; 0x50
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008758:	647b      	str	r3, [r7, #68]	; 0x44
 800875a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800875e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e062      	b.n	8008844 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b04      	cmp	r3, #4
 800878a:	d149      	bne.n	8008820 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008794:	2200      	movs	r2, #0
 8008796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f856 	bl	800884c <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d03c      	beq.n	8008820 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	623b      	str	r3, [r7, #32]
   return(result);
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c4:	633b      	str	r3, [r7, #48]	; 0x30
 80087c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f8:	61fa      	str	r2, [r7, #28]
 80087fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e011      	b.n	8008844 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3758      	adds	r7, #88	; 0x58
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4613      	mov	r3, r2
 800885a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885c:	e049      	b.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008864:	d045      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008866:	f7fa fd19 	bl	800329c <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	429a      	cmp	r2, r3
 8008874:	d302      	bcc.n	800887c <UART_WaitOnFlagUntilTimeout+0x30>
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e048      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d031      	beq.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b08      	cmp	r3, #8
 800889a:	d110      	bne.n	80088be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2208      	movs	r2, #8
 80088a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f838 	bl	800891a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2208      	movs	r2, #8
 80088ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e029      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d111      	bne.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f81e 	bl	800891a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e00f      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4013      	ands	r3, r2
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	bf0c      	ite	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	2300      	movne	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	429a      	cmp	r2, r3
 800890e:	d0a6      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800891a:	b480      	push	{r7}
 800891c:	b095      	sub	sp, #84	; 0x54
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008940:	643b      	str	r3, [r7, #64]	; 0x40
 8008942:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	61fb      	str	r3, [r7, #28]
   return(result);
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	64bb      	str	r3, [r7, #72]	; 0x48
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800897a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e5      	bne.n	8008954 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898c:	2b01      	cmp	r3, #1
 800898e:	d118      	bne.n	80089c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	60bb      	str	r3, [r7, #8]
   return(result);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f023 0310 	bic.w	r3, r3, #16
 80089a4:	647b      	str	r3, [r7, #68]	; 0x44
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6979      	ldr	r1, [r7, #20]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	613b      	str	r3, [r7, #16]
   return(result);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e6      	bne.n	8008990 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089d6:	bf00      	nop
 80089d8:	3754      	adds	r7, #84	; 0x54
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b08c      	sub	sp, #48	; 0x30
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
 80089ee:	460b      	mov	r3, r1
 80089f0:	71bb      	strb	r3, [r7, #6]
 80089f2:	4613      	mov	r3, r2
 80089f4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80089fa:	79bb      	ldrb	r3, [r7, #6]
 80089fc:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80089fe:	797b      	ldrb	r3, [r7, #5]
 8008a00:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a02:	f107 030c 	add.w	r3, r7, #12
 8008a06:	2207      	movs	r2, #7
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 f963 	bl	8009cd6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a10:	f107 0318 	add.w	r3, r7, #24
 8008a14:	2218      	movs	r2, #24
 8008a16:	2100      	movs	r1, #0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 f95c 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a1e:	233f      	movs	r3, #63	; 0x3f
 8008a20:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008a22:	238a      	movs	r3, #138	; 0x8a
 8008a24:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008a26:	f107 0314 	add.w	r3, r7, #20
 8008a2a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008a36:	2307      	movs	r3, #7
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fea1 	bl	8009788 <hci_send_req>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da01      	bge.n	8008a50 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008a4c:	23ff      	movs	r3, #255	; 0xff
 8008a4e:	e014      	b.n	8008a7a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008a50:	7b3b      	ldrb	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008a56:	7b3b      	ldrb	r3, [r7, #12]
 8008a58:	e00f      	b.n	8008a7a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008a5a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008a64:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008a6e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a76:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3730      	adds	r7, #48	; 0x30
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b08e      	sub	sp, #56	; 0x38
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a96:	f107 0314 	add.w	r3, r7, #20
 8008a9a:	2207      	movs	r2, #7
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 f919 	bl	8009cd6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008aa4:	f107 0320 	add.w	r3, r7, #32
 8008aa8:	2218      	movs	r2, #24
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f912 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008ab2:	233f      	movs	r3, #63	; 0x3f
 8008ab4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8008ab6:	238a      	movs	r3, #138	; 0x8a
 8008ab8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8008aba:	f107 031c 	add.w	r3, r7, #28
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8008aca:	2307      	movs	r3, #7
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ace:	f107 0320 	add.w	r3, r7, #32
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fe57 	bl	8009788 <hci_send_req>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	da01      	bge.n	8008ae4 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008ae0:	23ff      	movs	r3, #255	; 0xff
 8008ae2:	e014      	b.n	8008b0e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008ae4:	7d3b      	ldrb	r3, [r7, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8008aea:	7d3b      	ldrb	r3, [r7, #20]
 8008aec:	e00f      	b.n	8008b0e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008aee:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008af8:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008b02:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3738      	adds	r7, #56	; 0x38
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008b16:	b590      	push	{r4, r7, lr}
 8008b18:	b095      	sub	sp, #84	; 0x54
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	461a      	mov	r2, r3
 8008b24:	4623      	mov	r3, r4
 8008b26:	71fb      	strb	r3, [r7, #7]
 8008b28:	4603      	mov	r3, r0
 8008b2a:	80bb      	strh	r3, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	807b      	strh	r3, [r7, #2]
 8008b30:	4613      	mov	r3, r2
 8008b32:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8008b3a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008b3e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008b42:	4413      	add	r3, r2
 8008b44:	330e      	adds	r3, #14
 8008b46:	2b28      	cmp	r3, #40	; 0x28
 8008b48:	d901      	bls.n	8008b4e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8008b4a:	2342      	movs	r3, #66	; 0x42
 8008b4c:	e0c9      	b.n	8008ce2 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8008b4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b52:	3350      	adds	r3, #80	; 0x50
 8008b54:	443b      	add	r3, r7
 8008b56:	79fa      	ldrb	r2, [r7, #7]
 8008b58:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008b5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b60:	3301      	adds	r3, #1
 8008b62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008b66:	88bb      	ldrh	r3, [r7, #4]
 8008b68:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008b6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b6e:	f107 0208 	add.w	r2, r7, #8
 8008b72:	4413      	add	r3, r2
 8008b74:	88ba      	ldrh	r2, [r7, #4]
 8008b76:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008b82:	887b      	ldrh	r3, [r7, #2]
 8008b84:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008b86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	4413      	add	r3, r2
 8008b90:	887a      	ldrh	r2, [r7, #2]
 8008b92:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008b94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b98:	3302      	adds	r3, #2
 8008b9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8008b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ba2:	3350      	adds	r3, #80	; 0x50
 8008ba4:	443b      	add	r3, r7
 8008ba6:	79ba      	ldrb	r2, [r7, #6]
 8008ba8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008bac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008bb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bba:	3350      	adds	r3, #80	; 0x50
 8008bbc:	443b      	add	r3, r7
 8008bbe:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008bc2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008bc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8008bd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bd4:	3350      	adds	r3, #80	; 0x50
 8008bd6:	443b      	add	r3, r7
 8008bd8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008bdc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008be4:	3301      	adds	r3, #1
 8008be6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008bea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bee:	f107 0208 	add.w	r2, r7, #8
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008bf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f001 f898 	bl	8009d30 <memcpy>
  indx +=  LocalNameLen;
 8008c00:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008c04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008c08:	4413      	add	r3, r2
 8008c0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8008c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c12:	3350      	adds	r3, #80	; 0x50
 8008c14:	443b      	add	r3, r7
 8008c16:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008c1a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c22:	3301      	adds	r3, #1
 8008c24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008c28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c2c:	f107 0208 	add.w	r2, r7, #8
 8008c30:	4413      	add	r3, r2
 8008c32:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008c36:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 f879 	bl	8009d30 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008c3e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008c42:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008c46:	4413      	add	r3, r2
 8008c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008c4c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008c50:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008c54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c58:	f107 0208 	add.w	r2, r7, #8
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8008c62:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008c64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c68:	3302      	adds	r3, #2
 8008c6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008c6e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008c72:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008c76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c7a:	f107 0208 	add.w	r2, r7, #8
 8008c7e:	4413      	add	r3, r2
 8008c80:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8008c84:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008c86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c94:	2218      	movs	r2, #24
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f81c 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c9e:	233f      	movs	r3, #63	; 0x3f
 8008ca0:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008ca2:	2383      	movs	r3, #131	; 0x83
 8008ca4:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8008cac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cb0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8008cb2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8008cb6:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008cbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fd60 	bl	8009788 <hci_send_req>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da01      	bge.n	8008cd2 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8008cce:	23ff      	movs	r3, #255	; 0xff
 8008cd0:	e007      	b.n	8008ce2 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8008cd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <aci_gap_set_discoverable+0x1ca>
    return status;
 8008cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cde:	e000      	b.n	8008ce2 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3754      	adds	r7, #84	; 0x54
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}

08008cea <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008cea:	b590      	push	{r4, r7, lr}
 8008cec:	b091      	sub	sp, #68	; 0x44
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	603a      	str	r2, [r7, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	71fb      	strb	r3, [r7, #7]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	71bb      	strb	r3, [r7, #6]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008d04:	79bb      	ldrb	r3, [r7, #6]
 8008d06:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008d08:	79bb      	ldrb	r3, [r7, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	f107 030e 	add.w	r3, r7, #14
 8008d14:	6814      	ldr	r4, [r2, #0]
 8008d16:	6850      	ldr	r0, [r2, #4]
 8008d18:	6891      	ldr	r1, [r2, #8]
 8008d1a:	68d2      	ldr	r2, [r2, #12]
 8008d1c:	601c      	str	r4, [r3, #0]
 8008d1e:	6058      	str	r0, [r3, #4]
 8008d20:	6099      	str	r1, [r3, #8]
 8008d22:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008d24:	797b      	ldrb	r3, [r7, #5]
 8008d26:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008d28:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008d2c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008d2e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008d32:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d38:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8008d3c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d48:	2218      	movs	r2, #24
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 ffc2 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008d52:	233f      	movs	r3, #63	; 0x3f
 8008d54:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008d56:	2386      	movs	r3, #134	; 0x86
 8008d58:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8008d60:	231a      	movs	r3, #26
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8008d64:	f107 030b 	add.w	r3, r7, #11
 8008d68:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d72:	2100      	movs	r1, #0
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fd07 	bl	8009788 <hci_send_req>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da01      	bge.n	8008d84 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008d80:	23ff      	movs	r3, #255	; 0xff
 8008d82:	e005      	b.n	8008d90 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	e000      	b.n	8008d90 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3744      	adds	r7, #68	; 0x44
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd90      	pop	{r4, r7, pc}

08008d98 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b092      	sub	sp, #72	; 0x48
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6039      	str	r1, [r7, #0]
 8008da2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b1f      	cmp	r3, #31
 8008dae:	d901      	bls.n	8008db4 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008db0:	2342      	movs	r3, #66	; 0x42
 8008db2:	e03e      	b.n	8008e32 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008db8:	3348      	adds	r3, #72	; 0x48
 8008dba:	443b      	add	r3, r7
 8008dbc:	79fa      	ldrb	r2, [r7, #7]
 8008dbe:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4413      	add	r3, r2
 8008dd6:	79fa      	ldrb	r2, [r7, #7]
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 ffa8 	bl	8009d30 <memcpy>
  indx +=  AdvLen;
 8008de0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	4413      	add	r3, r2
 8008de8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008df0:	2218      	movs	r2, #24
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 ff6e 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008dfa:	233f      	movs	r3, #63	; 0x3f
 8008dfc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008dfe:	238e      	movs	r3, #142	; 0x8e
 8008e00:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8008e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8008e0e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8008e14:	2301      	movs	r3, #1
 8008e16:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fcb2 	bl	8009788 <hci_send_req>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da01      	bge.n	8008e2e <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8008e2a:	23ff      	movs	r3, #255	; 0xff
 8008e2c:	e001      	b.n	8008e32 <aci_gap_update_adv_data+0x9a>
    
  return status;
 8008e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3748      	adds	r7, #72	; 0x48
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b088      	sub	sp, #32
 8008e3e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	2218      	movs	r2, #24
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 ff44 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e4e:	233f      	movs	r3, #63	; 0x3f
 8008e50:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008e52:	f240 1301 	movw	r3, #257	; 0x101
 8008e56:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e58:	1dfb      	adds	r3, r7, #7
 8008e5a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008e60:	f107 0308 	add.w	r3, r7, #8
 8008e64:	2100      	movs	r1, #0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fc8e 	bl	8009788 <hci_send_req>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da01      	bge.n	8008e76 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008e72:	23ff      	movs	r3, #255	; 0xff
 8008e74:	e000      	b.n	8008e78 <aci_gatt_init+0x3e>

  return status;
 8008e76:	79fb      	ldrb	r3, [r7, #7]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b090      	sub	sp, #64	; 0x40
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6039      	str	r1, [r7, #0]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	71fb      	strb	r3, [r7, #7]
 8008e90:	460b      	mov	r3, r1
 8008e92:	71bb      	strb	r3, [r7, #6]
 8008e94:	4613      	mov	r3, r2
 8008e96:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8008e9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ea2:	3340      	adds	r3, #64	; 0x40
 8008ea4:	443b      	add	r3, r7
 8008ea6:	79fa      	ldrb	r2, [r7, #7]
 8008ea8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008eac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d103      	bne.n	8008ec4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ec2:	e002      	b.n	8008eca <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008eca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ece:	f107 020c 	add.w	r2, r7, #12
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 ff28 	bl	8009d30 <memcpy>
  indx +=  uuid_len;
 8008ee0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ee8:	4413      	add	r3, r2
 8008eea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8008eee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ef2:	3340      	adds	r3, #64	; 0x40
 8008ef4:	443b      	add	r3, r7
 8008ef6:	79ba      	ldrb	r2, [r7, #6]
 8008ef8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008efc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f00:	3301      	adds	r3, #1
 8008f02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8008f06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f0a:	3340      	adds	r3, #64	; 0x40
 8008f0c:	443b      	add	r3, r7
 8008f0e:	797a      	ldrb	r2, [r7, #5]
 8008f10:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008f14:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008f1e:	f107 0320 	add.w	r3, r7, #32
 8008f22:	2203      	movs	r2, #3
 8008f24:	2100      	movs	r1, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fed5 	bl	8009cd6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f30:	2218      	movs	r2, #24
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fece 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f3a:	233f      	movs	r3, #63	; 0x3f
 8008f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008f3e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008f42:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8008f44:	f107 030c 	add.w	r3, r7, #12
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8008f4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f4e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8008f50:	f107 0320 	add.w	r3, r7, #32
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008f56:	2303      	movs	r3, #3
 8008f58:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fc11 	bl	8009788 <hci_send_req>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da01      	bge.n	8008f70 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008f6c:	23ff      	movs	r3, #255	; 0xff
 8008f6e:	e00c      	b.n	8008f8a <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008f78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f7c:	e005      	b.n	8008f8a <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008f7e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f86:	801a      	strh	r2, [r3, #0]

  return 0;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3740      	adds	r7, #64	; 0x40
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b092      	sub	sp, #72	; 0x48
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	603a      	str	r2, [r7, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	80fb      	strh	r3, [r7, #6]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	717b      	strb	r3, [r7, #5]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008fb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fb6:	f107 020c 	add.w	r2, r7, #12
 8008fba:	4413      	add	r3, r2
 8008fbc:	88fa      	ldrh	r2, [r7, #6]
 8008fbe:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008fc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8008fca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fce:	3348      	adds	r3, #72	; 0x48
 8008fd0:	443b      	add	r3, r7
 8008fd2:	797a      	ldrb	r2, [r7, #5]
 8008fd4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008fd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008fdc:	3301      	adds	r3, #1
 8008fde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008fe2:	797b      	ldrb	r3, [r7, #5]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d103      	bne.n	8008ff0 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fee:	e002      	b.n	8008ff6 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008ff0:	2310      	movs	r3, #16
 8008ff2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008ff6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ffa:	f107 020c 	add.w	r2, r7, #12
 8008ffe:	4413      	add	r3, r2
 8009000:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fe92 	bl	8009d30 <memcpy>
  indx +=  uuid_len;
 800900c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8009010:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009014:	4413      	add	r3, r2
 8009016:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800901a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800901e:	3348      	adds	r3, #72	; 0x48
 8009020:	443b      	add	r3, r7
 8009022:	793a      	ldrb	r2, [r7, #4]
 8009024:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009028:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800902c:	3301      	adds	r3, #1
 800902e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8009032:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009036:	3348      	adds	r3, #72	; 0x48
 8009038:	443b      	add	r3, r7
 800903a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800903e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009042:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009046:	3301      	adds	r3, #1
 8009048:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800904c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009050:	3348      	adds	r3, #72	; 0x48
 8009052:	443b      	add	r3, r7
 8009054:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8009058:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800905c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009060:	3301      	adds	r3, #1
 8009062:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8009066:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800906a:	3348      	adds	r3, #72	; 0x48
 800906c:	443b      	add	r3, r7
 800906e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8009072:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009076:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800907a:	3301      	adds	r3, #1
 800907c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8009080:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009084:	3348      	adds	r3, #72	; 0x48
 8009086:	443b      	add	r3, r7
 8009088:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800908c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009090:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009094:	3301      	adds	r3, #1
 8009096:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800909a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800909e:	3348      	adds	r3, #72	; 0x48
 80090a0:	443b      	add	r3, r7
 80090a2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80090a6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80090aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090ae:	3301      	adds	r3, #1
 80090b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80090b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090b8:	2203      	movs	r2, #3
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fe0a 	bl	8009cd6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80090c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090c6:	2218      	movs	r2, #24
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fe03 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80090d0:	233f      	movs	r3, #63	; 0x3f
 80090d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80090d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80090d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80090e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090e4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80090e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80090ec:	2303      	movs	r3, #3
 80090ee:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80090f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fb46 	bl	8009788 <hci_send_req>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da01      	bge.n	8009106 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009102:	23ff      	movs	r3, #255	; 0xff
 8009104:	e00c      	b.n	8009120 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <aci_gatt_add_char+0x182>
    return resp.status;
 800910e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009112:	e005      	b.n	8009120 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009114:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8009118:	b29a      	uxth	r2, r3
 800911a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800911c:	801a      	strh	r2, [r3, #0]

  return 0;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3748      	adds	r7, #72	; 0x48
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b0ab      	sub	sp, #172	; 0xac
 800912c:	af00      	add	r7, sp, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	4623      	mov	r3, r4
 8009138:	80fb      	strh	r3, [r7, #6]
 800913a:	4603      	mov	r3, r0
 800913c:	80bb      	strh	r3, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
 8009142:	4613      	mov	r3, r2
 8009144:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800914c:	78bb      	ldrb	r3, [r7, #2]
 800914e:	2b7a      	cmp	r3, #122	; 0x7a
 8009150:	d901      	bls.n	8009156 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009152:	2342      	movs	r3, #66	; 0x42
 8009154:	e074      	b.n	8009240 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800915a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800915e:	f107 0208 	add.w	r2, r7, #8
 8009162:	4413      	add	r3, r2
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009168:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800916c:	3302      	adds	r3, #2
 800916e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8009172:	88bb      	ldrh	r3, [r7, #4]
 8009174:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009176:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	4413      	add	r3, r2
 8009180:	88ba      	ldrh	r2, [r7, #4]
 8009182:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009184:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009188:	3302      	adds	r3, #2
 800918a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800918e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009192:	33a8      	adds	r3, #168	; 0xa8
 8009194:	443b      	add	r3, r7
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800919c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80091a0:	3301      	adds	r3, #1
 80091a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80091a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80091aa:	33a8      	adds	r3, #168	; 0xa8
 80091ac:	443b      	add	r3, r7
 80091ae:	78ba      	ldrb	r2, [r7, #2]
 80091b0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80091b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80091b8:	3301      	adds	r3, #1
 80091ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80091be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80091c2:	f107 0208 	add.w	r2, r7, #8
 80091c6:	4413      	add	r3, r2
 80091c8:	78ba      	ldrb	r2, [r7, #2]
 80091ca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fdae 	bl	8009d30 <memcpy>
  indx +=  charValueLen;
 80091d4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80091d8:	78bb      	ldrb	r3, [r7, #2]
 80091da:	4413      	add	r3, r2
 80091dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80091e4:	2218      	movs	r2, #24
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fd74 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80091ee:	233f      	movs	r3, #63	; 0x3f
 80091f0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80091f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80091f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8009204:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800920c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8009210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8009214:	2301      	movs	r3, #1
 8009216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800921a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800921e:	2100      	movs	r1, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fab1 	bl	8009788 <hci_send_req>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	da01      	bge.n	8009230 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800922c:	23ff      	movs	r3, #255	; 0xff
 800922e:	e007      	b.n	8009240 <aci_gatt_update_char_value+0x118>

  if (status) {
 8009230:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <aci_gatt_update_char_value+0x116>
    return status;
 8009238:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800923c:	e000      	b.n	8009240 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	37ac      	adds	r7, #172	; 0xac
 8009244:	46bd      	mov	sp, r7
 8009246:	bd90      	pop	{r4, r7, pc}

08009248 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	2218      	movs	r2, #24
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fd39 	bl	8009cd6 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009264:	233f      	movs	r3, #63	; 0x3f
 8009266:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009268:	f240 1327 	movw	r3, #295	; 0x127
 800926c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009274:	2302      	movs	r3, #2
 8009276:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009278:	f107 030b 	add.w	r3, r7, #11
 800927c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800927e:	2301      	movs	r3, #1
 8009280:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009282:	f107 0310 	add.w	r3, r7, #16
 8009286:	2100      	movs	r1, #0
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fa7d 	bl	8009788 <hci_send_req>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	da01      	bge.n	8009298 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	e000      	b.n	800929a <aci_gatt_allow_read+0x52>

    return status;
 8009298:	7afb      	ldrb	r3, [r7, #11]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3728      	adds	r7, #40	; 0x28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b0ac      	sub	sp, #176	; 0xb0
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60ba      	str	r2, [r7, #8]
 80092aa:	607b      	str	r3, [r7, #4]
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	460b      	mov	r3, r1
 80092b2:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80092be:	2218      	movs	r2, #24
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fd07 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80092c8:	233f      	movs	r3, #63	; 0x3f
 80092ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 80092ce:	230d      	movs	r3, #13
 80092d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 80092d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80092d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 80092dc:	2301      	movs	r3, #1
 80092de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 80092e2:	f107 0314 	add.w	r3, r7, #20
 80092e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 80092ea:	2380      	movs	r3, #128	; 0x80
 80092ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 80092f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fa46 	bl	8009788 <hci_send_req>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da01      	bge.n	8009306 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009302:	23ff      	movs	r3, #255	; 0xff
 8009304:	e01e      	b.n	8009344 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009306:	7d3b      	ldrb	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800930c:	7d3b      	ldrb	r3, [r7, #20]
 800930e:	e019      	b.n	8009344 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009314:	b2db      	uxtb	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	89ba      	ldrh	r2, [r7, #12]
 8009326:	429a      	cmp	r2, r3
 8009328:	d201      	bcs.n	800932e <aci_hal_read_config_data+0x8c>
 800932a:	89ba      	ldrh	r2, [r7, #12]
 800932c:	e002      	b.n	8009334 <aci_hal_read_config_data+0x92>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f107 0314 	add.w	r3, r7, #20
 8009338:	3301      	adds	r3, #1
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fcf7 	bl	8009d30 <memcpy>
  
  return 0;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	37b0      	adds	r7, #176	; 0xb0
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	460a      	mov	r2, r1
 8009356:	71fb      	strb	r3, [r7, #7]
 8009358:	4613      	mov	r3, r2
 800935a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009360:	79bb      	ldrb	r3, [r7, #6]
 8009362:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009364:	f107 0310 	add.w	r3, r7, #16
 8009368:	2218      	movs	r2, #24
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fcb2 	bl	8009cd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009372:	233f      	movs	r3, #63	; 0x3f
 8009374:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009376:	230f      	movs	r3, #15
 8009378:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800937a:	f107 030c 	add.w	r3, r7, #12
 800937e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009380:	2302      	movs	r3, #2
 8009382:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8009384:	f107 030b 	add.w	r3, r7, #11
 8009388:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800938e:	f107 0310 	add.w	r3, r7, #16
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f9f7 	bl	8009788 <hci_send_req>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	da01      	bge.n	80093a4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80093a0:	23ff      	movs	r3, #255	; 0xff
 80093a2:	e000      	b.n	80093a6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 80093a4:	7afb      	ldrb	r3, [r7, #11]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3728      	adds	r7, #40	; 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80093ae:	b590      	push	{r4, r7, lr}
 80093b0:	b089      	sub	sp, #36	; 0x24
 80093b2:	af02      	add	r7, sp, #8
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80093b8:	f107 0410 	add.w	r4, r7, #16
 80093bc:	f107 0215 	add.w	r2, r7, #21
 80093c0:	f107 0112 	add.w	r1, r7, #18
 80093c4:	f107 0016 	add.w	r0, r7, #22
 80093c8:	f107 030e 	add.w	r3, r7, #14
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4623      	mov	r3, r4
 80093d0:	f000 f853 	bl	800947a <hci_le_read_local_version>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d126      	bne.n	800942c <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80093de:	8a7b      	ldrh	r3, [r7, #18]
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80093ea:	8a7b      	ldrh	r3, [r7, #18]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	b21a      	sxth	r2, r3
 80093fa:	89fb      	ldrh	r3, [r7, #14]
 80093fc:	091b      	lsrs	r3, r3, #4
 80093fe:	b29b      	uxth	r3, r3
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	b21b      	sxth	r3, r3
 8009404:	b2db      	uxtb	r3, r3
 8009406:	b21b      	sxth	r3, r3
 8009408:	4313      	orrs	r3, r2
 800940a:	b21b      	sxth	r3, r3
 800940c:	b29a      	uxth	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b21a      	sxth	r2, r3
 8009418:	89fb      	ldrh	r3, [r7, #14]
 800941a:	b21b      	sxth	r3, r3
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	b21b      	sxth	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b21b      	sxth	r3, r3
 8009426:	b29a      	uxth	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
}
 800942e:	4618      	mov	r0, r3
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}

08009436 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800943c:	f107 0308 	add.w	r3, r7, #8
 8009440:	2218      	movs	r2, #24
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fc46 	bl	8009cd6 <memset>
  rq.ogf = OGF_HOST_CTL;
 800944a:	2303      	movs	r3, #3
 800944c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800944e:	2303      	movs	r3, #3
 8009450:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009452:	1dfb      	adds	r3, r7, #7
 8009454:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009456:	2301      	movs	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f991 	bl	8009788 <hci_send_req>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	da01      	bge.n	8009470 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800946c:	23ff      	movs	r3, #255	; 0xff
 800946e:	e000      	b.n	8009472 <hci_reset+0x3c>
  
  return status;  
 8009470:	79fb      	ldrb	r3, [r7, #7]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b08e      	sub	sp, #56	; 0x38
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	2209      	movs	r2, #9
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fc20 	bl	8009cd6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009496:	f107 0320 	add.w	r3, r7, #32
 800949a:	2218      	movs	r2, #24
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fc19 	bl	8009cd6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 80094a4:	2304      	movs	r3, #4
 80094a6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80094a8:	2301      	movs	r3, #1
 80094aa:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80094ba:	2309      	movs	r3, #9
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80094be:	f107 0320 	add.w	r3, r7, #32
 80094c2:	2100      	movs	r1, #0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f95f 	bl	8009788 <hci_send_req>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da01      	bge.n	80094d4 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80094d0:	23ff      	movs	r3, #255	; 0xff
 80094d2:	e018      	b.n	8009506 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 80094d4:	7d3b      	ldrb	r3, [r7, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <hci_le_read_local_version+0x64>
    return resp.status;
 80094da:	7d3b      	ldrb	r3, [r7, #20]
 80094dc:	e013      	b.n	8009506 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80094de:	7d7a      	ldrb	r2, [r7, #21]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80094e4:	8afa      	ldrh	r2, [r7, #22]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80094ea:	7e3a      	ldrb	r2, [r7, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80094f0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80094fa:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009502:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3738      	adds	r7, #56	; 0x38
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b092      	sub	sp, #72	; 0x48
 8009512:	af00      	add	r7, sp, #0
 8009514:	4603      	mov	r3, r0
 8009516:	6039      	str	r1, [r7, #0]
 8009518:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800951a:	f107 0310 	add.w	r3, r7, #16
 800951e:	2220      	movs	r2, #32
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fbd7 	bl	8009cd6 <memset>
  scan_resp_cp.length = length;
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	2b1f      	cmp	r3, #31
 8009530:	bf28      	it	cs
 8009532:	231f      	movcs	r3, #31
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	f107 0310 	add.w	r3, r7, #16
 800953c:	3301      	adds	r3, #1
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fbf5 	bl	8009d30 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800954a:	2218      	movs	r2, #24
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fbc1 	bl	8009cd6 <memset>
  rq.ogf = OGF_LE_CTL;
 8009554:	2308      	movs	r3, #8
 8009556:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009558:	2309      	movs	r3, #9
 800955a:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800955c:	f107 0310 	add.w	r3, r7, #16
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009562:	2320      	movs	r3, #32
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8009566:	f107 030f 	add.w	r3, r7, #15
 800956a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800956c:	2301      	movs	r3, #1
 800956e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009574:	2100      	movs	r1, #0
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f906 	bl	8009788 <hci_send_req>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	da01      	bge.n	8009586 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009582:	23ff      	movs	r3, #255	; 0xff
 8009584:	e000      	b.n	8009588 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3748      	adds	r7, #72	; 0x48
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3308      	adds	r3, #8
 800959c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d001      	beq.n	80095aa <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80095a6:	2301      	movs	r3, #1
 80095a8:	e00c      	b.n	80095c4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3302      	adds	r3, #2
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80095b8:	3b03      	subs	r3, #3
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d001      	beq.n	80095c2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80095be:	2302      	movs	r3, #2
 80095c0:	e000      	b.n	80095c4 <verify_packet+0x34>
  
  return 0;      
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b0a6      	sub	sp, #152	; 0x98
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	607b      	str	r3, [r7, #4]
 80095d8:	4603      	mov	r3, r0
 80095da:	81fb      	strh	r3, [r7, #14]
 80095dc:	460b      	mov	r3, r1
 80095de:	81bb      	strh	r3, [r7, #12]
 80095e0:	4613      	mov	r3, r2
 80095e2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80095e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80095e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095ec:	b21a      	sxth	r2, r3
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	029b      	lsls	r3, r3, #10
 80095f2:	b21b      	sxth	r3, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	b21b      	sxth	r3, r3
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80095fc:	7afb      	ldrb	r3, [r7, #11]
 80095fe:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009600:	2301      	movs	r3, #1
 8009602:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009604:	f107 0318 	add.w	r3, r7, #24
 8009608:	3301      	adds	r3, #1
 800960a:	461a      	mov	r2, r3
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	8819      	ldrh	r1, [r3, #0]
 8009612:	789b      	ldrb	r3, [r3, #2]
 8009614:	8011      	strh	r1, [r2, #0]
 8009616:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009618:	f107 0318 	add.w	r3, r7, #24
 800961c:	3304      	adds	r3, #4
 800961e:	7afa      	ldrb	r2, [r7, #11]
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fb84 	bl	8009d30 <memcpy>
  
  if (hciContext.io.Send)
 8009628:	4b08      	ldr	r3, [pc, #32]	; (800964c <send_cmd+0x7c>)
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009630:	4b06      	ldr	r3, [pc, #24]	; (800964c <send_cmd+0x7c>)
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	7afa      	ldrb	r2, [r7, #11]
 8009636:	b292      	uxth	r2, r2
 8009638:	3204      	adds	r2, #4
 800963a:	b291      	uxth	r1, r2
 800963c:	f107 0218 	add.w	r2, r7, #24
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
  }
}
 8009644:	bf00      	nop
 8009646:	3798      	adds	r7, #152	; 0x98
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	2001407c 	.word	0x2001407c

08009650 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800965a:	e00a      	b.n	8009672 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	4619      	mov	r1, r3
 8009662:	6838      	ldr	r0, [r7, #0]
 8009664:	f000 fae8 	bl	8009c38 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fa4f 	bl	8009b10 <list_insert_head>
  while (!list_is_empty(src_list))
 8009672:	6838      	ldr	r0, [r7, #0]
 8009674:	f000 fa2a 	bl	8009acc <list_is_empty>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0ee      	beq.n	800965c <move_list+0xc>
  }
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800968e:	e009      	b.n	80096a4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009690:	1d3b      	adds	r3, r7, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4809      	ldr	r0, [pc, #36]	; (80096bc <free_event_list+0x34>)
 8009696:	f000 faa8 	bl	8009bea <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4619      	mov	r1, r3
 800969e:	4808      	ldr	r0, [pc, #32]	; (80096c0 <free_event_list+0x38>)
 80096a0:	f000 fa5c 	bl	8009b5c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80096a4:	4806      	ldr	r0, [pc, #24]	; (80096c0 <free_event_list+0x38>)
 80096a6:	f000 faee 	bl	8009c86 <list_get_size>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	ddef      	ble.n	8009690 <free_event_list+0x8>
  }
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20013db8 	.word	0x20013db8
 80096c0:	20013db0 	.word	0x20013db0

080096c4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80096d4:	4a18      	ldr	r2, [pc, #96]	; (8009738 <hci_init+0x74>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80096da:	4818      	ldr	r0, [pc, #96]	; (800973c <hci_init+0x78>)
 80096dc:	f000 f9e6 	bl	8009aac <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80096e0:	4817      	ldr	r0, [pc, #92]	; (8009740 <hci_init+0x7c>)
 80096e2:	f000 f9e3 	bl	8009aac <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80096e6:	f7f7 f83b 	bl	8000760 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
 80096ee:	e00c      	b.n	800970a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	228c      	movs	r2, #140	; 0x8c
 80096f4:	fb02 f303 	mul.w	r3, r2, r3
 80096f8:	4a12      	ldr	r2, [pc, #72]	; (8009744 <hci_init+0x80>)
 80096fa:	4413      	add	r3, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	480f      	ldr	r0, [pc, #60]	; (800973c <hci_init+0x78>)
 8009700:	f000 fa2c 	bl	8009b5c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	3301      	adds	r3, #1
 8009708:	73fb      	strb	r3, [r7, #15]
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	2b04      	cmp	r3, #4
 800970e:	d9ef      	bls.n	80096f0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009710:	4b09      	ldr	r3, [pc, #36]	; (8009738 <hci_init+0x74>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <hci_init+0x5c>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <hci_init+0x74>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2000      	movs	r0, #0
 800971e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009720:	4b05      	ldr	r3, [pc, #20]	; (8009738 <hci_init+0x74>)
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <hci_init+0x6a>
 8009728:	4b03      	ldr	r3, [pc, #12]	; (8009738 <hci_init+0x74>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	4798      	blx	r3
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	2001407c 	.word	0x2001407c
 800973c:	20013db0 	.word	0x20013db0
 8009740:	20013db8 	.word	0x20013db8
 8009744:	20013dc0 	.word	0x20013dc0

08009748 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a0b      	ldr	r2, [pc, #44]	; (8009784 <hci_register_io_bus+0x3c>)
 8009756:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <hci_register_io_bus+0x3c>)
 800975e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	4a07      	ldr	r2, [pc, #28]	; (8009784 <hci_register_io_bus+0x3c>)
 8009766:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	4a05      	ldr	r2, [pc, #20]	; (8009784 <hci_register_io_bus+0x3c>)
 800976e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	4a03      	ldr	r2, [pc, #12]	; (8009784 <hci_register_io_bus+0x3c>)
 8009776:	6093      	str	r3, [r2, #8]
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	2001407c 	.word	0x2001407c

08009788 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08e      	sub	sp, #56	; 0x38
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	885b      	ldrh	r3, [r3, #2]
 8009798:	b21b      	sxth	r3, r3
 800979a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800979e:	b21a      	sxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	029b      	lsls	r3, r3, #10
 80097a6:	b21b      	sxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b21b      	sxth	r3, r3
 80097ac:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80097b2:	f107 0308 	add.w	r3, r7, #8
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f978 	bl	8009aac <list_init_head>

  free_event_list();
 80097bc:	f7ff ff64 	bl	8009688 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8818      	ldrh	r0, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8859      	ldrh	r1, [r3, #2]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f7ff fefd 	bl	80095d0 <send_cmd>
  
  if (async)
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <hci_send_req+0x58>
  {
    return 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	e0e2      	b.n	80099a6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80097e0:	f7f9 fd5c 	bl	800329c <HAL_GetTick>
 80097e4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80097e6:	f7f9 fd59 	bl	800329c <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097f4:	f200 80b3 	bhi.w	800995e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80097f8:	486d      	ldr	r0, [pc, #436]	; (80099b0 <hci_send_req+0x228>)
 80097fa:	f000 f967 	bl	8009acc <list_is_empty>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d000      	beq.n	8009806 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009804:	e7ef      	b.n	80097e6 <hci_send_req+0x5e>
      {
        break;
 8009806:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009808:	f107 0310 	add.w	r3, r7, #16
 800980c:	4619      	mov	r1, r3
 800980e:	4868      	ldr	r0, [pc, #416]	; (80099b0 <hci_send_req+0x228>)
 8009810:	f000 f9eb 	bl	8009bea <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	3308      	adds	r3, #8
 8009818:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d17f      	bne.n	8009922 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	3301      	adds	r3, #1
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	3308      	adds	r3, #8
 800982c:	3303      	adds	r3, #3
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009836:	3b03      	subs	r3, #3
 8009838:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b3e      	cmp	r3, #62	; 0x3e
 8009840:	d04c      	beq.n	80098dc <hci_send_req+0x154>
 8009842:	2b3e      	cmp	r3, #62	; 0x3e
 8009844:	dc68      	bgt.n	8009918 <hci_send_req+0x190>
 8009846:	2b10      	cmp	r3, #16
 8009848:	f000 808b 	beq.w	8009962 <hci_send_req+0x1da>
 800984c:	2b10      	cmp	r3, #16
 800984e:	dc63      	bgt.n	8009918 <hci_send_req+0x190>
 8009850:	2b0e      	cmp	r3, #14
 8009852:	d023      	beq.n	800989c <hci_send_req+0x114>
 8009854:	2b0f      	cmp	r3, #15
 8009856:	d15f      	bne.n	8009918 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	885b      	ldrh	r3, [r3, #2]
 8009860:	b29b      	uxth	r3, r3
 8009862:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009864:	429a      	cmp	r2, r3
 8009866:	d17e      	bne.n	8009966 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2b0f      	cmp	r3, #15
 800986e:	d004      	beq.n	800987a <hci_send_req+0xf2>
          if (cs->status) {
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d051      	beq.n	800991c <hci_send_req+0x194>
            goto failed;
 8009878:	e078      	b.n	800996c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	429a      	cmp	r2, r3
 8009882:	bf28      	it	cs
 8009884:	461a      	movcs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6918      	ldr	r0, [r3, #16]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	461a      	mov	r2, r3
 8009894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009896:	f000 fa4b 	bl	8009d30 <memcpy>
        goto done;
 800989a:	e078      	b.n	800998e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d15d      	bne.n	800996a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	3303      	adds	r3, #3
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	3b03      	subs	r3, #3
 80098b8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695a      	ldr	r2, [r3, #20]
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bf28      	it	cs
 80098c4:	461a      	movcs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6918      	ldr	r0, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098d6:	f000 fa2b 	bl	8009d30 <memcpy>
        goto done;
 80098da:	e058      	b.n	800998e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d118      	bne.n	8009920 <hci_send_req+0x198>
          break;
      
        len -= 1;
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	695a      	ldr	r2, [r3, #20]
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	bf28      	it	cs
 80098fe:	461a      	movcs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6918      	ldr	r0, [r3, #16]
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1c59      	adds	r1, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	461a      	mov	r2, r3
 8009912:	f000 fa0d 	bl	8009d30 <memcpy>
        goto done;
 8009916:	e03a      	b.n	800998e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <hci_send_req+0x19a>
          break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <hci_send_req+0x19a>
          break;
 8009920:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009922:	4824      	ldr	r0, [pc, #144]	; (80099b4 <hci_send_req+0x22c>)
 8009924:	f000 f8d2 	bl	8009acc <list_is_empty>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00d      	beq.n	800994a <hci_send_req+0x1c2>
 800992e:	4820      	ldr	r0, [pc, #128]	; (80099b0 <hci_send_req+0x228>)
 8009930:	f000 f8cc 	bl	8009acc <list_is_empty>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	4619      	mov	r1, r3
 800993e:	481d      	ldr	r0, [pc, #116]	; (80099b4 <hci_send_req+0x22c>)
 8009940:	f000 f90c 	bl	8009b5c <list_insert_tail>
      hciReadPacket=NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	613b      	str	r3, [r7, #16]
 8009948:	e008      	b.n	800995c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f902 	bl	8009b5c <list_insert_tail>
      hciReadPacket=NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
  {
 800995c:	e740      	b.n	80097e0 <hci_send_req+0x58>
        goto failed;
 800995e:	bf00      	nop
 8009960:	e004      	b.n	800996c <hci_send_req+0x1e4>
        goto failed;
 8009962:	bf00      	nop
 8009964:	e002      	b.n	800996c <hci_send_req+0x1e4>
          goto failed;
 8009966:	bf00      	nop
 8009968:	e000      	b.n	800996c <hci_send_req+0x1e4>
          goto failed;
 800996a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d004      	beq.n	800997c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	4619      	mov	r1, r3
 8009976:	480f      	ldr	r0, [pc, #60]	; (80099b4 <hci_send_req+0x22c>)
 8009978:	f000 f8ca 	bl	8009b10 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	4619      	mov	r1, r3
 8009982:	480b      	ldr	r0, [pc, #44]	; (80099b0 <hci_send_req+0x228>)
 8009984:	f7ff fe64 	bl	8009650 <move_list>

  return -1;
 8009988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800998c:	e00b      	b.n	80099a6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	4619      	mov	r1, r3
 8009992:	4808      	ldr	r0, [pc, #32]	; (80099b4 <hci_send_req+0x22c>)
 8009994:	f000 f8bc 	bl	8009b10 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	4619      	mov	r1, r3
 800999e:	4804      	ldr	r0, [pc, #16]	; (80099b0 <hci_send_req+0x228>)
 80099a0:	f7ff fe56 	bl	8009650 <move_list>

  return 0;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3738      	adds	r7, #56	; 0x38
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20013db8 	.word	0x20013db8
 80099b4:	20013db0 	.word	0x20013db0

080099b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80099c2:	e013      	b.n	80099ec <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	480e      	ldr	r0, [pc, #56]	; (8009a04 <hci_user_evt_proc+0x4c>)
 80099ca:	f000 f90e 	bl	8009bea <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80099ce:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <hci_user_evt_proc+0x50>)
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <hci_user_evt_proc+0x50>)
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	3208      	adds	r2, #8
 80099de:	4610      	mov	r0, r2
 80099e0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4619      	mov	r1, r3
 80099e6:	4809      	ldr	r0, [pc, #36]	; (8009a0c <hci_user_evt_proc+0x54>)
 80099e8:	f000 f8b8 	bl	8009b5c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <hci_user_evt_proc+0x4c>)
 80099ee:	f000 f86d 	bl	8009acc <list_is_empty>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0e5      	beq.n	80099c4 <hci_user_evt_proc+0xc>
  }
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20013db8 	.word	0x20013db8
 8009a08:	2001407c 	.word	0x2001407c
 8009a0c:	20013db0 	.word	0x20013db0

08009a10 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009a20:	481f      	ldr	r0, [pc, #124]	; (8009aa0 <hci_notify_asynch_evt+0x90>)
 8009a22:	f000 f853 	bl	8009acc <list_is_empty>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d132      	bne.n	8009a92 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009a2c:	f107 030c 	add.w	r3, r7, #12
 8009a30:	4619      	mov	r1, r3
 8009a32:	481b      	ldr	r0, [pc, #108]	; (8009aa0 <hci_notify_asynch_evt+0x90>)
 8009a34:	f000 f8d9 	bl	8009bea <list_remove_head>
    
    if (hciContext.io.Receive)
 8009a38:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <hci_notify_asynch_evt+0x94>)
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d02a      	beq.n	8009a96 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009a40:	4b18      	ldr	r3, [pc, #96]	; (8009aa4 <hci_notify_asynch_evt+0x94>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	3208      	adds	r2, #8
 8009a48:	2180      	movs	r1, #128	; 0x80
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	4798      	blx	r3
 8009a4e:	4603      	mov	r3, r0
 8009a50:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009a52:	7cfb      	ldrb	r3, [r7, #19]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d016      	beq.n	8009a86 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	7cfa      	ldrb	r2, [r7, #19]
 8009a5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fd94 	bl	8009590 <verify_packet>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4619      	mov	r1, r3
 8009a72:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <hci_notify_asynch_evt+0x98>)
 8009a74:	f000 f872 	bl	8009b5c <list_insert_tail>
 8009a78:	e00d      	b.n	8009a96 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4808      	ldr	r0, [pc, #32]	; (8009aa0 <hci_notify_asynch_evt+0x90>)
 8009a80:	f000 f846 	bl	8009b10 <list_insert_head>
 8009a84:	e007      	b.n	8009a96 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <hci_notify_asynch_evt+0x90>)
 8009a8c:	f000 f840 	bl	8009b10 <list_insert_head>
 8009a90:	e001      	b.n	8009a96 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009a92:	2301      	movs	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009a96:	697b      	ldr	r3, [r7, #20]

}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20013db0 	.word	0x20013db0
 8009aa4:	2001407c 	.word	0x2001407c
 8009aa8:	20013db8 	.word	0x20013db8

08009aac <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	605a      	str	r2, [r3, #4]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ade:	b672      	cpsid	i
}
 8009ae0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d102      	bne.n	8009af2 <list_is_empty+0x26>
  {
    return_value = 1;
 8009aec:	2301      	movs	r3, #1
 8009aee:	75fb      	strb	r3, [r7, #23]
 8009af0:	e001      	b.n	8009af6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f383 8810 	msr	PRIMASK, r3
}
 8009b00:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	371c      	adds	r7, #28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b24:	b672      	cpsid	i
}
 8009b26:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f383 8810 	msr	PRIMASK, r3
}
 8009b4e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b66:	f3ef 8310 	mrs	r3, PRIMASK
 8009b6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b70:	b672      	cpsid	i
}
 8009b72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f383 8810 	msr	PRIMASK, r3
}
 8009b9a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8009bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bba:	b672      	cpsid	i
}
 8009bbc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6852      	ldr	r2, [r2, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f383 8810 	msr	PRIMASK, r3
}
 8009bdc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b086      	sub	sp, #24
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bfe:	b672      	cpsid	i
}
 8009c00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff ffca 	bl	8009ba8 <list_remove_node>
  (*node)->next = NULL;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2200      	movs	r2, #0
 8009c22:	605a      	str	r2, [r3, #4]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009c30:	bf00      	nop
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c42:	f3ef 8310 	mrs	r3, PRIMASK
 8009c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c48:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c4c:	b672      	cpsid	i
}
 8009c4e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff ffa3 	bl	8009ba8 <list_remove_node>
  (*node)->next = NULL;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	605a      	str	r2, [r3, #4]
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f383 8810 	msr	PRIMASK, r3
}
 8009c7c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009c7e:	bf00      	nop
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b089      	sub	sp, #36	; 0x24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c92:	f3ef 8310 	mrs	r3, PRIMASK
 8009c96:	613b      	str	r3, [r7, #16]
  return(result);
 8009c98:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9c:	b672      	cpsid	i
}
 8009c9e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009ca6:	e005      	b.n	8009cb4 <list_get_size+0x2e>
  {
    size++;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d1f5      	bne.n	8009ca8 <list_get_size+0x22>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f383 8810 	msr	PRIMASK, r3
}
 8009cc6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009cc8:	69fb      	ldr	r3, [r7, #28]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3724      	adds	r7, #36	; 0x24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <memset>:
 8009cd6:	4402      	add	r2, r0
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d100      	bne.n	8009ce0 <memset+0xa>
 8009cde:	4770      	bx	lr
 8009ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce4:	e7f9      	b.n	8009cda <memset+0x4>
	...

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4d0d      	ldr	r5, [pc, #52]	; (8009d20 <__libc_init_array+0x38>)
 8009cec:	4c0d      	ldr	r4, [pc, #52]	; (8009d24 <__libc_init_array+0x3c>)
 8009cee:	1b64      	subs	r4, r4, r5
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	4d0b      	ldr	r5, [pc, #44]	; (8009d28 <__libc_init_array+0x40>)
 8009cfa:	4c0c      	ldr	r4, [pc, #48]	; (8009d2c <__libc_init_array+0x44>)
 8009cfc:	f000 f826 	bl	8009d4c <_init>
 8009d00:	1b64      	subs	r4, r4, r5
 8009d02:	10a4      	asrs	r4, r4, #2
 8009d04:	2600      	movs	r6, #0
 8009d06:	42a6      	cmp	r6, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d10:	4798      	blx	r3
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1a:	4798      	blx	r3
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	08009dd4 	.word	0x08009dd4
 8009d24:	08009dd4 	.word	0x08009dd4
 8009d28:	08009dd4 	.word	0x08009dd4
 8009d2c:	08009dd8 	.word	0x08009dd8

08009d30 <memcpy>:
 8009d30:	440a      	add	r2, r1
 8009d32:	4291      	cmp	r1, r2
 8009d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d38:	d100      	bne.n	8009d3c <memcpy+0xc>
 8009d3a:	4770      	bx	lr
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d1f9      	bne.n	8009d3e <memcpy+0xe>
 8009d4a:	bd10      	pop	{r4, pc}

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
