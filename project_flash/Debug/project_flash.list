
project_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006484  08006484  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800648c  0800648c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000034  080064c8  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080064c8  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c74  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f81  00000000  00000000  00035d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7a  00000000  00000000  00039e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b850  00000000  00000000  0003ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ade  00000000  00000000  000663ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107822  00000000  00000000  0007cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000474c  00000000  00000000  001846cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00188e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000034 	.word	0x20000034
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080063fc 	.word	0x080063fc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000038 	.word	0x20000038
 80001f8:	080063fc 	.word	0x080063fc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004fc:	b09d      	sub	sp, #116	; 0x74
 80004fe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fd49 	bl	8001f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8de 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f9f2 	bl	80008f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800050c:	f000 f92c 	bl	8000768 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f96a 	bl	80007e8 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f9a0 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_PSENSOR_Init(); // initialize pressure sensor
 8000518:	f000 fc4e 	bl	8000db8 <BSP_PSENSOR_Init>
//  BSP_HSENSOR_Init(); // initialize humidity sensor
//  BSP_TSENSOR_Init(); // initialize humidity sensor

  single_block_data_size = MAX_DATA_SINGLE_BLOCK / sizeof(struct flash_data_type);
 800051c:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <main+0x1c8>)
 800051e:	f640 6238 	movw	r2, #3640	; 0xe38
 8000522:	801a      	strh	r2, [r3, #0]

  if (BSP_QSPI_Init() != QSPI_OK) {
 8000524:	f000 fc76 	bl	8000e14 <BSP_QSPI_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <main+0x3a>
    Error_Handler();
 800052e:	f000 fac0 	bl	8000ab2 <Error_Handler>

  struct flash_data_type flash_data_write;
  float temp_read;
  float humidity_read;
  float pressure_read;
  int16_t noise_read = 123;
 8000532:	237b      	movs	r3, #123	; 0x7b
 8000534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  uint8_t count = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (count == 3) {
 800053e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000542:	2b03      	cmp	r3, #3
 8000544:	f040 8083 	bne.w	800064e <main+0x156>
 8000548:	466b      	mov	r3, sp
 800054a:	607b      	str	r3, [r7, #4]
		  uint16_t data_length_111 = readNumOfData_1();
 800054c:	f000 f9f4 	bl	8000938 <readNumOfData_1>
 8000550:	4603      	mov	r3, r0
 8000552:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  struct flash_data_type buffer[data_length_111];
 8000556:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
 800055a:	4633      	mov	r3, r6
 800055c:	3b01      	subs	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
 8000560:	b2b3      	uxth	r3, r6
 8000562:	2200      	movs	r2, #0
 8000564:	469a      	mov	sl, r3
 8000566:	4693      	mov	fp, r2
 8000568:	4652      	mov	r2, sl
 800056a:	465b      	mov	r3, fp
 800056c:	f04f 0000 	mov.w	r0, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	00d9      	lsls	r1, r3, #3
 8000576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800057a:	00d0      	lsls	r0, r2, #3
 800057c:	4602      	mov	r2, r0
 800057e:	460b      	mov	r3, r1
 8000580:	eb12 040a 	adds.w	r4, r2, sl
 8000584:	eb43 050b 	adc.w	r5, r3, fp
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	012b      	lsls	r3, r5, #4
 8000592:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000596:	0122      	lsls	r2, r4, #4
 8000598:	b2b3      	uxth	r3, r6
 800059a:	2200      	movs	r2, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	60fa      	str	r2, [r7, #12]
 80005a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80005a4:	4622      	mov	r2, r4
 80005a6:	462b      	mov	r3, r5
 80005a8:	f04f 0000 	mov.w	r0, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	00d9      	lsls	r1, r3, #3
 80005b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80005b6:	00d0      	lsls	r0, r2, #3
 80005b8:	4602      	mov	r2, r0
 80005ba:	460b      	mov	r3, r1
 80005bc:	4621      	mov	r1, r4
 80005be:	eb12 0801 	adds.w	r8, r2, r1
 80005c2:	4629      	mov	r1, r5
 80005c4:	eb43 0901 	adc.w	r9, r3, r1
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80005d4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80005d8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80005dc:	4632      	mov	r2, r6
 80005de:	4613      	mov	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	3307      	adds	r3, #7
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	ebad 0d03 	sub.w	sp, sp, r3
 80005f0:	ab04      	add	r3, sp, #16
 80005f2:	3300      	adds	r3, #0
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  for (int i = 0; i < data_length_111; i++) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80005fa:	e01e      	b.n	800063a <main+0x142>
			  buffer[i] = readDataBlock1(i);
 80005fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005fe:	b298      	uxth	r0, r3
 8000600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000604:	4613      	mov	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	18cc      	adds	r4, r1, r3
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4601      	mov	r1, r0
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fa21 	bl	8000a5c <readDataBlock1>
 800061a:	4622      	mov	r2, r4
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	681d      	ldr	r5, [r3, #0]
 8000622:	685c      	ldr	r4, [r3, #4]
 8000624:	6898      	ldr	r0, [r3, #8]
 8000626:	68d9      	ldr	r1, [r3, #12]
 8000628:	6015      	str	r5, [r2, #0]
 800062a:	6054      	str	r4, [r2, #4]
 800062c:	6090      	str	r0, [r2, #8]
 800062e:	60d1      	str	r1, [r2, #12]
 8000630:	8a1b      	ldrh	r3, [r3, #16]
 8000632:	8213      	strh	r3, [r2, #16]
		  for (int i = 0; i < data_length_111; i++) {
 8000634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000636:	3301      	adds	r3, #1
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
 800063a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800063e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000640:	429a      	cmp	r2, r3
 8000642:	dbdb      	blt.n	80005fc <main+0x104>
		  }
		  break;
 8000644:	bf00      	nop
 8000646:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800064a:	2300      	movs	r3, #0
 800064c:	e033      	b.n	80006b6 <main+0x1be>
	  }

	  BSP_HSENSOR_Init();
 800064e:	f000 fb85 	bl	8000d5c <BSP_HSENSOR_Init>
	  humidity_read = BSP_HSENSOR_ReadHumidity();
 8000652:	f000 fba3 	bl	8000d9c <BSP_HSENSOR_ReadHumidity>
 8000656:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

	  BSP_TSENSOR_Init();
 800065a:	f001 f825 	bl	80016a8 <BSP_TSENSOR_Init>
	  temp_read = BSP_TSENSOR_ReadTemp();
 800065e:	f001 f83f 	bl	80016e0 <BSP_TSENSOR_ReadTemp>
 8000662:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c

	  pressure_read = BSP_PSENSOR_ReadPressure();
 8000666:	f000 fbc7 	bl	8000df8 <BSP_PSENSOR_ReadPressure>
 800066a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

	  flash_data_write.humidity = humidity_read;
 800066e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
	  flash_data_write.temperature = temp_read;
 8000672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
	  flash_data_write.pressure = pressure_read;
 8000676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
	  flash_data_write.noise = noise_read;
 800067a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800067e:	873b      	strh	r3, [r7, #56]	; 0x38
	  flash_data_write.timestamp = count;
 8000680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28

	  uint16_t data_length = readNumOfData_1();
 8000686:	f000 f957 	bl	8000938 <readNumOfData_1>
 800068a:	4603      	mov	r3, r0
 800068c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  writeDataToFlash(flash_data_write, data_length, 0);
 8000690:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000694:	2200      	movs	r2, #0
 8000696:	9202      	str	r2, [sp, #8]
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800069c:	f8ad 3000 	strh.w	r3, [sp]
 80006a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	f000 f975 	bl	8000994 <writeDataToFlash>

	  count++;
 80006aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006ae:	3301      	adds	r3, #1
 80006b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  {
 80006b4:	e743      	b.n	800053e <main+0x46>

  }
  /* USER CODE END 3 */
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3764      	adds	r7, #100	; 0x64
 80006ba:	46bd      	mov	sp, r7
 80006bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c0:	20000188 	.word	0x20000188

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fe66 	bl	80063a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006e6:	2000      	movs	r0, #0
 80006e8:	f003 fb60 	bl	8003dac <HAL_PWREx_ControlVoltageScaling>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006f2:	f000 f9de 	bl	8000ab2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f6:	2310      	movs	r3, #16
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000702:	2360      	movs	r3, #96	; 0x60
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070a:	2301      	movs	r3, #1
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000712:	233c      	movs	r3, #60	; 0x3c
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fbe4 	bl	8003ef4 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000732:	f000 f9be 	bl	8000ab2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f003 ffea 	bl	8004728 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f9aa 	bl	8000ab2 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3758      	adds	r7, #88	; 0x58
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C2_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_I2C2_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_I2C2_Init+0x74>)
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_I2C2_Init+0x7c>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C2_Init+0x74>)
 8000780:	2201      	movs	r2, #1
 8000782:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_I2C2_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C2_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_I2C2_Init+0x74>)
 80007a4:	f002 f802 	bl	80027ac <HAL_I2C_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007ae:	f000 f980 	bl	8000ab2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_I2C2_Init+0x74>)
 80007b6:	f002 fda9 	bl	800330c <HAL_I2CEx_ConfigAnalogFilter>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007c0:	f000 f977 	bl	8000ab2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c4:	2100      	movs	r1, #0
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_I2C2_Init+0x74>)
 80007c8:	f002 fdeb 	bl	80033a2 <HAL_I2CEx_ConfigDigitalFilter>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f96e 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000050 	.word	0x20000050
 80007e0:	40005800 	.word	0x40005800
 80007e4:	307075b1 	.word	0x307075b1

080007e8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <MX_OCTOSPI1_Init+0x6c>)
 80007f0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000804:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000808:	2220      	movs	r2, #32
 800080a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 800080e:	2201      	movs	r2, #1
 8000810:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000820:	2201      	movs	r2, #1
 8000822:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 8000838:	2208      	movs	r2, #8
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_OCTOSPI1_Init+0x68>)
 800083e:	f002 fdfd 	bl	800343c <HAL_OSPI_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_OCTOSPI1_Init+0x64>
  {
    Error_Handler();
 8000848:	f000 f933 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000a4 	.word	0x200000a4
 8000854:	a0001000 	.word	0xa0001000

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_USART1_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008a2:	f004 ff17 	bl	80056d4 <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f901 	bl	8000ab2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008b4:	f005 fcac 	bl	8006210 <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f8f8 	bl	8000ab2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008c6:	f005 fce1 	bl	800628c <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f8ef 	bl	8000ab2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008d6:	f005 fc62 	bl	800619e <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f8e7 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000f4 	.word	0x200000f4
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_GPIO_Init+0x44>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <MX_GPIO_Init+0x44>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_GPIO_Init+0x44>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x44>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <MX_GPIO_Init+0x44>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_GPIO_Init+0x44>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <readNumOfData_1>:

/**
 * Read the number of struct data in the first data block
 * */

uint16_t readNumOfData_1() {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
	uint16_t num = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	81fb      	strh	r3, [r7, #14]
	uint8_t data;
	for (int i = 0; i < single_block_data_size; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	e016      	b.n	8000976 <readNumOfData_1+0x3e>
		// read a byte from the memory address
		if (  BSP_QSPI_Read(&data, BASE_ADDR_BITMAP_1 + i, 1) != QSPI_OK) {
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800094e:	4619      	mov	r1, r3
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	2201      	movs	r2, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fadb 	bl	8000f10 <BSP_QSPI_Read>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <readNumOfData_1+0x2c>
		      	Error_Handler();
 8000960:	f000 f8a7 	bl	8000ab2 <Error_Handler>
		}

		if (data == 0) { // if there is data in the location
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <readNumOfData_1+0x4c>
			num += 1;
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	3301      	adds	r3, #1
 800096e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < single_block_data_size; i++) {
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3301      	adds	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <readNumOfData_1+0x58>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4293      	cmp	r3, r2
 8000980:	dbe2      	blt.n	8000948 <readNumOfData_1+0x10>
 8000982:	e000      	b.n	8000986 <readNumOfData_1+0x4e>
		} else {
			break;
 8000984:	bf00      	nop
		}
	}
	return num;
 8000986:	89fb      	ldrh	r3, [r7, #14]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000188 	.word	0x20000188

08000994 <writeDataToFlash>:
/**
 * Write a Struct data into the flash
 * In this implementation, if the block max is reached, all memory is deleted
 * If not, add 1 to the memory
 * */
void writeDataToFlash(struct flash_data_type flash_data_input, uint16_t block_data_length, uint8_t block_index) {
 8000994:	b084      	sub	sp, #16
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	f107 0c18 	add.w	ip, r7, #24
 80009a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// first check the current data length
	uint16_t data_index = block_data_length;
 80009a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009a6:	81fb      	strh	r3, [r7, #14]
	uint8_t zero = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	70fb      	strb	r3, [r7, #3]
	uint32_t data_addr = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
	uint32_t bitmap_addr = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
	if (block_data_length == single_block_data_size) { // in case the block is full
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <writeDataToFlash+0xc4>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d113      	bne.n	80009e6 <writeDataToFlash+0x52>
		// delete all data
		  if (BSP_QSPI_Erase_Block(BASE_ADDR_BITMAP_1) != QSPI_OK) {
 80009be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009c2:	f000 fb7d 	bl	80010c0 <BSP_QSPI_Erase_Block>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <writeDataToFlash+0x3c>
		    Error_Handler();
 80009cc:	f000 f871 	bl	8000ab2 <Error_Handler>
		  }

		  if (BSP_QSPI_Erase_Block(BASE_ADDR_DATA_1) != QSPI_OK) {
 80009d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009d4:	f000 fb74 	bl	80010c0 <BSP_QSPI_Erase_Block>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <writeDataToFlash+0x4e>
		      Error_Handler();
 80009de:	f000 f868 	bl	8000ab2 <Error_Handler>
		  }

		  data_index = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	81fb      	strh	r3, [r7, #14]
	}

	if (block_index == 0) {
 80009e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d106      	bne.n	80009fc <writeDataToFlash+0x68>
		data_addr = BASE_ADDR_DATA_1;
 80009ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009f2:	60bb      	str	r3, [r7, #8]
		bitmap_addr = BASE_ADDR_BITMAP_1;
 80009f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e005      	b.n	8000a08 <writeDataToFlash+0x74>
	} else {
		data_addr = BASE_ADDR_DATA_2;
 80009fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a00:	60bb      	str	r3, [r7, #8]
		bitmap_addr = BASE_ADDR_BITMAP_2;
 8000a02:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a06:	607b      	str	r3, [r7, #4]
	}

	// write to flash memory first
    if ( BSP_QSPI_Write((uint8_t *) &flash_data_input, data_addr + (data_index * sizeof(struct flash_data_type)), sizeof(struct flash_data_type)) != QSPI_OK) {
 8000a08:	89fa      	ldrh	r2, [r7, #14]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4413      	add	r3, r2
 8000a18:	2212      	movs	r2, #18
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f107 0018 	add.w	r0, r7, #24
 8000a20:	f000 fac8 	bl	8000fb4 <BSP_QSPI_Write>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <writeDataToFlash+0x9a>
        	  Error_Handler();
 8000a2a:	f000 f842 	bl	8000ab2 <Error_Handler>
    }
    // then write to bitmap
    if ( BSP_QSPI_Write((uint8_t *) &zero, bitmap_addr + data_index, 1) != QSPI_OK) {
 8000a2e:	89fa      	ldrh	r2, [r7, #14]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	18d1      	adds	r1, r2, r3
 8000a34:	1cfb      	adds	r3, r7, #3
 8000a36:	2201      	movs	r2, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fabb 	bl	8000fb4 <BSP_QSPI_Write>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <writeDataToFlash+0xb4>
    	      Error_Handler();
 8000a44:	f000 f835 	bl	8000ab2 <Error_Handler>
    }

}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000188 	.word	0x20000188

08000a5c <readDataBlock1>:

struct flash_data_type readDataBlock1(uint16_t index) {
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
	struct flash_data_type flash_data_read;
	uint32_t data_addr = BASE_ADDR_DATA_1;
 8000a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6c:	61fb      	str	r3, [r7, #28]
	if (  BSP_QSPI_Read((uint8_t *)&flash_data_read, data_addr + (index * sizeof(struct flash_data_type)), sizeof(struct flash_data_type)) != QSPI_OK) {
 8000a6e:	887a      	ldrh	r2, [r7, #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	4413      	add	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	18d1      	adds	r1, r2, r3
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2212      	movs	r2, #18
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fa43 	bl	8000f10 <BSP_QSPI_Read>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <readDataBlock1+0x38>
	    Error_Handler();
 8000a90:	f000 f80f 	bl	8000ab2 <Error_Handler>
	}
	return flash_data_read;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	461d      	mov	r5, r3
 8000a98:	f107 0408 	add.w	r4, r7, #8
 8000a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a9e:	6028      	str	r0, [r5, #0]
 8000aa0:	6069      	str	r1, [r5, #4]
 8000aa2:	60aa      	str	r2, [r5, #8]
 8000aa4:	60eb      	str	r3, [r5, #12]
 8000aa6:	8823      	ldrh	r3, [r4, #0]
 8000aa8:	822b      	strh	r3, [r5, #16]

}
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}

08000ab2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab6:	b672      	cpsid	i
}
 8000ab8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aba:	e7fe      	b.n	8000aba <Error_Handler+0x8>

08000abc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000aee:	2304      	movs	r3, #4
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	481b      	ldr	r0, [pc, #108]	; (8000b68 <I2Cx_MspInit+0xac>)
 8000afa:	f001 fbd3 	bl	80022a4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <I2Cx_MspInit+0xac>)
 8000b06:	f001 fbcd 	bl	80022a4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <I2Cx_MspInit+0xa8>)
 8000b34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b38:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	2021      	movs	r0, #33	; 0x21
 8000b40:	f001 fb79 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000b44:	2021      	movs	r0, #33	; 0x21
 8000b46:	f001 fb92 	bl	800226e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	2022      	movs	r0, #34	; 0x22
 8000b50:	f001 fb71 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000b54:	2022      	movs	r0, #34	; 0x22
 8000b56:	f001 fb8a 	bl	800226e <HAL_NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400

08000b6c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <I2Cx_Init+0x54>)
 8000b78:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <I2Cx_Init+0x58>)
 8000b7e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff89 	bl	8000abc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fdfe 	bl	80027ac <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 fbaa 	bl	800330c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005800 	.word	0x40005800
 8000bc4:	00702681 	.word	0x00702681

08000bc8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af04      	add	r7, sp, #16
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	72fb      	strb	r3, [r7, #11]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	813b      	strh	r3, [r7, #8]
 8000bde:	4613      	mov	r3, r2
 8000be0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	b299      	uxth	r1, r3
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	893a      	ldrh	r2, [r7, #8]
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f001 ffb2 	bl	8002b68 <HAL_I2C_Mem_Read>
 8000c04:	4603      	mov	r3, r0
 8000c06:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d004      	beq.n	8000c18 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	4619      	mov	r1, r3
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f000 f832 	bl	8000c7c <I2Cx_Error>
  }
  return status;
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b08a      	sub	sp, #40	; 0x28
 8000c26:	af04      	add	r7, sp, #16
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4603      	mov	r3, r0
 8000c32:	72fb      	strb	r3, [r7, #11]
 8000c34:	460b      	mov	r3, r1
 8000c36:	813b      	strh	r3, [r7, #8]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	b299      	uxth	r1, r3
 8000c44:	88f8      	ldrh	r0, [r7, #6]
 8000c46:	893a      	ldrh	r2, [r7, #8]
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4603      	mov	r3, r0
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f001 fe71 	bl	8002940 <HAL_I2C_Mem_Write>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f000 f805 	bl	8000c7c <I2Cx_Error>
  }
  return status;
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f001 fe2a 	bl	80028e2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff6c 	bl	8000b6c <I2Cx_Init>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <SENSOR_IO_Init+0x10>)
 8000ca2:	f7ff ff63 	bl	8000b6c <I2Cx_Init>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000018c 	.word	0x2000018c

08000cb0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	79f9      	ldrb	r1, [r7, #7]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	1d7b      	adds	r3, r7, #5
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <SENSOR_IO_Write+0x30>)
 8000cd4:	f7ff ffa5 	bl	8000c22 <I2Cx_WriteMultiple>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000018c 	.word	0x2000018c

08000ce4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	79f9      	ldrb	r1, [r7, #7]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	f107 030f 	add.w	r3, r7, #15
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <SENSOR_IO_Read+0x38>)
 8000d0c:	f7ff ff5c 	bl	8000bc8 <I2Cx_ReadMultiple>

  return read_value;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000018c 	.word	0x2000018c

08000d20 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	603a      	str	r2, [r7, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	4613      	mov	r3, r2
 8000d34:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	79f9      	ldrb	r1, [r7, #7]
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <SENSOR_IO_ReadMultiple+0x38>)
 8000d48:	f7ff ff3e 	bl	8000bc8 <I2Cx_ReadMultiple>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29b      	uxth	r3, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000018c 	.word	0x2000018c

08000d5c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <BSP_HSENSOR_Init+0x38>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	20be      	movs	r0, #190	; 0xbe
 8000d68:	4798      	blx	r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2bbc      	cmp	r3, #188	; 0xbc
 8000d6e:	d002      	beq.n	8000d76 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	e009      	b.n	8000d8a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <BSP_HSENSOR_Init+0x3c>)
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <BSP_HSENSOR_Init+0x38>)
 8000d7a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <BSP_HSENSOR_Init+0x3c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	20be      	movs	r0, #190	; 0xbe
 8000d84:	4798      	blx	r3
    ret = HSENSOR_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	200001e0 	.word	0x200001e0

08000d9c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	20be      	movs	r0, #190	; 0xbe
 8000da8:	4798      	blx	r3
 8000daa:	eef0 7a40 	vmov.f32	s15, s0
}
 8000dae:	eeb0 0a67 	vmov.f32	s0, s15
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200001e0 	.word	0x200001e0

08000db8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <BSP_PSENSOR_Init+0x38>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	20ba      	movs	r0, #186	; 0xba
 8000dc4:	4798      	blx	r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2bb1      	cmp	r3, #177	; 0xb1
 8000dca:	d002      	beq.n	8000dd2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	e009      	b.n	8000de6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <BSP_PSENSOR_Init+0x3c>)
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <BSP_PSENSOR_Init+0x38>)
 8000dd6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <BSP_PSENSOR_Init+0x3c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	20ba      	movs	r0, #186	; 0xba
 8000de0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000de6:	687b      	ldr	r3, [r7, #4]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000020 	.word	0x20000020
 8000df4:	200001e4 	.word	0x200001e4

08000df8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <BSP_PSENSOR_ReadPressure+0x18>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	20ba      	movs	r0, #186	; 0xba
 8000e04:	4798      	blx	r3
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001e4 	.word	0x200001e4

08000e14 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e1c:	4a3b      	ldr	r2, [pc, #236]	; (8000f0c <BSP_QSPI_Init+0xf8>)
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8000e20:	4839      	ldr	r0, [pc, #228]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e22:	f002 fbb5 	bl	8003590 <HAL_OSPI_DeInit>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e067      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8000e30:	f000 f990 	bl	8001154 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8000e34:	4b34      	ldr	r3, [pc, #208]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e4c:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8000e60:	2320      	movs	r3, #32
 8000e62:	e003      	b.n	8000e6c <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e70:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8000ea4:	4818      	ldr	r0, [pc, #96]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000ea6:	f002 fac9 	bl	800343c <HAL_OSPI_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e025      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8000eb4:	4814      	ldr	r0, [pc, #80]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000eb6:	f000 f98d 	bl	80011d4 <QSPI_ResetMemory>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e01d      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000ec8:	f000 fa72 	bl	80013b0 <QSPI_QuadMode>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e014      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000eda:	f000 fb15 	bl	8001508 <QSPI_HighPerfMode>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e00b      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <BSP_QSPI_Init+0xf4>)
 8000ef0:	f002 faa4 	bl	800343c <HAL_OSPI_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200001e8 	.word	0x200001e8
 8000f0c:	a0001000 	.word	0xa0001000

08000f10 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b098      	sub	sp, #96	; 0x60
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8000f24:	23eb      	movs	r3, #235	; 0xeb
 8000f26:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8000f38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8000f48:	23aa      	movs	r3, #170	; 0xaa
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8000f4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8000f52:	2300      	movs	r3, #0
 8000f54:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8000f5a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000f70:	2300      	movs	r3, #0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <BSP_QSPI_Read+0xa0>)
 8000f80:	f002 fb2d 	bl	80035de <HAL_OSPI_Command>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00b      	b.n	8000fa6 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <BSP_QSPI_Read+0xa0>)
 8000f96:	f002 fc16 	bl	80037c6 <HAL_OSPI_Receive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3760      	adds	r7, #96	; 0x60
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001e8 	.word	0x200001e8

08000fb4 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09c      	sub	sp, #112	; 0x70
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000fc8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000fca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d901      	bls.n	8000fd6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8000fea:	2338      	movs	r3, #56	; 0x38
 8000fec:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8000ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8001000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800100e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001020:	2300      	movs	r3, #0
 8001022:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8001028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800102a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_QSPI_Write+0x108>)
 800102e:	f000 f918 	bl	8001262 <QSPI_WriteEnable>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e03b      	b.n	80010b4 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4619      	mov	r1, r3
 8001046:	481d      	ldr	r0, [pc, #116]	; (80010bc <BSP_QSPI_Write+0x108>)
 8001048:	f002 fac9 	bl	80035de <HAL_OSPI_Command>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e02e      	b.n	80010b4 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001056:	f241 3288 	movw	r2, #5000	; 0x1388
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <BSP_QSPI_Write+0x108>)
 800105e:	f002 fb3f 	bl	80036e0 <HAL_OSPI_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e023      	b.n	80010b4 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800106c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <BSP_QSPI_Write+0x108>)
 8001072:	f000 f952 	bl	800131a <QSPI_AutoPollingMemReady>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e019      	b.n	80010b4 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001080:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001084:	4413      	add	r3, r2
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800108c:	4413      	add	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001096:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001098:	429a      	cmp	r2, r3
 800109a:	d203      	bcs.n	80010a4 <BSP_QSPI_Write+0xf0>
 800109c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800109e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	e001      	b.n	80010a8 <BSP_QSPI_Write+0xf4>
 80010a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80010aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80010ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3b8      	bcc.n	8001024 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3770      	adds	r7, #112	; 0x70
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001e8 	.word	0x200001e8

080010c0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b096      	sub	sp, #88	; 0x58
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80010d0:	23d8      	movs	r3, #216	; 0xd8
 80010d2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80010ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001104:	2300      	movs	r3, #0
 8001106:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <BSP_QSPI_Erase_Block+0x90>)
 800110a:	f000 f8aa 	bl	8001262 <QSPI_WriteEnable>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e017      	b.n	8001148 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4619      	mov	r1, r3
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <BSP_QSPI_Erase_Block+0x90>)
 8001124:	f002 fa5b 	bl	80035de <HAL_OSPI_Command>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00a      	b.n	8001148 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001132:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <BSP_QSPI_Erase_Block+0x90>)
 8001138:	f000 f8ef 	bl	800131a <QSPI_AutoPollingMemReady>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001e8 	.word	0x200001e8

08001154 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 800115c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6513      	str	r3, [r2, #80]	; 0x50
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001188:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <BSP_QSPI_MspInit+0x78>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80011a2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80011a6:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80011b4:	230a      	movs	r3, #10
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <BSP_QSPI_MspInit+0x7c>)
 80011c0:	f001 f870 	bl	80022a4 <HAL_GPIO_Init>
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001000 	.word	0x48001000

080011d4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	; 0x58
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80011e4:	2366      	movs	r3, #102	; 0x66
 80011e6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001208:	2300      	movs	r3, #0
 800120a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f002 f9e1 	bl	80035de <HAL_OSPI_Command>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e019      	b.n	800125a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001226:	2399      	movs	r3, #153	; 0x99
 8001228:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 f9d2 	bl	80035de <HAL_OSPI_Command>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e00a      	b.n	800125a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001244:	f241 3188 	movw	r1, #5000	; 0x1388
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f866 	bl	800131a <QSPI_AutoPollingMemReady>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3758      	adds	r7, #88	; 0x58
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b09c      	sub	sp, #112	; 0x70
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8001272:	2306      	movs	r3, #6
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001276:	2301      	movs	r3, #1
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800128a:	2300      	movs	r3, #0
 800128c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001296:	2300      	movs	r3, #0
 8001298:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f002 f99a 	bl	80035de <HAL_OSPI_Command>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e02e      	b.n	8001312 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80012b4:	2302      	movs	r3, #2
 80012b6:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80012c0:	2310      	movs	r3, #16
 80012c2:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80012c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c8:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 80012ca:	2305      	movs	r3, #5
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 80012ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4619      	mov	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f002 f979 	bl	80035de <HAL_OSPI_Command>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00d      	b.n	8001312 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f002 fb03 	bl	800390c <HAL_OSPI_AutoPolling>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3770      	adds	r7, #112	; 0x70
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b09c      	sub	sp, #112	; 0x70
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800132c:	2305      	movs	r3, #5
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001348:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800135a:	2300      	movs	r3, #0
 800135c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800136a:	2310      	movs	r3, #16
 800136c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800136e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001372:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f002 f92d 	bl	80035de <HAL_OSPI_Command>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00c      	b.n	80013a8 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f002 fab8 	bl	800390c <HAL_OSPI_AutoPolling>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3770      	adds	r7, #112	; 0x70
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b098      	sub	sp, #96	; 0x60
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80013c4:	2305      	movs	r3, #5
 80013c6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80013dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80013f2:	2300      	movs	r3, #0
 80013f4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f002 f8ec 	bl	80035de <HAL_OSPI_Command>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e077      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001410:	f107 030f 	add.w	r3, r7, #15
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f002 f9d3 	bl	80037c6 <HAL_OSPI_Receive>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06a      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff19 	bl	8001262 <QSPI_WriteEnable>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e062      	b.n	8001500 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e004      	b.n	8001456 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001452:	b2db      	uxtb	r3, r3
 8001454:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f002 f8ba 	bl	80035de <HAL_OSPI_Command>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e045      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001474:	f107 030f 	add.w	r3, r7, #15
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f002 f92e 	bl	80036e0 <HAL_OSPI_Transmit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e038      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800148e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff41 	bl	800131a <QSPI_AutoPollingMemReady>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e02e      	b.n	8001500 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80014a2:	2305      	movs	r3, #5
 80014a4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f002 f894 	bl	80035de <HAL_OSPI_Command>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e01f      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014c0:	f107 030f 	add.w	r3, r7, #15
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f002 f97b 	bl	80037c6 <HAL_OSPI_Receive>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e012      	b.n	8001500 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <QSPI_QuadMode+0x13a>
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d007      	beq.n	80014fa <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3760      	adds	r7, #96	; 0x60
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b098      	sub	sp, #96	; 0x60
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800151c:	2305      	movs	r3, #5
 800151e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800154a:	2300      	movs	r3, #0
 800154c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f002 f840 	bl	80035de <HAL_OSPI_Command>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e09a      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f002 f927 	bl	80037c6 <HAL_OSPI_Receive>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e08d      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001582:	2315      	movs	r3, #21
 8001584:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001586:	2302      	movs	r3, #2
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f002 f822 	bl	80035de <HAL_OSPI_Command>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e07c      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	3301      	adds	r3, #1
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f002 f908 	bl	80037c6 <HAL_OSPI_Receive>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e06e      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe4e 	bl	8001262 <QSPI_WriteEnable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e066      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73bb      	strb	r3, [r7, #14]
 80015e0:	e004      	b.n	80015ec <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80015f0:	2303      	movs	r3, #3
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 ffed 	bl	80035de <HAL_OSPI_Command>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e047      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f002 f861 	bl	80036e0 <HAL_OSPI_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e03a      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001628:	f241 3188 	movw	r1, #5000	; 0x1388
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe74 	bl	800131a <QSPI_AutoPollingMemReady>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e030      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800163c:	2315      	movs	r3, #21
 800163e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	f241 3288 	movw	r2, #5000	; 0x1388
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f001 ffc5 	bl	80035de <HAL_OSPI_Command>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e01f      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f002 f8ac 	bl	80037c6 <HAL_OSPI_Receive>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e012      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001678:	7b7b      	ldrb	r3, [r7, #13]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <QSPI_HighPerfMode+0x180>
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d007      	beq.n	8001698 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001688:	7b7b      	ldrb	r3, [r7, #13]
 800168a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3760      	adds	r7, #96	; 0x60
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <BSP_TSENSOR_Init+0x30>)
 80016b4:	4a09      	ldr	r2, [pc, #36]	; (80016dc <BSP_TSENSOR_Init+0x34>)
 80016b6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80016b8:	f7ff faf0 	bl	8000c9c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <BSP_TSENSOR_Init+0x30>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	20be      	movs	r0, #190	; 0xbe
 80016c6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000238 	.word	0x20000238
 80016dc:	20000010 	.word	0x20000010

080016e0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <BSP_TSENSOR_ReadTemp+0x18>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	20be      	movs	r0, #190	; 0xbe
 80016ec:	4798      	blx	r3
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000238 	.word	0x20000238

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	; 0x60
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x44>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0ae      	sub	sp, #184	; 0xb8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2294      	movs	r2, #148	; 0x94
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fe1d 	bl	80063a4 <memset>
  if(hi2c->Instance==I2C2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_I2C_MspInit+0xb0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13b      	bne.n	80017ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fa8f 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800178c:	f7ff f991 	bl	8000ab2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b0:	2312      	movs	r3, #18
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017c2:	2304      	movs	r3, #4
 80017c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017cc:	4619      	mov	r1, r3
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <HAL_I2C_MspInit+0xb8>)
 80017d0:	f000 fd68 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 80017da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017de:	6593      	str	r3, [r2, #88]	; 0x58
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_I2C_MspInit+0xb4>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	37b8      	adds	r7, #184	; 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40005800 	.word	0x40005800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000400 	.word	0x48000400

08001800 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_I2C_MspDeInit+0x3c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10f      	bne.n	8001832 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_I2C_MspDeInit+0x40>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_I2C_MspDeInit+0x40>)
 8001818:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <HAL_I2C_MspDeInit+0x44>)
 8001824:	f000 fed0 	bl	80025c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_I2C_MspDeInit+0x44>)
 800182e:	f000 fecb 	bl	80025c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005800 	.word	0x40005800
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400

08001848 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0b0      	sub	sp, #192	; 0xc0
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	2294      	movs	r2, #148	; 0x94
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fd9b 	bl	80063a4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_OSPI_MspInit+0xcc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d149      	bne.n	800190c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800187c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fa0b 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001894:	f7ff f90d 	bl	8000ab2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 800189e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6513      	str	r3, [r2, #80]	; 0x50
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_OSPI_MspInit+0xd0>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80018e0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80018e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80018fa:	230a      	movs	r3, #10
 80018fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001900:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001904:	4619      	mov	r1, r3
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_OSPI_MspInit+0xd4>)
 8001908:	f000 fccc 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	37c0      	adds	r7, #192	; 0xc0
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	a0001000 	.word	0xa0001000
 8001918:	40021000 	.word	0x40021000
 800191c:	48001000 	.word	0x48001000

08001920 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_OSPI_MspDeInit+0x3c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d110      	bne.n	8001954 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_OSPI_MspDeInit+0x40>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_OSPI_MspDeInit+0x40>)
 8001938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_OSPI_MspDeInit+0x40>)
 8001940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_OSPI_MspDeInit+0x40>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800194a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_OSPI_MspDeInit+0x44>)
 8001950:	f000 fe3a 	bl	80025c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	a0001000 	.word	0xa0001000
 8001960:	40021000 	.word	0x40021000
 8001964:	48001000 	.word	0x48001000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ae      	sub	sp, #184	; 0xb8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2294      	movs	r2, #148	; 0x94
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fd0b 	bl	80063a4 <memset>
  if(huart->Instance==USART1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_UART_MspInit+0xb0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d13a      	bne.n	8001a0e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f97d 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff f87f 	bl	8000ab2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	6613      	str	r3, [r2, #96]	; 0x60
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_UART_MspInit+0xb4>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspInit+0xb8>)
 8001a0a:	f000 fc4b 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	37b8      	adds	r7, #184	; 0xb8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48000400 	.word	0x48000400

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 fae6 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	; (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f004 fc73 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7fe fd13 	bl	80004f8 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001ae0:	08006494 	.word	0x08006494
  ldr r2, =_sbss
 8001ae4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001ae8:	20000240 	.word	0x20000240

08001aec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_IRQHandler>

08001aee <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2120      	movs	r1, #32
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f8f0 	bl	8000ce4 <SENSOR_IO_Read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	2120      	movs	r1, #32
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f8b9 	bl	8000cb0 <SENSOR_IO_Write>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001b54:	f7ff f8a2 	bl	8000c9c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8c0 	bl	8000ce4 <SENSOR_IO_Read>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	f107 020c 	add.w	r2, r7, #12
 8001b86:	2302      	movs	r3, #2
 8001b88:	21b0      	movs	r1, #176	; 0xb0
 8001b8a:	f7ff f8c9 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001b8e:	7b3b      	ldrb	r3, [r7, #12]
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001b96:	7b7b      	ldrb	r3, [r7, #13]
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	b2d8      	uxtb	r0, r3
 8001ba2:	f107 020c 	add.w	r2, r7, #12
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	21b6      	movs	r1, #182	; 0xb6
 8001baa:	f7ff f8b9 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001bae:	7b7b      	ldrb	r3, [r7, #13]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	f107 020c 	add.w	r2, r7, #12
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	21ba      	movs	r1, #186	; 0xba
 8001bc8:	f7ff f8aa 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	7b3b      	ldrb	r3, [r7, #12]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	b2d8      	uxtb	r0, r3
 8001bde:	f107 020c 	add.w	r2, r7, #12
 8001be2:	2302      	movs	r3, #2
 8001be4:	21a8      	movs	r1, #168	; 0xa8
 8001be6:	f7ff f89b 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001bea:	7b7b      	ldrb	r3, [r7, #13]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	7b3b      	ldrb	r3, [r7, #12]
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001bf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c20:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c46:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c5e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ca4 <HTS221_H_ReadHumidity+0x130>
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd01      	ble.n	8001c70 <HTS221_H_ReadHumidity+0xfc>
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HTS221_H_ReadHumidity+0x134>)
 8001c6e:	e00a      	b.n	8001c86 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	d502      	bpl.n	8001c84 <HTS221_H_ReadHumidity+0x110>
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e000      	b.n	8001c86 <HTS221_H_ReadHumidity+0x112>
 8001c84:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001c86:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c94:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	447a0000 	.word	0x447a0000
 8001ca8:	447a0000 	.word	0x447a0000

08001cac <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f810 	bl	8000ce4 <SENSOR_IO_Read>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ffd9 	bl	8000cb0 <SENSOR_IO_Write>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b088      	sub	sp, #32
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	b2d8      	uxtb	r0, r3
 8001d14:	f107 0208 	add.w	r2, r7, #8
 8001d18:	2302      	movs	r3, #2
 8001d1a:	21b2      	movs	r1, #178	; 0xb2
 8001d1c:	f7ff f800 	bl	8000d20 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2135      	movs	r1, #53	; 0x35
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe ffdc 	bl	8000ce4 <SENSOR_IO_Read>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	7a3b      	ldrb	r3, [r7, #8]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001d44:	7ffb      	ldrb	r3, [r7, #31]
 8001d46:	019b      	lsls	r3, r3, #6
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001d58:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d5c:	10db      	asrs	r3, r3, #3
 8001d5e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001d60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d64:	10db      	asrs	r3, r3, #3
 8001d66:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	b2d8      	uxtb	r0, r3
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	2304      	movs	r3, #4
 8001d72:	21bc      	movs	r1, #188	; 0xbc
 8001d74:	f7fe ffd4 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	7abb      	ldrb	r3, [r7, #10]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	b2d8      	uxtb	r0, r3
 8001d98:	f107 0208 	add.w	r2, r7, #8
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	21aa      	movs	r1, #170	; 0xaa
 8001da0:	f7fe ffbe 	bl	8000d20 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001da4:	7a7b      	ldrb	r3, [r7, #9]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	7a3b      	ldrb	r3, [r7, #8]
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001db2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001db6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dc8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001dde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	ee07 3a90 	vmov	s15, r3
}
 8001e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f879 	bl	8001f18 <LPS22HB_Init>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001e3c:	f7fe ff2e 	bl	8000c9c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	210f      	movs	r1, #15
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff4c 	bl	8000ce4 <SENSOR_IO_Read>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	74fb      	strb	r3, [r7, #19]
 8001e6e:	e013      	b.n	8001e98 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	7cfc      	ldrb	r4, [r7, #19]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe ff30 	bl	8000ce4 <SENSOR_IO_Read>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	f104 0318 	add.w	r3, r4, #24
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001e92:	7cfb      	ldrb	r3, [r7, #19]
 8001e94:	3301      	adds	r3, #1
 8001e96:	74fb      	strb	r3, [r7, #19]
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d9e8      	bls.n	8001e70 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	74fb      	strb	r3, [r7, #19]
 8001ea2:	e00f      	b.n	8001ec4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	443b      	add	r3, r7
 8001eaa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	74fb      	strb	r3, [r7, #19]
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d9ec      	bls.n	8001ea4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eda:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2264      	movs	r2, #100	; 0x64
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da01      	bge.n	8001ef0 <LPS22HB_P_ReadPressure+0x94>
 8001eec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001ef0:	131b      	asrs	r3, r3, #12
 8001ef2:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001f14 <LPS22HB_P_ReadPressure+0xb8>
 8001f02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f06:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	42c80000 	.word	0x42c80000

08001f18 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	211a      	movs	r1, #26
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fedb 	bl	8000ce4 <SENSOR_IO_Read>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	211a      	movs	r1, #26
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe feb0 	bl	8000cb0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2110      	movs	r1, #16
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fec4 	bl	8000ce4 <SENSOR_IO_Read>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f023 0302 	bic.w	r3, r3, #2
 8001f76:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	2110      	movs	r1, #16
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fe91 	bl	8000cb0 <SENSOR_IO_Write>
}  
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f93d 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f80e 	bl	8001fc8 <HAL_InitTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	e001      	b.n	8001fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb8:	f7ff fba0 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_InitTick+0x6c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_InitTick+0x70>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_InitTick+0x6c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f949 	bl	800228a <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d809      	bhi.n	8002018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 f913 	bl	8002236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_InitTick+0x74>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e007      	b.n	8002028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e004      	b.n	8002028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e001      	b.n	8002028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000030 	.word	0x20000030
 8002038:	20000000 	.word	0x20000000
 800203c:	2000002c 	.word	0x2000002c

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000030 	.word	0x20000030
 8002064:	2000023c 	.word	0x2000023c

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000023c 	.word	0x2000023c

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e166      	b.n	8002582 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8158 	beq.w	800257c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d017      	beq.n	8002382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80b2 	beq.w	800257c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6613      	str	r3, [r2, #96]	; 0x60
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 8002426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002430:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_GPIO_Init+0x300>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245a:	d02b      	beq.n	80024b4 <HAL_GPIO_Init+0x210>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x304>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d025      	beq.n	80024b0 <HAL_GPIO_Init+0x20c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x308>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01f      	beq.n	80024ac <HAL_GPIO_Init+0x208>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d019      	beq.n	80024a8 <HAL_GPIO_Init+0x204>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_GPIO_Init+0x200>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x314>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00d      	beq.n	80024a0 <HAL_GPIO_Init+0x1fc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x318>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x1f8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x31c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_GPIO_Init+0x1f4>
 8002494:	2307      	movs	r3, #7
 8002496:	e00e      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 8002498:	2308      	movs	r3, #8
 800249a:	e00c      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 800249c:	2306      	movs	r3, #6
 800249e:	e00a      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_GPIO_Init+0x300>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x320>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f8:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x320>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002522:	4a28      	ldr	r2, [pc, #160]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae91 	bne.w	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	48001400 	.word	0x48001400
 80025bc:	48001800 	.word	0x48001800
 80025c0:	48001c00 	.word	0x48001c00
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025d6:	e0c9      	b.n	800276c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80bc 	beq.w	8002766 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <HAL_GPIO_DeInit+0x1c0>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002616:	d02b      	beq.n	8002670 <HAL_GPIO_DeInit+0xa8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a5c      	ldr	r2, [pc, #368]	; (800278c <HAL_GPIO_DeInit+0x1c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d025      	beq.n	800266c <HAL_GPIO_DeInit+0xa4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <HAL_GPIO_DeInit+0x1c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01f      	beq.n	8002668 <HAL_GPIO_DeInit+0xa0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a5a      	ldr	r2, [pc, #360]	; (8002794 <HAL_GPIO_DeInit+0x1cc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d019      	beq.n	8002664 <HAL_GPIO_DeInit+0x9c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a59      	ldr	r2, [pc, #356]	; (8002798 <HAL_GPIO_DeInit+0x1d0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_DeInit+0x98>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_GPIO_DeInit+0x1d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_DeInit+0x94>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_GPIO_DeInit+0x1d8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_DeInit+0x90>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <HAL_GPIO_DeInit+0x1dc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_DeInit+0x8c>
 8002650:	2307      	movs	r3, #7
 8002652:	e00e      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002654:	2308      	movs	r3, #8
 8002656:	e00c      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002658:	2306      	movs	r3, #6
 800265a:	e00a      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 800265c:	2305      	movs	r3, #5
 800265e:	e008      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002660:	2304      	movs	r3, #4
 8002662:	e006      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002664:	2303      	movs	r3, #3
 8002666:	e004      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002668:	2302      	movs	r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_GPIO_DeInit+0xaa>
 8002670:	2300      	movs	r3, #0
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	f002 0203 	and.w	r2, r2, #3
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	4093      	lsls	r3, r2
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	429a      	cmp	r2, r3
 8002680:	d132      	bne.n	80026e8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	4947      	ldr	r1, [pc, #284]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 800268c:	4013      	ands	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	4943      	ldr	r1, [pc, #268]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 800269a:	4013      	ands	r3, r2
 800269c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4940      	ldr	r1, [pc, #256]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80026ac:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	493c      	ldr	r1, [pc, #240]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80026ca:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <HAL_GPIO_DeInit+0x1c0>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43da      	mvns	r2, r3
 80026da:	482b      	ldr	r0, [pc, #172]	; (8002788 <HAL_GPIO_DeInit+0x1c0>)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	400a      	ands	r2, r1
 80026e2:	3302      	adds	r3, #2
 80026e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2103      	movs	r1, #3
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	08d2      	lsrs	r2, r2, #3
 800271c:	4019      	ands	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2103      	movs	r1, #3
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	2101      	movs	r1, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	401a      	ands	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2103      	movs	r1, #3
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f af2f 	bne.w	80025d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40010000 	.word	0x40010000
 800278c:	48000400 	.word	0x48000400
 8002790:	48000800 	.word	0x48000800
 8002794:	48000c00 	.word	0x48000c00
 8002798:	48001000 	.word	0x48001000
 800279c:	48001400 	.word	0x48001400
 80027a0:	48001800 	.word	0x48001800
 80027a4:	48001c00 	.word	0x48001c00
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e08d      	b.n	80028da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe ffb6 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e006      	b.n	8002834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d108      	bne.n	800284e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	e007      	b.n	800285e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69d9      	ldr	r1, [r3, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e021      	b.n	8002938 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe ff77 	bl	8001800 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	f040 80f9 	bne.w	8002b5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_I2C_Mem_Write+0x34>
 800296e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0ed      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_I2C_Mem_Write+0x4e>
 800298a:	2302      	movs	r3, #2
 800298c:	e0e6      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002996:	f7ff fb67 	bl	8002068 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2319      	movs	r3, #25
 80029a2:	2201      	movs	r2, #1
 80029a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fac3 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0d1      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e0:	88f8      	ldrh	r0, [r7, #6]
 80029e2:	893a      	ldrh	r2, [r7, #8]
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4603      	mov	r3, r0
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f9d3 	bl	8002d9c <I2C_RequestMemoryWrite>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0a9      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d90e      	bls.n	8002a30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fc3d 	bl	80032a8 <I2C_TransferConfig>
 8002a2e:	e00f      	b.n	8002a50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fc2c 	bl	80032a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fabc 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e07b      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d034      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x1c8>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d130      	bne.n	8002b08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	2200      	movs	r2, #0
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fa3f 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e04d      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2bff      	cmp	r3, #255	; 0xff
 8002ac8:	d90e      	bls.n	8002ae8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	8979      	ldrh	r1, [r7, #10]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fbe1 	bl	80032a8 <I2C_TransferConfig>
 8002ae6:	e00f      	b.n	8002b08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fbd0 	bl	80032a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d19e      	bne.n	8002a50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 faa2 	bl	8003060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e01a      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_I2C_Mem_Write+0x224>)
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 80fd 	bne.w	8002d8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x34>
 8002b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0f1      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x4e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0ea      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bbe:	f7ff fa53 	bl	8002068 <HAL_GetTick>
 8002bc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9af 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d5      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2222      	movs	r2, #34	; 0x22
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c08:	88f8      	ldrh	r0, [r7, #6]
 8002c0a:	893a      	ldrh	r2, [r7, #8]
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4603      	mov	r3, r0
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f913 	bl	8002e44 <I2C_RequestMemoryRead>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0ad      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2bff      	cmp	r3, #255	; 0xff
 8002c38:	d90e      	bls.n	8002c58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <HAL_I2C_Mem_Read+0x22c>)
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb29 	bl	80032a8 <I2C_TransferConfig>
 8002c56:	e00f      	b.n	8002c78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_I2C_Mem_Read+0x22c>)
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fb18 	bl	80032a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2104      	movs	r1, #4
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f956 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07c      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d034      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x1d0>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d130      	bne.n	8002d38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f927 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e04d      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	d90e      	bls.n	8002d18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fac9 	bl	80032a8 <I2C_TransferConfig>
 8002d16:	e00f      	b.n	8002d38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fab8 	bl	80032a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d19a      	bne.n	8002c78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f98a 	bl	8003060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e01a      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_I2C_Mem_Read+0x230>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	80002400 	.word	0x80002400
 8002d98:	fe00e800 	.word	0xfe00e800

08002d9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	817b      	strh	r3, [r7, #10]
 8002dae:	460b      	mov	r3, r1
 8002db0:	813b      	strh	r3, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <I2C_RequestMemoryWrite+0xa4>)
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa6f 	bl	80032a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	69b9      	ldr	r1, [r7, #24]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f8ff 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e02c      	b.n	8002e38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28
 8002dee:	e015      	b.n	8002e1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8e5 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e012      	b.n	8002e38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e12:	893b      	ldrh	r3, [r7, #8]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f884 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	80002000 	.word	0x80002000

08002e44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <I2C_RequestMemoryRead+0xa4>)
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fa1c 	bl	80032a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8ac 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e02c      	b.n	8002ede <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8a:	893b      	ldrh	r3, [r7, #8]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
 8002e94:	e015      	b.n	8002ec2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f892 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e012      	b.n	8002ede <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f831 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	80002000 	.word	0x80002000

08002eec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d103      	bne.n	8002f0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d007      	beq.n	8002f28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	619a      	str	r2, [r3, #24]
  }
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	e031      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d02d      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7ff f88b 	bl	8002068 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d122      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d113      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d0be      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fde:	e033      	b.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f87f 	bl	80030e8 <I2C_IsErrorOccurred>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e031      	b.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d025      	beq.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffc:	f7ff f834 	bl	8002068 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	d302      	bcc.n	8003012 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11a      	bne.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d013      	beq.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d1c4      	bne.n	8002fe0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306c:	e02f      	b.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f838 	bl	80030e8 <I2C_IsErrorOccurred>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e02d      	b.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fff1 	bl	8002068 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11a      	bne.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d013      	beq.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1c8      	bne.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d068      	beq.n	80031e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2210      	movs	r2, #16
 800311a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800311c:	e049      	b.n	80031b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d045      	beq.n	80031b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe ff9f 	bl	8002068 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_IsErrorOccurred+0x54>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13a      	bne.n	80031b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003146:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800314e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d121      	bne.n	80031a4 <I2C_IsErrorOccurred+0xbc>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003166:	d01d      	beq.n	80031a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b20      	cmp	r3, #32
 800316c:	d01a      	beq.n	80031a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800317e:	f7fe ff73 	bl	8002068 <HAL_GetTick>
 8003182:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	e00e      	b.n	80031a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003186:	f7fe ff6f 	bl	8002068 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b19      	cmp	r3, #25
 8003192:	d907      	bls.n	80031a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f043 0320 	orr.w	r3, r3, #32
 800319a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031a2:	e006      	b.n	80031b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d1e9      	bne.n	8003186 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d003      	beq.n	80031c8 <I2C_IsErrorOccurred+0xe0>
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0aa      	beq.n	800311e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01c      	beq.n	8003296 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fe45 	bl	8002eec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <I2C_IsErrorOccurred+0x1bc>)
 800326e:	400b      	ands	r3, r1
 8003270:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800329a:	4618      	mov	r0, r3
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	fe00e800 	.word	0xfe00e800

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	817b      	strh	r3, [r7, #10]
 80032b6:	4613      	mov	r3, r2
 80032b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c0:	7a7b      	ldrb	r3, [r7, #9]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	0d5b      	lsrs	r3, r3, #21
 80032e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <I2C_TransferConfig+0x60>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	43db      	mvns	r3, r3
 80032ec:	ea02 0103 	and.w	r1, r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	03ff63ff 	.word	0x03ff63ff

0800330c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	d138      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800332c:	2302      	movs	r3, #2
 800332e:	e032      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d139      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e033      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2224      	movs	r2, #36	; 0x24
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7fe fe0e 	bl	8002068 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e092      	b.n	8003580 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 808b 	bne.w	8003580 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f9ec 	bl	8001848 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003470:	f241 3188 	movw	r1, #5000	; 0x1388
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fad0 	bl	8003a1a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_OSPI_Init+0x150>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d1      	ldr	r1, [r2, #12]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6912      	ldr	r2, [r2, #16]
 800348c:	3a01      	subs	r2, #1
 800348e:	0412      	lsls	r2, r2, #16
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6952      	ldr	r2, [r2, #20]
 8003496:	3a01      	subs	r2, #1
 8003498:	0212      	lsls	r2, r2, #8
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	69d2      	ldr	r2, [r2, #28]
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0412      	lsls	r2, r2, #16
 80034ba:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	2120      	movs	r1, #32
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 faa8 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d146      	bne.n	8003580 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	1e5a      	subs	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003528:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d107      	bne.n	8003568 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0202 	orr.w	r2, r2, #2
 8003566:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003570:	d103      	bne.n	800357a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
 8003578:	e002      	b.n	8003580 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	f8e0f8f4 	.word	0xf8e0f8f4

08003590 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e015      	b.n	80035d4 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0202 	bic.w	r2, r2, #2
 80035c6:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe f9a9 	bl	8001920 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80035ea:	f7fe fd3d 	bl	8002068 <HAL_GetTick>
 80035ee:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d104      	bne.n	800360c <HAL_OSPI_Command+0x2e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360a:	d10d      	bne.n	8003628 <HAL_OSPI_Command+0x4a>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b14      	cmp	r3, #20
 8003610:	d103      	bne.n	800361a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d006      	beq.n	8003628 <HAL_OSPI_Command+0x4a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b24      	cmp	r3, #36	; 0x24
 800361e:	d153      	bne.n	80036c8 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d14f      	bne.n	80036c8 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2200      	movs	r2, #0
 8003630:	2120      	movs	r1, #32
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa00 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d148      	bne.n	80036d4 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fa2c 	bl	8003aa8 <OSPI_ConfigCmd>
 8003650:	4603      	mov	r3, r0
 8003652:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003654:	7ffb      	ldrb	r3, [r7, #31]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13c      	bne.n	80036d4 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10e      	bne.n	8003680 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2201      	movs	r2, #1
 800366a:	2102      	movs	r1, #2
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f9e3 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2202      	movs	r2, #2
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800367e:	e029      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2204      	movs	r2, #4
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800368e:	e021      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10b      	bne.n	80036b0 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	2b24      	cmp	r3, #36	; 0x24
 800369e:	d103      	bne.n	80036a8 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2204      	movs	r2, #4
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80036a6:	e015      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2214      	movs	r2, #20
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80036ae:	e011      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	2b14      	cmp	r3, #20
 80036b6:	d103      	bne.n	80036c0 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2204      	movs	r2, #4
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80036be:	e009      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80036c6:	e005      	b.n	80036d4 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2210      	movs	r2, #16
 80036d0:	649a      	str	r2, [r3, #72]	; 0x48
 80036d2:	e000      	b.n	80036d6 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 80036d4:	bf00      	nop
  }

  /* Return function status */
  return status;
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7fe fcbc 	bl	8002068 <HAL_GetTick>
 80036f0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3350      	adds	r3, #80	; 0x50
 80036f8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2208      	movs	r2, #8
 8003708:	649a      	str	r2, [r3, #72]	; 0x48
 800370a:	e057      	b.n	80037bc <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	2b04      	cmp	r3, #4
 8003712:	d14e      	bne.n	80037b2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800373c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2201      	movs	r2, #1
 8003746:	2104      	movs	r1, #4
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f975 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003752:	7ffb      	ldrb	r3, [r7, #31]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1df      	bne.n	800373e <HAL_OSPI_Transmit+0x5e>
 800377e:	e000      	b.n	8003782 <HAL_OSPI_Transmit+0xa2>
          break;
 8003780:	bf00      	nop

      if (status == HAL_OK)
 8003782:	7ffb      	ldrb	r3, [r7, #31]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d119      	bne.n	80037bc <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2201      	movs	r2, #1
 8003790:	2102      	movs	r1, #2
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f950 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2202      	movs	r2, #2
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
 80037b0:	e004      	b.n	80037bc <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2210      	movs	r2, #16
 80037ba:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08c      	sub	sp, #48	; 0x30
 80037ca:	af02      	add	r7, sp, #8
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037d2:	f7fe fc49 	bl	8002068 <HAL_GetTick>
 80037d6:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3350      	adds	r3, #80	; 0x50
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80037f0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2208      	movs	r2, #8
 8003802:	649a      	str	r2, [r3, #72]	; 0x48
 8003804:	e07c      	b.n	8003900 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	2b04      	cmp	r3, #4
 800380c:	d172      	bne.n	80038f4 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800383a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003844:	d104      	bne.n	8003850 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	649a      	str	r2, [r3, #72]	; 0x48
 800384e:	e011      	b.n	8003874 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	649a      	str	r2, [r3, #72]	; 0x48
 8003868:	e004      	b.n	8003874 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2201      	movs	r2, #1
 800387c:	2106      	movs	r1, #6
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8da 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1dc      	bne.n	8003874 <HAL_OSPI_Receive+0xae>
 80038ba:	e000      	b.n	80038be <HAL_OSPI_Receive+0xf8>
          break;
 80038bc:	bf00      	nop

      if (status == HAL_OK)
 80038be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11c      	bne.n	8003900 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2201      	movs	r2, #1
 80038ce:	2102      	movs	r1, #2
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f8b1 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2202      	movs	r2, #2
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2202      	movs	r2, #2
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
 80038f2:	e005      	b.n	8003900 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2210      	movs	r2, #16
 80038fe:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003904:	4618      	mov	r0, r3
 8003906:	3728      	adds	r7, #40	; 0x28
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7fe fba6 	bl	8002068 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800392e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	2b04      	cmp	r3, #4
 8003936:	d164      	bne.n	8003a02 <HAL_OSPI_AutoPolling+0xf6>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003940:	d15f      	bne.n	8003a02 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2200      	movs	r2, #0
 800394a:	2120      	movs	r1, #32
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f873 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d158      	bne.n	8003a0e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	6912      	ldr	r2, [r2, #16]
 800397c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	430b      	orrs	r3, r1
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800399e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a8:	d104      	bne.n	80039b4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	649a      	str	r2, [r3, #72]	; 0x48
 80039b2:	e011      	b.n	80039d8 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	649a      	str	r2, [r3, #72]	; 0x48
 80039cc:	e004      	b.n	80039d8 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2201      	movs	r2, #1
 80039e0:	2108      	movs	r1, #8
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f828 	bl	8003a38 <OSPI_WaitFlagStateUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2208      	movs	r2, #8
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2202      	movs	r2, #2
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a00:	e005      	b.n	8003a0e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	649a      	str	r2, [r3, #72]	; 0x48
 8003a0c:	e000      	b.n	8003a10 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003a0e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a48:	e01a      	b.n	8003a80 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d016      	beq.n	8003a80 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe fb09 	bl	8002068 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e00e      	b.n	8003a9e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1d6      	bne.n	8003a4a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d114      	bne.n	8003b16 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003af4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003afe:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003b08:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e013      	b.n	8003b3e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b1e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b28:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b32:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	431a      	orrs	r2, r3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	4319      	orrs	r1, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	430b      	orrs	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 021f 	bic.w	r2, r3, #31
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	431a      	orrs	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8099 	beq.w	8003ce4 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d055      	beq.n	8003c66 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01e      	beq.n	8003c00 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <OSPI_ConfigCmd+0x2c0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	68d1      	ldr	r1, [r2, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	6952      	ldr	r2, [r2, #20]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	6912      	ldr	r2, [r2, #16]
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	69d2      	ldr	r2, [r2, #28]
 8003bde:	4311      	orrs	r1, r2
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be4:	4311      	orrs	r1, r2
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	6a12      	ldr	r2, [r2, #32]
 8003bea:	4311      	orrs	r1, r2
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf0:	4311      	orrs	r1, r2
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e028      	b.n	8003c52 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68d1      	ldr	r1, [r2, #12]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6952      	ldr	r2, [r2, #20]
 8003c14:	4311      	orrs	r1, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6912      	ldr	r2, [r2, #16]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	69d2      	ldr	r2, [r2, #28]
 8003c20:	4311      	orrs	r1, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c26:	4311      	orrs	r1, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	6a12      	ldr	r2, [r2, #32]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3c:	d109      	bne.n	8003c52 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d105      	bne.n	8003c52 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6992      	ldr	r2, [r2, #24]
 8003c62:	649a      	str	r2, [r3, #72]	; 0x48
 8003c64:	e078      	b.n	8003d58 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003c76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68d1      	ldr	r1, [r2, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	6952      	ldr	r2, [r2, #20]
 8003c82:	4311      	orrs	r1, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6912      	ldr	r2, [r2, #16]
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c94:	430a      	orrs	r2, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e01d      	b.n	8003cda <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68d9      	ldr	r1, [r3, #12]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4319      	orrs	r1, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc4:	d109      	bne.n	8003cda <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d105      	bne.n	8003cda <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e039      	b.n	8003d58 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d030      	beq.n	8003d4e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003cfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	69d1      	ldr	r1, [r2, #28]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d08:	4311      	orrs	r1, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	6a12      	ldr	r2, [r2, #32]
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d14:	4311      	orrs	r1, r2
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e00e      	b.n	8003d42 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	4319      	orrs	r1, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6992      	ldr	r2, [r2, #24]
 8003d4a:	649a      	str	r2, [r3, #72]	; 0x48
 8003d4c:	e004      	b.n	8003d58 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2208      	movs	r2, #8
 8003d56:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	f0ffc0c0 	.word	0xf0ffc0c0

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d102      	bne.n	8003d84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d82:	e00b      	b.n	8003d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d92:	d102      	bne.n	8003d9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d98:	e000      	b.n	8003d9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d141      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d131      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc8:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dce:	4a46      	ldr	r2, [pc, #280]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de0:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2232      	movs	r2, #50	; 0x32
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	4a3f      	ldr	r2, [pc, #252]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	0c9b      	lsrs	r3, r3, #18
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfe:	e002      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d102      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f2      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d158      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e057      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e3c:	e04d      	b.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d141      	bne.n	8003eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d131      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2232      	movs	r2, #50	; 0x32
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	0c9b      	lsrs	r3, r3, #18
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8a:	e002      	b.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d102      	bne.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f2      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d112      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e011      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ec8:	e007      	b.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	431bde83 	.word	0x431bde83

08003ef4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f000 bc08 	b.w	8004718 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f08:	4b96      	ldr	r3, [pc, #600]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f12:	4b94      	ldr	r3, [pc, #592]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80e4 	beq.w	80040f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4c>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	f040 808b 	bne.w	800404e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 8087 	bne.w	800404e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f40:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_OscConfig+0x64>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e3df      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_RCC_OscConfig+0x7e>
 8003f68:	4b7e      	ldr	r3, [pc, #504]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	e005      	b.n	8003f7e <HAL_RCC_OscConfig+0x8a>
 8003f72:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d223      	bcs.n	8003fca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fdcc 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e3c0      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f96:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a72      	ldr	r2, [pc, #456]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f043 0308 	orr.w	r3, r3, #8
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b70      	ldr	r3, [pc, #448]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	496d      	ldr	r1, [pc, #436]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb4:	4b6b      	ldr	r3, [pc, #428]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	4968      	ldr	r1, [pc, #416]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	e025      	b.n	8004016 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fca:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a65      	ldr	r2, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4960      	ldr	r1, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	495b      	ldr	r1, [pc, #364]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd8c 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e380      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004016:	f000 fcc1 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b51      	ldr	r3, [pc, #324]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	4950      	ldr	r1, [pc, #320]	; (8004168 <HAL_RCC_OscConfig+0x274>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a4e      	ldr	r2, [pc, #312]	; (800416c <HAL_RCC_OscConfig+0x278>)
 8004034:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004036:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <HAL_RCC_OscConfig+0x27c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd ffc4 	bl	8001fc8 <HAL_InitTick>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d052      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	e364      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d032      	beq.n	80040bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004056:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004062:	f7fe f801 	bl	8002068 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800406a:	f7fd fffd 	bl	8002068 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e34d      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a35      	ldr	r2, [pc, #212]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800408e:	f043 0308 	orr.w	r3, r3, #8
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4930      	ldr	r1, [pc, #192]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	492b      	ldr	r1, [pc, #172]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
 80040ba:	e01a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a28      	ldr	r2, [pc, #160]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c8:	f7fd ffce 	bl	8002068 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d0:	f7fd ffca 	bl	8002068 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e31a      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x1dc>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d073      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x21c>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d10e      	bne.n	8004128 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d063      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2f0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15f      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e2f7      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x24c>
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e025      	b.n	800418c <HAL_RCC_OscConfig+0x298>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004148:	d114      	bne.n	8004174 <HAL_RCC_OscConfig+0x280>
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a02      	ldr	r2, [pc, #8]	; (8004164 <HAL_RCC_OscConfig+0x270>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e013      	b.n	800418c <HAL_RCC_OscConfig+0x298>
 8004164:	40021000 	.word	0x40021000
 8004168:	08006414 	.word	0x08006414
 800416c:	20000000 	.word	0x20000000
 8004170:	2000002c 	.word	0x2000002c
 8004174:	4ba0      	ldr	r3, [pc, #640]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a9f      	ldr	r2, [pc, #636]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b9d      	ldr	r3, [pc, #628]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a9c      	ldr	r2, [pc, #624]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd ff68 	bl	8002068 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419c:	f7fd ff64 	bl	8002068 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e2b4      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ae:	4b92      	ldr	r3, [pc, #584]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x2a8>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd ff54 	bl	8002068 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd ff50 	bl	8002068 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e2a0      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d6:	4b88      	ldr	r3, [pc, #544]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2d0>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d060      	beq.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_OscConfig+0x310>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d119      	bne.n	8004232 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d116      	bne.n	8004232 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004204:	4b7c      	ldr	r3, [pc, #496]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_OscConfig+0x328>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e27d      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	4973      	ldr	r1, [pc, #460]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004230:	e040      	b.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d023      	beq.n	8004282 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423a:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6e      	ldr	r2, [pc, #440]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd ff0f 	bl	8002068 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd ff0b 	bl	8002068 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e25b      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004260:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b62      	ldr	r3, [pc, #392]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	495f      	ldr	r1, [pc, #380]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	e018      	b.n	80042b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5c      	ldr	r2, [pc, #368]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd feeb 	bl	8002068 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fee7 	bl	8002068 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e237      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d03c      	beq.n	800433a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01c      	beq.n	8004302 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ce:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fec6 	bl	8002068 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e0:	f7fd fec2 	bl	8002068 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e212      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ef      	beq.n	80042e0 <HAL_RCC_OscConfig+0x3ec>
 8004300:	e01b      	b.n	800433a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004308:	4a3b      	ldr	r2, [pc, #236]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fd fea9 	bl	8002068 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431a:	f7fd fea5 	bl	8002068 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1f5      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800432c:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ef      	bne.n	800431a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a6 	beq.w	8004494 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004362:	6593      	str	r3, [r2, #88]	; 0x58
 8004364:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004370:	2301      	movs	r3, #1
 8004372:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_RCC_OscConfig+0x508>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d118      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004380:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <HAL_RCC_OscConfig+0x508>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_RCC_OscConfig+0x508>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438c:	f7fd fe6c 	bl	8002068 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fd fe68 	bl	8002068 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e1b8      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_RCC_OscConfig+0x508>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <HAL_RCC_OscConfig+0x4d8>
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ca:	e029      	b.n	8004420 <HAL_RCC_OscConfig+0x52c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d115      	bne.n	8004400 <HAL_RCC_OscConfig+0x50c>
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_RCC_OscConfig+0x504>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f4:	e014      	b.n	8004420 <HAL_RCC_OscConfig+0x52c>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
 8004400:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	4a9c      	ldr	r2, [pc, #624]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004410:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	4a98      	ldr	r2, [pc, #608]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fd fe1e 	bl	8002068 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd fe1a 	bl	8002068 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e168      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ed      	beq.n	8004430 <HAL_RCC_OscConfig+0x53c>
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd fe07 	bl	8002068 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fd fe03 	bl	8002068 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e151      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004474:	4b80      	ldr	r3, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ed      	bne.n	800445e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004482:	7ffb      	ldrb	r3, [r7, #31]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004492:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d03c      	beq.n	800451a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01c      	beq.n	80044e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a8:	4b73      	ldr	r3, [pc, #460]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80044aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ae:	4a72      	ldr	r2, [pc, #456]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd fdd6 	bl	8002068 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c0:	f7fd fdd2 	bl	8002068 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e122      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d2:	4b69      	ldr	r3, [pc, #420]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80044d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCC_OscConfig+0x5cc>
 80044e0:	e01b      	b.n	800451a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80044e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e8:	4a63      	ldr	r2, [pc, #396]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fd fdb9 	bl	8002068 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044fa:	f7fd fdb5 	bl	8002068 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e105      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800450c:	4b5a      	ldr	r3, [pc, #360]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 800450e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ef      	bne.n	80044fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80f9 	beq.w	8004716 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	2b02      	cmp	r3, #2
 800452a:	f040 80cf 	bne.w	80046cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800452e:	4b52      	ldr	r3, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	429a      	cmp	r2, r3
 8004540:	d12c      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	3b01      	subs	r3, #1
 800454e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d123      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d11b      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d113      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	3b01      	subs	r3, #1
 8004582:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d109      	bne.n	800459c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d071      	beq.n	8004680 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d068      	beq.n	8004674 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045a2:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045ae:	4b32      	ldr	r3, [pc, #200]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0ac      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ca:	f7fd fd4d 	bl	8002068 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fd fd49 	bl	8002068 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e099      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCC_OscConfig+0x788>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004600:	3a01      	subs	r2, #1
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800460a:	0212      	lsls	r2, r2, #8
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0552      	lsls	r2, r2, #21
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0652      	lsls	r2, r2, #25
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800462a:	06d2      	lsls	r2, r2, #27
 800462c:	430a      	orrs	r2, r1
 800462e:	4912      	ldr	r1, [pc, #72]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004630:	4313      	orrs	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004634:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800464c:	f7fd fd0c 	bl	8002068 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fd08 	bl	8002068 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e058      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <HAL_RCC_OscConfig+0x784>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004672:	e050      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04f      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
 8004678:	40021000 	.word	0x40021000
 800467c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d144      	bne.n	8004716 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800468c:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046a4:	f7fd fce0 	bl	8002068 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fcdc 	bl	8002068 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e02c      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x7b8>
 80046ca:	e024      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d01f      	beq.n	8004712 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd fcc3 	bl	8002068 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fd fcbf 	bl	8002068 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4905      	ldr	r1, [pc, #20]	; (8004720 <HAL_RCC_OscConfig+0x82c>)
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_OscConfig+0x830>)
 800470c:	4013      	ands	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e001      	b.n	8004716 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	feeefffc 	.word	0xfeeefffc

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e11d      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b90      	ldr	r3, [pc, #576]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b8d      	ldr	r3, [pc, #564]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	498b      	ldr	r1, [pc, #556]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b89      	ldr	r3, [pc, #548]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e105      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004788:	429a      	cmp	r2, r3
 800478a:	d908      	bls.n	800479e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b7e      	ldr	r3, [pc, #504]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	497b      	ldr	r1, [pc, #492]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d079      	beq.n	800489e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d11e      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0dc      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80047c2:	f000 fa09 	bl	8004bd8 <RCC_GetSysClockFreqFromPLLSource>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4a70      	ldr	r2, [pc, #448]	; (800498c <HAL_RCC_ClockConfig+0x264>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d946      	bls.n	800485c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047ce:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d140      	bne.n	800485c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047da:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e2:	4a69      	ldr	r2, [pc, #420]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e035      	b.n	800485c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f8:	4b63      	ldr	r3, [pc, #396]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b9      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004810:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0ad      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004820:	4b59      	ldr	r3, [pc, #356]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0a5      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004830:	f000 f8b4 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004834:	4603      	mov	r3, r0
 8004836:	4a55      	ldr	r2, [pc, #340]	; (800498c <HAL_RCC_ClockConfig+0x264>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d90f      	bls.n	800485c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800483c:	4b52      	ldr	r3, [pc, #328]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004848:	4b4f      	ldr	r3, [pc, #316]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004850:	4a4d      	ldr	r2, [pc, #308]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4947      	ldr	r1, [pc, #284]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fd fbfb 	bl	8002068 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004874:	e00a      	b.n	800488c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004876:	f7fd fbf7 	bl	8002068 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e077      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488c:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 020c 	and.w	r2, r3, #12
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	429a      	cmp	r2, r3
 800489c:	d1eb      	bne.n	8004876 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048a4:	4b38      	ldr	r3, [pc, #224]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a37      	ldr	r2, [pc, #220]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d010      	beq.n	80048de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d208      	bcs.n	80048de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	492b      	ldr	r1, [pc, #172]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048de:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d210      	bcs.n	800490e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 020f 	bic.w	r2, r3, #15
 80048f4:	4923      	ldr	r1, [pc, #140]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCC_ClockConfig+0x25c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e036      	b.n	800497c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4918      	ldr	r1, [pc, #96]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4910      	ldr	r1, [pc, #64]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800494c:	f000 f826 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_RCC_ClockConfig+0x260>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	490c      	ldr	r1, [pc, #48]	; (8004990 <HAL_RCC_ClockConfig+0x268>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <HAL_RCC_ClockConfig+0x26c>)
 800496a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_ClockConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7fd fb29 	bl	8001fc8 <HAL_InitTick>
 8004976:	4603      	mov	r3, r0
 8004978:	73fb      	strb	r3, [r7, #15]

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40022000 	.word	0x40022000
 8004988:	40021000 	.word	0x40021000
 800498c:	04c4b400 	.word	0x04c4b400
 8004990:	08006414 	.word	0x08006414
 8004994:	20000000 	.word	0x20000000
 8004998:	2000002c 	.word	0x2000002c

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b3e      	ldr	r3, [pc, #248]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11e      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d0:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049dc:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f8:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e004      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d134      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xac>
 8004a40:	e005      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	fb03 f202 	mul.w	r2, r3, r2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a94:	69bb      	ldr	r3, [r7, #24]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	0800642c 	.word	0x0800642c
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	08006424 	.word	0x08006424

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004afc:	f7ff ffda 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0adb      	lsrs	r3, r3, #11
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	08006424 	.word	0x08006424

08004b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b3c:	f7ff f916 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004b40:	6178      	str	r0, [r7, #20]
 8004b42:	e014      	b.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b50:	4b1f      	ldr	r3, [pc, #124]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b5c:	f7ff f906 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 8004b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	4a1a      	ldr	r2, [pc, #104]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b74:	d10b      	bne.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d913      	bls.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b80:	d902      	bls.n	8004b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b82:	2302      	movs	r3, #2
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e00d      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b88:	2301      	movs	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e00a      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d902      	bls.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b94:	2302      	movs	r3, #2
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e004      	b.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b70      	cmp	r3, #112	; 0x70
 8004b9e:	d101      	bne.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 020f 	bic.w	r2, r3, #15
 8004bac:	4909      	ldr	r1, [pc, #36]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40022000 	.word	0x40022000

08004bd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d00b      	beq.n	8004c06 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d825      	bhi.n	8004c40 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d008      	beq.n	8004c0c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d11f      	bne.n	8004c40 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c02:	613b      	str	r3, [r7, #16]
    break;
 8004c04:	e01f      	b.n	8004c46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c08:	613b      	str	r3, [r7, #16]
    break;
 8004c0a:	e01c      	b.n	8004c46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e005      	b.n	8004c34 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004c34:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	613b      	str	r3, [r7, #16]
    break;
 8004c3e:	e002      	b.n	8004c46 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
    break;
 8004c44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	3301      	adds	r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	fb03 f202 	mul.w	r2, r3, r2
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0e5b      	lsrs	r3, r3, #25
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c86:	683b      	ldr	r3, [r7, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40021000 	.word	0x40021000
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	007a1200 	.word	0x007a1200
 8004ca0:	0800642c 	.word	0x0800642c

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cac:	2300      	movs	r3, #0
 8004cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d040      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d02a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d825      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d026      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cd0:	2b60      	cmp	r3, #96	; 0x60
 8004cd2:	d821      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d006      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d81d      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d010      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ce4:	e018      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ce6:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4a88      	ldr	r2, [pc, #544]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cf2:	e015      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb02 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3320      	adds	r3, #32
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fbed 	bl	80054ec <RCCEx_PLLSAI2_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	74fb      	strb	r3, [r7, #19]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d26:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d2c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	4975      	ldr	r1, [pc, #468]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d3c:	e001      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	7cfb      	ldrb	r3, [r7, #19]
 8004d40:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d047      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d030      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	d82a      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d62:	d02a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d68:	d824      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d74:	d81e      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d010      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d80:	e018      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d82:	4b62      	ldr	r3, [pc, #392]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	4a61      	ldr	r2, [pc, #388]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d8e:	e015      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fab4 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004da0:	e00c      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3320      	adds	r3, #32
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fb9f 	bl	80054ec <RCCEx_PLLSAI2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db2:	e003      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	74fb      	strb	r3, [r7, #19]
      break;
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc2:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	494e      	ldr	r1, [pc, #312]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004dd8:	e001      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 809f 	beq.w	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004df0:	4b46      	ldr	r3, [pc, #280]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e10:	6593      	str	r3, [r2, #88]	; 0x58
 8004e12:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e22:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2e:	f7fd f91b 	bl	8002068 <HAL_GetTick>
 8004e32:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e34:	e009      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fd f917 	bl	8002068 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d902      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	74fb      	strb	r3, [r7, #19]
        break;
 8004e48:	e005      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ef      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d15b      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01f      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d019      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e86:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea6:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d016      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fd f8d6 	bl	8002068 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fd f8d2 	bl	8002068 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d902      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed6:	e006      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ec      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	4903      	ldr	r1, [pc, #12]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	74bb      	strb	r3, [r7, #18]
 8004f0a:	e005      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f18:	7c7b      	ldrb	r3, [r7, #17]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1e:	4ba0      	ldr	r3, [pc, #640]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	4a9f      	ldr	r2, [pc, #636]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f36:	4b9a      	ldr	r3, [pc, #616]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f023 0203 	bic.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	4996      	ldr	r1, [pc, #600]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f58:	4b91      	ldr	r3, [pc, #580]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 020c 	bic.w	r2, r3, #12
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	498e      	ldr	r1, [pc, #568]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7a:	4b89      	ldr	r3, [pc, #548]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	4985      	ldr	r1, [pc, #532]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9c:	4b80      	ldr	r3, [pc, #512]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004faa:	497d      	ldr	r1, [pc, #500]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fbe:	4b78      	ldr	r3, [pc, #480]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fcc:	4974      	ldr	r1, [pc, #464]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe0:	4b6f      	ldr	r3, [pc, #444]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	496c      	ldr	r1, [pc, #432]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005002:	4b67      	ldr	r3, [pc, #412]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005010:	4963      	ldr	r1, [pc, #396]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005024:	4b5e      	ldr	r3, [pc, #376]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005032:	495b      	ldr	r1, [pc, #364]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005046:	4b56      	ldr	r3, [pc, #344]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005054:	4952      	ldr	r1, [pc, #328]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005068:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	494a      	ldr	r1, [pc, #296]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800508a:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	4941      	ldr	r1, [pc, #260]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050ac:	4b3c      	ldr	r3, [pc, #240]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	4939      	ldr	r1, [pc, #228]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d028      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ce:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050dc:	4930      	ldr	r1, [pc, #192]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ec:	d106      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f8:	60d3      	str	r3, [r2, #12]
 80050fa:	e011      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3304      	adds	r3, #4
 800510a:	2101      	movs	r1, #1
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f8f9 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005116:	7cfb      	ldrb	r3, [r7, #19]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d04d      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005134:	d108      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005142:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005146:	e012      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800514e:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005154:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005166:	490e      	ldr	r1, [pc, #56]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005176:	d106      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005182:	60d3      	str	r3, [r2, #12]
 8005184:	e020      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518e:	d109      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a02      	ldr	r2, [pc, #8]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519a:	60d3      	str	r3, [r2, #12]
 800519c:	e014      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f8a5 	bl	8005304 <RCCEx_PLLSAI1_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d028      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051d4:	4b4a      	ldr	r3, [pc, #296]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	4947      	ldr	r1, [pc, #284]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f2:	d106      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f4:	4b42      	ldr	r3, [pc, #264]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a41      	ldr	r2, [pc, #260]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051fe:	60d3      	str	r3, [r2, #12]
 8005200:	e011      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800520a:	d10c      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	2101      	movs	r1, #1
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f876 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01e      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005232:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005242:	492f      	ldr	r1, [pc, #188]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f851 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005282:	f023 0204 	bic.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528c:	491c      	ldr	r1, [pc, #112]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a6:	f023 0218 	bic.w	r2, r3, #24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	4913      	ldr	r1, [pc, #76]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d017      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80052c4:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d4:	490a      	ldr	r1, [pc, #40]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000

08005304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005312:	4b72      	ldr	r3, [pc, #456]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800531e:	4b6f      	ldr	r3, [pc, #444]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0203 	and.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d103      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
       ||
 8005332:	2b00      	cmp	r3, #0
 8005334:	d142      	bne.n	80053bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e03f      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x72>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0x90>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x4e>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x60>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b62      	ldr	r3, [pc, #392]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5d      	ldr	r3, [pc, #372]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b59      	ldr	r3, [pc, #356]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b56      	ldr	r3, [pc, #344]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80053aa:	4b4c      	ldr	r3, [pc, #304]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4949      	ldr	r1, [pc, #292]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 8086 	bne.w	80054d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053c4:	4b45      	ldr	r3, [pc, #276]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a44      	ldr	r2, [pc, #272]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d0:	f7fc fe4a 	bl	8002068 <HAL_GetTick>
 80053d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053d6:	e009      	b.n	80053ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d8:	f7fc fe46 	bl	8002068 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d902      	bls.n	80053ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	73fb      	strb	r3, [r7, #15]
        break;
 80053ea:	e005      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ef      	bne.n	80053d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d168      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d113      	bne.n	800542c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005404:	4b35      	ldr	r3, [pc, #212]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800540a:	4013      	ands	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6892      	ldr	r2, [r2, #8]
 8005410:	0211      	lsls	r1, r2, #8
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68d2      	ldr	r2, [r2, #12]
 8005416:	06d2      	lsls	r2, r2, #27
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6852      	ldr	r2, [r2, #4]
 800541e:	3a01      	subs	r2, #1
 8005420:	0112      	lsls	r2, r2, #4
 8005422:	430a      	orrs	r2, r1
 8005424:	492d      	ldr	r1, [pc, #180]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	610b      	str	r3, [r1, #16]
 800542a:	e02d      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d115      	bne.n	800545e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	0211      	lsls	r1, r2, #8
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6912      	ldr	r2, [r2, #16]
 8005444:	0852      	lsrs	r2, r2, #1
 8005446:	3a01      	subs	r2, #1
 8005448:	0552      	lsls	r2, r2, #21
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6852      	ldr	r2, [r2, #4]
 8005450:	3a01      	subs	r2, #1
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	4921      	ldr	r1, [pc, #132]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005458:	4313      	orrs	r3, r2
 800545a:	610b      	str	r3, [r1, #16]
 800545c:	e014      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	4013      	ands	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6952      	ldr	r2, [r2, #20]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0652      	lsls	r2, r2, #25
 8005476:	4311      	orrs	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6852      	ldr	r2, [r2, #4]
 800547c:	3a01      	subs	r2, #1
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	430a      	orrs	r2, r1
 8005482:	4916      	ldr	r1, [pc, #88]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005488:	4b14      	ldr	r3, [pc, #80]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a13      	ldr	r2, [pc, #76]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800548e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fc fde8 	bl	8002068 <HAL_GetTick>
 8005498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800549a:	e009      	b.n	80054b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800549c:	f7fc fde4 	bl	8002068 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d902      	bls.n	80054b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	73fb      	strb	r3, [r7, #15]
          break;
 80054ae:	e005      	b.n	80054bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ef      	beq.n	800549c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	4904      	ldr	r1, [pc, #16]	; (80054dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	07ff800f 	.word	0x07ff800f
 80054e4:	ff9f800f 	.word	0xff9f800f
 80054e8:	f9ff800f 	.word	0xf9ff800f

080054ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054fa:	4b72      	ldr	r3, [pc, #456]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005506:	4b6f      	ldr	r3, [pc, #444]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d103      	bne.n	800551e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
       ||
 800551a:	2b00      	cmp	r3, #0
 800551c:	d142      	bne.n	80055a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e03f      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d018      	beq.n	800555e <RCCEx_PLLSAI2_Config+0x72>
 800552c:	2b03      	cmp	r3, #3
 800552e:	d825      	bhi.n	800557c <RCCEx_PLLSAI2_Config+0x90>
 8005530:	2b01      	cmp	r3, #1
 8005532:	d002      	beq.n	800553a <RCCEx_PLLSAI2_Config+0x4e>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d009      	beq.n	800554c <RCCEx_PLLSAI2_Config+0x60>
 8005538:	e020      	b.n	800557c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800553a:	4b62      	ldr	r3, [pc, #392]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d11d      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554a:	e01a      	b.n	8005582 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800554c:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d116      	bne.n	8005586 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555c:	e013      	b.n	8005586 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800556a:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800557a:	e006      	b.n	800558a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	e004      	b.n	800558c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800558a:	bf00      	nop
    }

    if(status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005592:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f023 0203 	bic.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4949      	ldr	r1, [pc, #292]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f040 8086 	bne.w	80056b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055ac:	4b45      	ldr	r3, [pc, #276]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a44      	ldr	r2, [pc, #272]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b8:	f7fc fd56 	bl	8002068 <HAL_GetTick>
 80055bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055be:	e009      	b.n	80055d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c0:	f7fc fd52 	bl	8002068 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d902      	bls.n	80055d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	73fb      	strb	r3, [r7, #15]
        break;
 80055d2:	e005      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055d4:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ef      	bne.n	80055c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d168      	bne.n	80056b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d113      	bne.n	8005614 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055ec:	4b35      	ldr	r3, [pc, #212]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6892      	ldr	r2, [r2, #8]
 80055f8:	0211      	lsls	r1, r2, #8
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68d2      	ldr	r2, [r2, #12]
 80055fe:	06d2      	lsls	r2, r2, #27
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6852      	ldr	r2, [r2, #4]
 8005606:	3a01      	subs	r2, #1
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	430a      	orrs	r2, r1
 800560c:	492d      	ldr	r1, [pc, #180]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	614b      	str	r3, [r1, #20]
 8005612:	e02d      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d115      	bne.n	8005646 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6892      	ldr	r2, [r2, #8]
 8005626:	0211      	lsls	r1, r2, #8
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6912      	ldr	r2, [r2, #16]
 800562c:	0852      	lsrs	r2, r2, #1
 800562e:	3a01      	subs	r2, #1
 8005630:	0552      	lsls	r2, r2, #21
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	430a      	orrs	r2, r1
 800563e:	4921      	ldr	r1, [pc, #132]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	614b      	str	r3, [r1, #20]
 8005644:	e014      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800564c:	4013      	ands	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6892      	ldr	r2, [r2, #8]
 8005652:	0211      	lsls	r1, r2, #8
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6952      	ldr	r2, [r2, #20]
 8005658:	0852      	lsrs	r2, r2, #1
 800565a:	3a01      	subs	r2, #1
 800565c:	0652      	lsls	r2, r2, #25
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6852      	ldr	r2, [r2, #4]
 8005664:	3a01      	subs	r2, #1
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	430a      	orrs	r2, r1
 800566a:	4916      	ldr	r1, [pc, #88]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fc fcf4 	bl	8002068 <HAL_GetTick>
 8005680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005682:	e009      	b.n	8005698 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005684:	f7fc fcf0 	bl	8002068 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d902      	bls.n	8005698 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	73fb      	strb	r3, [r7, #15]
          break;
 8005696:	e005      	b.n	80056a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ef      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4904      	ldr	r1, [pc, #16]	; (80056c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000
 80056c8:	07ff800f 	.word	0x07ff800f
 80056cc:	ff9f800f 	.word	0xff9f800f
 80056d0:	f9ff800f 	.word	0xf9ff800f

080056d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e042      	b.n	800576c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc f935 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb24 	bl	8005d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f825 	bl	8005774 <UART_SetConfig>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e01b      	b.n	800576c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fba3 	bl	8005eb0 <UART_CheckIdleState>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005778:	b08c      	sub	sp, #48	; 0x30
 800577a:	af00      	add	r7, sp, #0
 800577c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4baa      	ldr	r3, [pc, #680]	; (8005a4c <UART_SetConfig+0x2d8>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a9f      	ldr	r2, [pc, #636]	; (8005a50 <UART_SetConfig+0x2dc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	4313      	orrs	r3, r2
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f023 010f 	bic.w	r1, r3, #15
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a90      	ldr	r2, [pc, #576]	; (8005a54 <UART_SetConfig+0x2e0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d125      	bne.n	8005864 <UART_SetConfig+0xf0>
 8005818:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <UART_SetConfig+0x2e4>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d81a      	bhi.n	800585c <UART_SetConfig+0xe8>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0xb8>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005845 	.word	0x08005845
 8005838:	08005855 	.word	0x08005855
 800583c:	2301      	movs	r3, #1
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e116      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e112      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e10e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e10a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e106      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7c      	ldr	r2, [pc, #496]	; (8005a5c <UART_SetConfig+0x2e8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d138      	bne.n	80058e0 <UART_SetConfig+0x16c>
 800586e:	4b7a      	ldr	r3, [pc, #488]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d82d      	bhi.n	80058d8 <UART_SetConfig+0x164>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x110>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e0d8      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058c0:	2302      	movs	r3, #2
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e0d4      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e0d0      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e0cc      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e0c8      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5e      	ldr	r2, [pc, #376]	; (8005a60 <UART_SetConfig+0x2ec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d125      	bne.n	8005936 <UART_SetConfig+0x1c2>
 80058ea:	4b5b      	ldr	r3, [pc, #364]	; (8005a58 <UART_SetConfig+0x2e4>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d016      	beq.n	8005926 <UART_SetConfig+0x1b2>
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d818      	bhi.n	800592e <UART_SetConfig+0x1ba>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d00a      	beq.n	8005916 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d814      	bhi.n	800592e <UART_SetConfig+0x1ba>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <UART_SetConfig+0x19a>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d008      	beq.n	800591e <UART_SetConfig+0x1aa>
 800590c:	e00f      	b.n	800592e <UART_SetConfig+0x1ba>
 800590e:	2300      	movs	r3, #0
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005914:	e0ad      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005916:	2302      	movs	r3, #2
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591c:	e0a9      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800591e:	2304      	movs	r3, #4
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005924:	e0a5      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005926:	2308      	movs	r3, #8
 8005928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592c:	e0a1      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800592e:	2310      	movs	r3, #16
 8005930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005934:	e09d      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <UART_SetConfig+0x2f0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d125      	bne.n	800598c <UART_SetConfig+0x218>
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594a:	2bc0      	cmp	r3, #192	; 0xc0
 800594c:	d016      	beq.n	800597c <UART_SetConfig+0x208>
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d818      	bhi.n	8005984 <UART_SetConfig+0x210>
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d00a      	beq.n	800596c <UART_SetConfig+0x1f8>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x210>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0x1f0>
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d008      	beq.n	8005974 <UART_SetConfig+0x200>
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x210>
 8005964:	2300      	movs	r3, #0
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596a:	e082      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800596c:	2302      	movs	r3, #2
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005972:	e07e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597a:	e07a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e076      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e072      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <UART_SetConfig+0x2f4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d12a      	bne.n	80059ec <UART_SetConfig+0x278>
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a4:	d01a      	beq.n	80059dc <UART_SetConfig+0x268>
 80059a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059aa:	d81b      	bhi.n	80059e4 <UART_SetConfig+0x270>
 80059ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b0:	d00c      	beq.n	80059cc <UART_SetConfig+0x258>
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b6:	d815      	bhi.n	80059e4 <UART_SetConfig+0x270>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <UART_SetConfig+0x250>
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c0:	d008      	beq.n	80059d4 <UART_SetConfig+0x260>
 80059c2:	e00f      	b.n	80059e4 <UART_SetConfig+0x270>
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e052      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e04e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e04a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e046      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e042      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <UART_SetConfig+0x2dc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d13a      	bne.n	8005a6c <UART_SetConfig+0x2f8>
 80059f6:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <UART_SetConfig+0x2e4>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a04:	d01a      	beq.n	8005a3c <UART_SetConfig+0x2c8>
 8005a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0a:	d81b      	bhi.n	8005a44 <UART_SetConfig+0x2d0>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a10:	d00c      	beq.n	8005a2c <UART_SetConfig+0x2b8>
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d815      	bhi.n	8005a44 <UART_SetConfig+0x2d0>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <UART_SetConfig+0x2b0>
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x2c0>
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x2d0>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e022      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e01e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e01a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e016      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e012      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a4c:	cfff69f3 	.word	0xcfff69f3
 8005a50:	40008000 	.word	0x40008000
 8005a54:	40013800 	.word	0x40013800
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	40004800 	.word	0x40004800
 8005a64:	40004c00 	.word	0x40004c00
 8005a68:	40005000 	.word	0x40005000
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4aae      	ldr	r2, [pc, #696]	; (8005d30 <UART_SetConfig+0x5bc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	f040 8097 	bne.w	8005bac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d823      	bhi.n	8005ace <UART_SetConfig+0x35a>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <UART_SetConfig+0x318>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005abf 	.word	0x08005abf
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005acf 	.word	0x08005acf
 8005aac:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab0:	f7ff f80c 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b9e      	ldr	r3, [pc, #632]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005abc:	e00d      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fe ff6d 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8130 	beq.w	8005d42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	4a94      	ldr	r2, [pc, #592]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d305      	bcc.n	8005b12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d903      	bls.n	8005b1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b18:	e113      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	60fa      	str	r2, [r7, #12]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	4a84      	ldr	r2, [pc, #528]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2200      	movs	r2, #0
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b3c:	f7fa fb5e 	bl	80001fc <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	020b      	lsls	r3, r1, #8
 8005b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b56:	0202      	lsls	r2, r0, #8
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	0849      	lsrs	r1, r1, #1
 8005b5e:	2000      	movs	r0, #0
 8005b60:	460c      	mov	r4, r1
 8005b62:	4605      	mov	r5, r0
 8005b64:	eb12 0804 	adds.w	r8, r2, r4
 8005b68:	eb43 0905 	adc.w	r9, r3, r5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	469a      	mov	sl, r3
 8005b74:	4693      	mov	fp, r2
 8005b76:	4652      	mov	r2, sl
 8005b78:	465b      	mov	r3, fp
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fb3d 	bl	80001fc <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b90:	d308      	bcc.n	8005ba4 <UART_SetConfig+0x430>
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d204      	bcs.n	8005ba4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e0ce      	b.n	8005d42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005baa:	e0ca      	b.n	8005d42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d166      	bne.n	8005c84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x49a>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x450>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe ff70 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bee:	e014      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe ff82 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4e      	ldr	r3, [pc, #312]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe fecd 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8005c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8090 	beq.w	8005d42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	4a44      	ldr	r2, [pc, #272]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c34:	005a      	lsls	r2, r3, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	441a      	add	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d916      	bls.n	8005c7c <UART_SetConfig+0x508>
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d212      	bcs.n	8005c7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f023 030f 	bic.w	r3, r3, #15
 8005c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	8bfa      	ldrh	r2, [r7, #30]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e062      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c82:	e05e      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d828      	bhi.n	8005cde <UART_SetConfig+0x56a>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x520>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005cdf 	.word	0x08005cdf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe ff08 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8005cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cbe:	e014      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fe ff1a 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cc6:	e010      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ccc:	e00d      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe fe65 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8005cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd4:	e009      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cdc:	e005      	b.n	8005cea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d028      	beq.n	8005d42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	441a      	add	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d910      	bls.n	8005d3c <UART_SetConfig+0x5c8>
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d20:	d20c      	bcs.n	8005d3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60da      	str	r2, [r3, #12]
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x5ce>
 8005d2e:	bf00      	nop
 8005d30:	40008000 	.word	0x40008000
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	0800645c 	.word	0x0800645c
      }
      else
      {
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3730      	adds	r7, #48	; 0x30
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6a:	d10a      	bne.n	8005e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b098      	sub	sp, #96	; 0x60
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec0:	f7fc f8d2 	bl	8002068 <HAL_GetTick>
 8005ec4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d12f      	bne.n	8005f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f88e 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f02:	653b      	str	r3, [r7, #80]	; 0x50
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e063      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d149      	bne.n	8005fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f857 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03c      	beq.n	8005fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3758      	adds	r7, #88	; 0x58
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	e049      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d045      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fc f823 	bl	8002068 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x30>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e048      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d031      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d110      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f838 	bl	80060d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2208      	movs	r2, #8
 8006066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e029      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006084:	d111      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f81e 	bl	80060d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e00f      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4013      	ands	r3, r2
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d0a6      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b095      	sub	sp, #84	; 0x54
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f8:	643b      	str	r3, [r7, #64]	; 0x40
 80060fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	61fb      	str	r3, [r7, #28]
   return(result);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d118      	bne.n	800617e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60bb      	str	r3, [r7, #8]
   return(result);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6979      	ldr	r1, [r7, #20]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	613b      	str	r3, [r7, #16]
   return(result);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e6      	bne.n	800614c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006192:	bf00      	nop
 8006194:	3754      	adds	r7, #84	; 0x54
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e027      	b.n	8006204 <HAL_UARTEx_DisableFifoMode+0x66>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006224:	2302      	movs	r3, #2
 8006226:	e02d      	b.n	8006284 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f84f 	bl	8006308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e02d      	b.n	8006300 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	; 0x24
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f811 	bl	8006308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006328:	e031      	b.n	800638e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800632a:	2308      	movs	r3, #8
 800632c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800632e:	2308      	movs	r3, #8
 8006330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	0e5b      	lsrs	r3, r3, #25
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	0f5b      	lsrs	r3, r3, #29
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	7b3a      	ldrb	r2, [r7, #12]
 8006356:	4911      	ldr	r1, [pc, #68]	; (800639c <UARTEx_SetNbDataToProcess+0x94>)
 8006358:	5c8a      	ldrb	r2, [r1, r2]
 800635a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800635e:	7b3a      	ldrb	r2, [r7, #12]
 8006360:	490f      	ldr	r1, [pc, #60]	; (80063a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006364:	fb93 f3f2 	sdiv	r3, r3, r2
 8006368:	b29a      	uxth	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	7b7a      	ldrb	r2, [r7, #13]
 8006374:	4909      	ldr	r1, [pc, #36]	; (800639c <UARTEx_SetNbDataToProcess+0x94>)
 8006376:	5c8a      	ldrb	r2, [r1, r2]
 8006378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800637c:	7b7a      	ldrb	r2, [r7, #13]
 800637e:	4908      	ldr	r1, [pc, #32]	; (80063a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006382:	fb93 f3f2 	sdiv	r3, r3, r2
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	08006474 	.word	0x08006474
 80063a0:	0800647c 	.word	0x0800647c

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	; (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	; (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	; (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	; (80063f8 <__libc_init_array+0x44>)
 80063c8:	f000 f818 	bl	80063fc <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	0800648c 	.word	0x0800648c
 80063f0:	0800648c 	.word	0x0800648c
 80063f4:	0800648c 	.word	0x0800648c
 80063f8:	08006490 	.word	0x08006490

080063fc <_init>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	bf00      	nop
 8006400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006402:	bc08      	pop	{r3}
 8006404:	469e      	mov	lr, r3
 8006406:	4770      	bx	lr

08006408 <_fini>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr
